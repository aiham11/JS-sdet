import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import org.apache.commons.io.FileUtils;

private static void migrateTestStepAttachments(JsonObject jiraJson, RallyRestApi restApi, String testCaseRef) throws IOException {
    // Ensure the Attachments folder exists
    File attachmentFolder = new File("Attachments");
    if (!attachmentFolder.exists()) {
        attachmentFolder.mkdir();
    }

    JsonObject testScript = jiraJson.getAsJsonObject("testScript");
    if (testScript != null) {
        JsonArray steps = testScript.getAsJsonArray("steps");
        if (steps != null) {
            for (JsonElement stepElement : steps) {
                JsonObject step = stepElement.getAsJsonObject();

                // Handle embedded attachments (images, etc.)
                String description = step.get("description").getAsString();
                List<File> downloadedAttachments = downloadEmbeddedAttachments(description);

                // Handle file attachments (if any)
                JsonArray attachmentArray = step.getAsJsonArray("attachments");
                if (attachmentArray != null) {
                    for (JsonElement attachmentElement : attachmentArray) {
                        JsonObject attachmentObj = attachmentElement.getAsJsonObject();
                        String fileUrl = attachmentObj.get("content").getAsString(); // Assuming 'content' holds the URL
                        String fileName = attachmentObj.get("filename").getAsString();

                        // Download the attachment
                        File file = downloadFile(fileUrl, fileName);
                        downloadedAttachments.add(file);
                    }
                }

                // Upload attachments to Rally test case level
                for (File file : downloadedAttachments) {
                    String attachmentRef = uploadAttachmentToRally(file, restApi, testCaseRef);

                    // Now link this attachment to the specific test step
                    if (attachmentRef != null) {
                        linkAttachmentToTestStep(restApi, testCaseRef, step.get("index").getAsInt(), attachmentRef);
                    }

                    // Cleanup - delete the file after uploading
                    if (file.exists()) {
                        file.delete();
                    }
                }
            }
        }
    }
}

private static List<File> downloadEmbeddedAttachments(String content) throws IOException {
    List<File> downloadedFiles = new ArrayList<>();
    // Use regex or other means to extract URLs of embedded images or other attachments
    Pattern pattern = Pattern.compile("src\\s*=\\s*\"([^\"]+)\"");
    Matcher matcher = pattern.matcher(content);
    
    while (matcher.find()) {
        String url = matcher.group(1);
        String fileName = url.substring(url.lastIndexOf('/') + 1);
        File file = downloadFile(url, fileName);
        downloadedFiles.add(file);
    }
    return downloadedFiles;
}

private static File downloadFile(String fileUrl, String fileName) throws IOException {
    File file = new File("Attachments/" + fileName);
    FileUtils.copyURLToFile(new URL(fileUrl), file);
    return file;
}

private static String uploadAttachmentToRally(File file, RallyRestApi restApi, String testCaseRef) throws IOException {
    JsonObject attachment = new JsonObject();

    // Convert file to Base64-encoded content
    byte[] fileContent = FileUtils.readFileToByteArray(file);
    String base64Content = Base64.getEncoder().encodeToString(fileContent);

    attachment.addProperty("Artifact", testCaseRef);
    attachment.addProperty("Content", base64Content);
    attachment.addProperty("Name", file.getName());
    attachment.addProperty("ContentType", "application/octet-stream");
    attachment.addProperty("Size", fileContent.length);

    CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
    CreateResponse attachmentResponse = restApi.create(attachmentRequest);

    if (attachmentResponse.wasSuccessful()) {
        return attachmentResponse.getObject().get("_ref").getAsString();
    } else {
        System.out.println("Error occurred creating attachment:");
        for (String error : attachmentResponse.getErrors()) {
            System.out.println(error);
        }
        return null;
    }
}

private static void linkAttachmentToTestStep(RallyRestApi restApi, String testCaseRef, int stepIndex, String attachmentRef) throws IOException {
    // Query for the specific test step using the testCaseRef and stepIndex
    QueryRequest stepRequest = new QueryRequest("TestCaseStep");
    stepRequest.setQueryFilter(new QueryFilter("TestCase", "=", testCaseRef)
                                .and(new QueryFilter("StepIndex", "=", String.valueOf(stepIndex))));

    QueryResponse stepResponse = restApi.query(stepRequest);

    if (stepResponse.wasSuccessful() && stepResponse.getTotalResultCount() > 0) {
        JsonObject stepObj = stepResponse.getResults().get(0).getAsJsonObject();
        String stepRef = stepObj.get("_ref").getAsString();

        // Link the attachment to the test step
        JsonObject attachmentLink = new JsonObject();
        attachmentLink.addProperty("_ref", attachmentRef);
        stepObj.add("Attachments", attachmentLink);

        // Update the test step with the attachment link
        CreateRequest updateStepRequest = new CreateRequest("TestCaseStep", stepObj);
        restApi.update(updateStepRequest);
    } else {
        System.out.println("Test step not found or error occurred.");
    }
}
