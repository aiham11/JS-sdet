this is my jiraoperation calss

package com.optum.coe.automation.rally;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpEntity;
import org.apache.http.ParseException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.json.JSONArray;
import org.json.JSONObject;

public class JiraOperation {

    private String jiraBaseURL;
    private String jiraApiKey;
    private String jiraProjectKey;
    private String max_chunk;
    private String tcFileAttachmentDownloadLocation;
    private static String tsFileAttachmentDownloadLocation;
    private static final Logger logger = LogManager.getLogger();
    private static final String tsEmbeddedAttachmentDownloadLocation = null;

    public JiraOperation() {
        jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        max_chunk = ConfigLoader.getConfigValue("MAX_VALUE_CHUNK");
        tcFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_CASE_FILE_ATTACHMENT_LOCATION");
        tsFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");
        logger.info("Jira values for the project key " + jiraProjectKey + " are assigned from rally_migration_config.properties file");
    }

    // Method to fetch non-migrated test cases from Jira
    public String fetchJiraNonMigratedTestcases(String jiraApiEndpoint, String jiraApiToken) {
        String jiraResponse = null;

        // Validate the endpoint URL
        if (jiraApiEndpoint == null || jiraApiEndpoint.trim().isEmpty()) {
            logger.error("The Jira API endpoint is null or empty.");
            return null;
        }

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            URI uri = URI.create(jiraApiEndpoint.trim());
            HttpGet request = new HttpGet(uri);
            request.addHeader("Authorization", "Bearer " + jiraApiToken);

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                if (response.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        jiraResponse = EntityUtils.toString(entity);
                        logger.info("Successfully fetched Jira response: " + jiraResponse);
                    } else {
                        logger.warn("No content returned in Jira response.");
                    }
                } else {
                    logger.error("Failed to fetch Jira response. HTTP error code: " + response.getStatusLine().getStatusCode());
                }
            }
        } catch (IOException e) {
            logger.error("Error occurred while fetching non-migrated test cases from Jira.", e);
        } catch (IllegalArgumentException e) {
            logger.error("The Jira API endpoint is improperly formatted: " + jiraApiEndpoint, e);
        }

        return jiraResponse;
    }

    public List<String> getJiraNonMigratedTestcaseKeys(String jiraResponse) {
        List<String> testcaseKeys = new ArrayList<>();

        if (jiraResponse == null || jiraResponse.isEmpty()) {
            logger.error("The Jira response is null or empty.");
            return testcaseKeys;  // Return an empty list to avoid further processing
        }

        try {
            JSONArray jArrayResponse = new JSONArray(jiraResponse);
            for (int i = 0; i < jArrayResponse.length(); i++) {
                JSONObject jsonObject = jArrayResponse.getJSONObject(i);
                String key = jsonObject.getString("key");
                testcaseKeys.add(key);
            }
        } catch (Exception e) {
            logger.error("Error occurred while parsing Jira response to get non-migrated testcase keys.", e);
        }

        return testcaseKeys;
    }
    
    
    
    public JsonObject getJiraTestCaseDetails(String key) {
        JsonObject jiraJson = null;
        String url = jiraBaseURL + "/rest/atm/1.0/testcase/" + key;
        HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
        if (response != null) {
            try {
                String responseBody = EntityUtils.toString(response);
                logger.info("Testcase details for the key " + key + ": " + responseBody);
                jiraJson = JsonParser.parseString(responseBody).getAsJsonObject();
            } catch (ParseException | IOException e) {
                logger.error("Failed to retrieve JIRA testcase details for the key " + key, e);
            }
        } else {
            logger.error("Failed to get jira testcase details for the key " + key + "; Returning null");
        }
        return jiraJson;
    }

    public static List<String> downloadStepAttachments(JiraTestStep step) {
        List<String> attachmentPaths = new ArrayList<>();

        if (step == null) {
            logger.warn("JiraTestStep is null.");
            return attachmentPaths;
        }

        List<JiraAttachment> attachments = step.getAttachments();
        if (attachments == null || attachments.isEmpty()) {
            logger.warn("No attachments found for the test step.");
            return attachmentPaths;
        }

        for (JiraAttachment attachment : attachments) {
            try {
                String downloadUrl = attachment.getUrl();
                if (downloadUrl != null && !downloadUrl.isEmpty()) {
                    String localPath = tsFileAttachmentDownloadLocation + "/" + attachment.getFileName();
                    Utils.downloadFileFromUrl(downloadUrl, localPath);
                    attachmentPaths.add(localPath);
                } else {
                    logger.warn("Download URL is null or empty for attachment: " + attachment.getFileName());
                }
            } catch (IOException e) {
                logger.error("Failed to download attachment: " + attachment.getFileName(), e);
            }
        }

        return attachmentPaths;
    }

    public List<String> jiraAttachmentsDownload(String testcaseKey, String testType, String attachmentType) {
        List<String> fileAttachmentDownloadPaths = null;
        String testAttachmentUrl = null;
        if (testType.equals("testcase")) {
            testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey + "/attachments";
            logger.info("URL String for testcase attachments: " + testAttachmentUrl);
        } else if (testType.equals("teststep") && attachmentType.equals("file")) {
            testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;
            logger.info("URL String for teststep attachments: " + testAttachmentUrl);
        } else if (testType.equals("teststep") && attachmentType.equals("embedded")) {
            testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;
            logger.info("URL String for teststep attachments: " + testAttachmentUrl);
        } else {
            logger.error("Usage of jiraFileAttachmentsDownload is not correct. The argument value should be either testcase or teststep");
            return null;
        }

        HttpEntity response = Utils.getJiraResponse(testAttachmentUrl, jiraApiKey);
        if (response != null) {
            String result = null;
            try {
                result = EntityUtils.toString(response);
                if (result.trim().isEmpty() || result.equals("{}") || result.equals("[]")) {
                    logger.info("No Attachment URL found for the testcase key " + testcaseKey);
                } else {
                    logger.info("Attachment URL is found for the testcase key " + testcaseKey + "; JSON body: " + result);
                    if (testType.equals("testcase")) {
                        Map<String, String> testMap = Utils.pharseJsonGetAttachmentUrlAndName(result);
                        fileAttachmentDownloadPaths = Utils.downloadFileAttachmentFromJiraTestCase(testMap,
                                tcFileAttachmentDownloadLocation, jiraApiKey, testcaseKey);
                    } else if (testType.equals("teststep") && attachmentType.equals("file")) {
                        fileAttachmentDownloadPaths = Utils.downloadFileAttachmentFromTestStep(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL);
                    } else if (testType.equals("teststep") && attachmentType.equals("embedded")) {
                        List<String> descriptionAttachmentDownloadPaths, testDataAttachmentDownloadPaths, expectedResultAttachmentDownloadPaths;
                        descriptionAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "description");
                        testDataAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "testData");
                        expectedResultAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "expectedResult");
                        descriptionAttachmentDownloadPaths.addAll(testDataAttachmentDownloadPaths);
                        descriptionAttachmentDownloadPaths.addAll(expectedResultAttachmentDownloadPaths);
                        fileAttachmentDownloadPaths = descriptionAttachmentDownloadPaths;
                    } else {
                        logger.error("Usage of jiraFileAttachmentsDownload is not correct. The argument value should be either testcase or teststep");
                        return null;
                    }
                }
            } catch (ParseException | IOException e) {
                logger.error("Error while parsing the Json response ", e);
            }
        } else {
            logger.error("Response is NULL while retrieving non-migrated keys from JIRA. Returning NULL");
        }
        return fileAttachmentDownloadPaths;
    }

    public List<String> downloadEmbeddedImages(JiraTestStep step) {
        List<String> embeddedImageUrls = step.getEmbeddedImageUrls();
        List<String> downloadedPaths = new ArrayList<>();
        String jiraBaseUrl = ConfigLoader.getConfigValue("JIRA_BASE_URL");

        if (embeddedImageUrls == null || embeddedImageUrls.isEmpty()) {
            logger.warn("No embedded images found for the test step: " + step.getDescription());
            return downloadedPaths;
        }

        for (String imageUrl : embeddedImageUrls) {
            if (imageUrl != null && !imageUrl.isEmpty()) {
                try {
                    String fullUrl = imageUrl.startsWith("http") ? imageUrl : jiraBaseUrl + imageUrl.replace("../", "/");

                    logger.info("Downloading image from URL: " + fullUrl);
                    String filePath = Utils.downloadFileFromUrl(fullUrl, "C:attachments");
                    if (filePath != null) {
                        downloadedPaths.add(filePath);
                        logger.info("Downloaded image to: " + filePath);
                    } else {
                        logger.error("Failed to download image from URL: " + fullUrl);
                    }
                } catch (Exception e) {
                    logger.error("Exception while downloading image from URL: " + imageUrl, e);
                }
            } else {
                logger.warn("Encountered null or empty image URL.");
            }
        }
        return downloadedPaths;
    }

    public String downloadImage(String baseUrl, String relativeUrl) throws IOException {
        try {
            URL fullUrl = new URL(baseUrl + relativeUrl.replace("../", "/"));
            String downloadedFilePath = Utils.downloadFileFromUrl(tsEmbeddedAttachmentDownloadLocation, tsEmbeddedAttachmentDownloadLocation);
            return downloadedFilePath;
        } catch (MalformedURLException e) {
            logger.error("Failed to download embedded image from URL: " + relativeUrl, e);
            return null;
        }
    }

    public List<JiraTestStep> getTestSteps(String testCaseId) {
        List<JiraTestStep> testSteps = new ArrayList<>();
        CloseableHttpClient httpClient = HttpClients.createDefault();

        try {
            String url = jiraBaseURL + "/rest/api/2/issue/" + testCaseId + "/teststeps";
            HttpGet request = new HttpGet(url);
            request.addHeader("Authorization", "Basic " + jiraApiKey);

            CloseableHttpResponse response = (CloseableHttpResponse) httpClient.execute(request);
            String jsonResponse = EntityUtils.toString(response.getEntity());

            JSONObject jsonObject = new JSONObject(jsonResponse);
            JSONArray stepsArray = jsonObject.getJSONArray("testSteps");

            logger.info("URL used to fetch test steps: " + url);
            logger.info("Number of teststeps retrieved: " + stepsArray.length());

            for (int i = 0; i < stepsArray.length(); i++) {
                JSONObject stepJson = stepsArray.getJSONObject(i);
                JiraTestStep step = new JiraTestStep();
                step.setId(stepJson.getInt("id"));
                step.setDescription(stepJson.getString("description"));
                step.setExpectedResult(stepJson.getString("expectedResult"));
                step.setIndex(stepJson.getInt("index"));
                step.setTestData(stepJson.getString("testData"));
                testSteps.add(step);
            }

            logger.info("Fetched " + testSteps.size() + " test steps for test case ID: " + testCaseId);

        } catch (Exception e) {
            logger.error("Error fetching test steps for test case ID: " + testCaseId, e);
        } finally {
            try {
                httpClient.close();
            } catch (Exception e) {
                logger.error("Error closing HttpClient", e);
            }
        }

        return testSteps;
    }

    private String getFileNameFromUrl(String url) {
        return url.substring(url.lastIndexOf('/') + 1);
    }
}
these are the logs

2024-08-11 20:17:57.942 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key RALLY_BASE_URL loaded with value: https://rally1.rallydev.com
2024-08-11 20:17:57.944 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key RALLY_API_KEY loaded with value: _UWk01XQOyRPk2ctMLiR9PAM1nBE6spnDEmSj1pk
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key JIRA_BASE_URL loaded with value: https://jira.healthcareit.net
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key JIRA_API_TOKEN loaded with value: NjkzMzI2MjUyMTAxOjheeHwL8gYnhul3HZo2HojKKY1R
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key JIRA_PROJECT_KEY loaded with value: CC2
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key MAX_VALUE_CHUNK loaded with value: 1
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key TEST_CASE_FILE_ATTACHMENT_LOCATION loaded with value: C:attachments
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key TEST_STEP_FILE_ATTACHMENT_LOCATION loaded with value: C:UsersaalchalaDocumentsThinaRallyMigrationattachmentsTestStep_Attachments
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.JiraOperation - Jira values for the project key CC2 are assigned from rally_migration_config.properties file
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key JIRA_API_ENDPOINT loaded with value: /rest/atm/1.0/testcase/search
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.RunnerClass - Jira API Endpoint: /rest/atm/1.0/testcase/search
2024-08-11 20:17:57.969 [main] INFO  com.optum.coe.automation.rally.ConfigLoader - Config key JIRA_API_TOKEN loaded with value: NjkzMzI2MjUyMTAxOjheeHwL8gYnhul3HZo2HojKKY1R
2024-08-11 20:17:58.183 [main] ERROR com.optum.coe.automation.rally.JiraOperation - Error occurred while fetching non-migrated test cases from Jira.
org.apache.http.client.ClientProtocolException: null
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:187) ~[httpclient-4.5.13.jar:4.5.13]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83) ~[httpclient-4.5.13.jar:4.5.13]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108) ~[httpclient-4.5.13.jar:4.5.13]
	at com.optum.coe.automation.rally.JiraOperation.fetchJiraNonMigratedTestcases(JiraOperation.java:67) [classes/:?]
	at com.optum.coe.automation.rally.RunnerClass.main(RunnerClass.java:38) [classes/:?]
Caused by: org.apache.http.ProtocolException: Target host is not specified
	at org.apache.http.impl.conn.DefaultRoutePlanner.determineRoute(DefaultRoutePlanner.java:71) ~[httpclient-4.5.13.jar:4.5.13]
	at org.apache.http.impl.client.InternalHttpClient.determineRoute(InternalHttpClient.java:125) ~[httpclient-4.5.13.jar:4.5.13]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.13.jar:4.5.13]
	... 4 more
2024-08-11 20:17:58.187 [main] ERROR com.optum.coe.automation.rally.JiraOperation - The Jira response is null or empty.
