Thank you for sharing the original code. I can now see the parts that were originally working, including the proper handling of test case-level attachments and the removal of attachments from local storage. I will restore those functionalities while incorporating the necessary changes to handle test step attachments correctly during their creation.

### Key Issues to Address:
1. **Test Case Level Attachments**: Ensure that these are correctly uploaded and associated with the test case.
2. **Test Step Creation with Attachments**: Modify the logic so that attachments are added to the test steps during their creation (not afterward, as Rally doesn't support this).
3. **Local Attachment Deletion**: Restore the functionality to delete attachments from local storage after they are uploaded.

### Updated `RallyOperation` Class

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    private static final Logger logger = LogManager.getLogger();

    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
    }

    public String createRallyTestcase(JsonObject jiraJson) {
        String rallyTestCaseOID = null;
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        JsonObject testCase = new JsonObject();
        testCase.addProperty("Name", jiraJson.get("name").getAsString());
        testCase.addProperty("Method", "Manual");
        testCase.addProperty("Priority", jiraJson.get("priority").getAsString());
        testCase.addProperty("Owner", "/user/" + rallyUser);
        testCase.addProperty("Ready", jiraJson.get("status").getAsString().equals("Ready"));

        // Additional properties like Tags and TestFolder
        rallyJson.add("testCase", testCase);

        try (RallyRestApi restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey)) {
            restApi.setApplicationName("CreateTestCaseApp");

            CreateRequest createRequest = new CreateRequest("testcase", rallyJson.getAsJsonObject("testCase"));
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test case and the OID for created testcase: " + rallyTestCaseOID);
            } else {
                logger.error("Error occurred creating test case: " + createResponse.getErrors());
            }
        } catch (URISyntaxException | IOException e) {
            logger.error("Exception occurred while creating Rally test case", e);
        }
        return rallyTestCaseOID;
    }

    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID, List<String> filePaths) {
        List<String> testcaseAttachmentOIDs = new ArrayList<>();
        try (RallyRestApi rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey)) {
            for (String filePath : filePaths) {
                try {
                    String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                    if (attachmentOID != null) {
                        testcaseAttachmentOIDs.add(attachmentOID);
                        logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                    }
                } catch (IOException e) {
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
                }
            }
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.", e);
        }
        return testcaseAttachmentOIDs;
    }

    public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        String ContentType = determineContentType(filePath);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);

        CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
        if (!attachmentContentResponse.wasSuccessful()) {
            logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
            return null;
        }
        String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();

        JsonObject attachment = new JsonObject();
        attachment.addProperty("Artifact", "/testcase/" + testCaseId);
        attachment.addProperty("Content", attachmentContentRef);
        attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
        attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
        attachment.addProperty("ContentType", ContentType);
        attachment.addProperty("Size", fileContent.length);

        CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
        CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
        if (attachmentResponse.wasSuccessful()) {
            logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
            return attachmentResponse.getObject().get("_ref").getAsString();
        } else {
            logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
            return null;
        }
    }

    private String determineContentType(String filePath) {
        String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();
        switch (attachmentType) {
            case ".png":
                return "image/png";
            case ".txt":
                return "text/plain";
            case ".jpeg":
            case ".jpg":
                return "image/jpeg";
            case ".xml":
                return "application/xml";
            case ".gif":
                return "image/gif";
            case ".doc":
                return "application/msword";
            case ".docx":
                return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            case ".xls":
                return "application/vnd.ms-excel";
            case ".xlsx":
                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            case ".zip":
                return "application/zip";
            default:
                return "application/octet-stream";
        }
    }

    public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
        for (JiraTestStep jiraTestStep : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseOID);
                newTestStep.addProperty("StepIndex", jiraTestStep.getIndex());
                newTestStep.addProperty("Input", jiraTestStep.getInput());
                newTestStep.addProperty("ExpectedResult", jiraTestStep.getExpectedResult());

                if (fileAttachmentPaths != null && !fileAttachmentPaths.isEmpty()) {
                    for (String filePath : fileAttachmentPaths) {
                        String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                        if (attachmentOID != null) {
                            newTestStep.addProperty("ExpectedResult", newTestStep.get("ExpectedResult").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                        }
                    }
                }

                if (embeddedAttachmentPaths != null && !embeddedAttachmentPaths.isEmpty()) {
                    for (String embeddedPath : embeddedAttachmentPaths) {
                        String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, embeddedPath);
                        if (attachmentOID != null) {
                            newTestStep.addProperty("Input", newTestStep.get("Input").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                        }
                    }
                }

                CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
                CreateResponse createResponse = rallyApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    logger.info("Successfully created test step in Rally for TestCase: " + rallyTestCaseOID);
                } else {
                    logger.error("Failed to create test step in Rally: " + createResponse.getErrors());
                }
            } catch (IOException e) {
                logger.error("Exception while creating test step in Rally

", e);
            }
        }
    }
}
```

### Updated `RunnerClass`

The `RunnerClass` will ensure proper deletion of local attachments after they have been uploaded.

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;

public class RunnerClass {

    private static final Logger logger = LogManager.getLogger();

    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

        for (String key : testcaseKeys) {
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            // Download and attach testcase level attachments
            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

            if (rallyTestcaseOID != null) {
                if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                    rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                    Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
                }
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                break;
            }

            // Handle Test Step Attachments
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();

            for (JsonElement element : stepsArray) {
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);
            }

            rallyOperation.migrateTestStepsWithAttachments(rallyTestcaseOID, testSteps, rallyRestApi, fileAttachmentDownloadPathsTestStepLevel, embeddedAttachmentDownloadPathsTestStepLevel);

            Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
            Utils.deleteAttachmentFileFromLocal(embeddedAttachmentDownloadPathsTestStepLevel);
        }
    }
}
```

### Summary of Changes:

1. **Test Case Level Attachments**: Restored the functionality to ensure test case-level attachments are uploaded correctly and remain at the test case level.
2. **Test Step Creation with Attachments**: Modified the test step creation process to correctly embed attachments in the `ExpectedResult` or `Input` fields during creation.
3. **Local Deletion**: Ensured that attachments are deleted from local storage after being uploaded to Rally.

This implementation should restore the original functionality and address the issues you identified. Let me know if you need further adjustments!
