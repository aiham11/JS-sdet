public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, Map<Integer, List<String>> embeddedAttachmentsMap) {
    Set<String> processedAttachments = new HashSet<>();

    for (JiraTestStep jiraTestStep : jiraTestSteps) {
        try {
            JsonObject newTestStep = new JsonObject();
            newTestStep.addProperty("TestCase", rallyTestCaseOID);
            newTestStep.addProperty("StepIndex", jiraTestStep.getIndex() + 1);  // Adjust the index to start from 1

            // Start with an empty Input field
            String inputField = "";
            String expectedResultField = "";

            // Handle embedded attachments specific to this test step
            List<String> stepEmbeddedAttachments = embeddedAttachmentsMap.get(jiraTestStep.getIndex());
            if (stepEmbeddedAttachments != null && !stepEmbeddedAttachments.isEmpty()) {
                for (String embeddedPath : stepEmbeddedAttachments) {
                    if (!processedAttachments.contains(embeddedPath)) {
                        // Extract the filename from the full path
                        String filename = embeddedPath.substring(embeddedPath.lastIndexOf("\\") + 1);
                        String[] attachmentParts = filename.split("_");

                        if (attachmentParts.length > 0) {
                            try {
                                // Extract the step number from the first part of the filename
                                int attachmentStepNumber = Integer.parseInt(attachmentParts[0]);

                                // Check if this attachment corresponds to the current step
                                if (attachmentStepNumber == jiraTestStep.getIndex() + 1) {
                                    String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, embeddedPath);
                                    String attachmentOID = extractOID(attachmentURL);
                                    if (attachmentOID != null) {
                                        // Determine whether the attachment belongs to Input or ExpectedResult
                                        if (filename.contains("testData") || filename.contains("description")) {
                                            inputField += " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>";
                                            logger.info("Attachment added to Input field for Test Step " + (jiraTestStep.getIndex() + 1) + ": " + embeddedPath);
                                        } else if (filename.contains("expectedResult")) {
                                            expectedResultField += " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>";
                                            logger.info("Attachment added to Expected Result field for Test Step " + (jiraTestStep.getIndex() + 1) + ": " + embeddedPath);
                                        } else {
                                            logger.warn("Attachment name does not contain a recognized field identifier (testData, description, expectedResult): " + embeddedPath);
                                        }
                                    }
                                    processedAttachments.add(embeddedPath);  // Mark this attachment as processed
                                }
                            } catch (NumberFormatException e) {
                                logger.error("Failed to parse step number from attachment name: " + filename, e);
                            }
                        }
                    }
                }
            }

            // Add the main content of the step (after adding attachments)
            String stepContent = cleanText(jiraTestStep.getStep());
            if (inputField.length() + stepContent.length() > 2048) {
                logger.warn("Input field length exceeds 2048 characters. Truncating to fit the allowed limit.");
                inputField += stepContent.substring(0, 2048 - inputField.length());
            } else {
                inputField += stepContent;
            }

            String expectedResultContent = cleanText(jiraTestStep.getExpectedResult());
            if (expectedResultField.length() + expectedResultContent.length() > 2048) {
                logger.warn("ExpectedResult field length exceeds 2048 characters. Truncating to fit the allowed limit.");
                expectedResultField += expectedResultContent.substring(0, 2048 - expectedResultField.length());
            } else {
                expectedResultField += expectedResultContent;
            }

            newTestStep.addProperty("Input", inputField);
            newTestStep.addProperty("ExpectedResult", expectedResultField);

            CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
            CreateResponse createResponse = rallyApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                String testStepURL = createResponse.getObject().get("_ref").getAsString();
                String testStepOID = extractOID(testStepURL);
                logger.info("Successfully created test step in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
            } else {
                String[] errors = createResponse.getErrors();
                logger.error("Failed to create test step in Rally: " + String.join(", ", errors));
            }
        } catch (IOException e) {
            logger.error("Exception occurred while creating test step in Rally", e);
        }
    }
}
