these are the logs



2024-08-13 15:01:34.050 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500125
2024-08-13 15:01:34.052 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 4_1__EmbeddedFile_description.png
2024-08-13 15:01:34.201 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500134
2024-08-13 15:01:34.202 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 1_1__EmbeddedFile_description.png
2024-08-13 15:01:34.203 [main] ERROR com.optum.coe.automation.rally.Utils - No valid argument is passed to the method. It should be either description OR testData OR expectedResult
2024-08-13 15:01:34.528 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500131
2024-08-13 15:01:34.532 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 3_1__EmbeddedFile_testData.png
2024-08-13 15:01:34.625 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500132
2024-08-13 15:01:34.627 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 3_2__EmbeddedFile_testData.png
2024-08-13 15:01:34.770 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500128
2024-08-13 15:01:34.771 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 1_1__EmbeddedFile_testData.png
2024-08-13 15:01:34.893 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500127
2024-08-13 15:01:34.897 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 1_2__EmbeddedFile_testData.png
2024-08-13 15:01:35.039 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500118
2024-08-13 15:01:35.040 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 2_1__EmbeddedFile_testData.png
2024-08-13 15:01:35.190 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500120
2024-08-13 15:01:35.191 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 2_2__EmbeddedFile_testData.png
2024-08-13 15:01:35.271 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500121
2024-08-13 15:01:35.273 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 3_1__EmbeddedFile_expectedResult.png
2024-08-13 15:01:35.365 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500119
2024-08-13 15:01:35.367 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 3_2__EmbeddedFile_expectedResult.png
2024-08-13 15:01:35.567 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500129
2024-08-13 15:01:35.570 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 1_1__EmbeddedFile_expectedResult.png
2024-08-13 15:01:35.685 [main] INFO  com.optum.coe.automation.rally.Utils - Successfully returned HttpEntity response for the URL https://jira.healthcareit.net/rest/tests/1.0/attachment/image/500130
2024-08-13 15:01:35.687 [main] INFO  com.optum.coe.automation.rally.Utils - File downloaded from Jira to testStepAttachmentLocation. File Name: 1_2__EmbeddedFile_expectedResult.png
2024-08-13 15:01:35.687 [main] INFO  com.optum.coe.automation.rally.Utils - Attachments are dowloaded successfully
2024-08-13 15:01:35.687 [main] ERROR com.optum.coe.automation.rally.RunnerClass - Error while downloading the attachements from Jira to Local while processing CC2-T5; boolean status are below
 Download testcase file attachments - false
Download teststep file attachments - true
Download testsetp embedded attachments - true


here rus utils : 
package com.optum.coe.automation.rally;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;

import org.apache.http.HttpEntity;

public class Utils {
	
	// Logger Initialization for Utils Class
	
	private static final Logger logger = LogManager.getLogger();
	
/* Create a method to establish a Jira connection.This method have two String arguments as "url" and "apiKey"
 * ClosableHttpClient class is used to perform this operation instead HttpClient, so that a separate method is not required to close the connection each time.
 * This method returns CloseableHttpClient's object instance once connection is established */
	
	public static HttpEntity getJiraResponse(String url, String apiKey) {
			
		CloseableHttpClient connection = HttpClients.createDefault();
		HttpGet request = new HttpGet(url);
		request.setHeader("Authorization", "Bearer " + apiKey);
     //   request.setHeader("Accept", "application/json");
		CloseableHttpResponse response = null;
		try {
			response = connection.execute(request);
		} catch (ClientProtocolException e) {
			logger.error("Error occurred in Jira connection while connecting " + url, e);
		} catch (IOException e) {
			logger.error("Error occurred in Jira connection while connecting " + url, e);
		}
		HttpEntity entity = response.getEntity();
		if (entity != null) {
			logger.info("Successfully returned HttpEntity response for the URL " + url);
			return entity;
		} else {

			logger.error("Error occurred. HttpEntity is null and no respone is recevied for the URL." + url);
			return null;

		}

	}

	
	/*
	 * Check if the Jira folder structure is available in Rally a. If folder
	 * structure is not available in rally, then create the same Jira folder
	 * structure in rally for the testcase b. If folder structure is available in
	 * rally, no action is required
	 */
	
	public static JsonObject createTestFolder(String[] folderHierarchy, String projectRef, String rallyBaseUrl, String rallyApiKey) {
        JsonObject lastFolder = null;
        String lastFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseUrl), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            for (int i = 0; i < folderHierarchy.length; i++) {
                String folderName = folderHierarchy[i];
                if (folderName == null || folderName.trim().isEmpty()) {
                    logger.info("Invalid folder name encountered: '" + folderName + "'");
                    continue;
                }

                // If it's the top-level folder, ensure it is created as a parent folder
                if (i == 0) {
                    // Check if the folder exists as a parent folder
                    QueryRequest parentFolderExistenceRequest = new QueryRequest("testfolder");
                    parentFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", "null")));
                    parentFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse parentQueryResponse = restApi.query(parentFolderExistenceRequest);

                    if (parentQueryResponse.wasSuccessful() && parentQueryResponse.getTotalResultCount() > 0) {
                        // Folder exists as a parent folder
                        lastFolder = parentQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Parent folder already exists: " + lastFolderRef);
                    } else {
                        // Folder does not exist as a parent folder, create it
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created parent folder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating parent folder.");
                            for (String error : createFolderResponse.getErrors()) {
                                System.out.println(error);
                            }
                            break;
                        }
                    }
                } else {
                    // For subfolders, check and create under the last folder
                    QueryRequest subFolderExistenceRequest = new QueryRequest("testfolder");
                    subFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", lastFolderRef)));
                    subFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse subQueryResponse = restApi.query(subFolderExistenceRequest);

                    if (subQueryResponse.wasSuccessful() && subQueryResponse.getTotalResultCount() > 0) {
                        // Folder exists as a subfolder
                        lastFolder = subQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Subfolder already exists: " + lastFolderRef);
                    } else {
                        // Folder does not exist, create it as a subfolder
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);
                        newFolder.addProperty("Parent", lastFolderRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created subfolder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating subfolder");
                            for (String error : createFolderResponse.getErrors()) {
                                System.out.println(error);
                            }
                            break;
                        }
                    }
                }
            }

            return lastFolder;

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

	// Implementation to update the TestCase Migrated in Jira to "true". User story US7382197

		public void updateTestCaseMigratedStatusinJira(boolean status) {

		}

		/*
		 * Implementation to get the GetAttachment URL and its Name This method will
		 * accept the Jira JSON response of a testcase key and store the attachment
		 * url:attachment filename in a Map The Map is <String,String> Generic
		 */

		public static Map<String, String> pharseJsonGetAttachmentUrlAndName(String jsonResponse) {

			Map<String, String> attachmentMap = new HashMap<String, String>(); // Initialize the Map object to store the
																				// Attachment URL and its Name
			JSONArray jArrayResponse = new JSONArray(jsonResponse); // Load the Jira Json response to JsonArray
			for (int i = 0; i < jArrayResponse.length(); i++) { // Loop through the Json Array and get the attachment URL
																// and its name. And then, put them into the Map
				JSONObject jsonObject = jArrayResponse.getJSONObject(i);
				String url = jsonObject.getString("url");
				String name = jsonObject.getString("filename");
				attachmentMap.put(url, name);

			}
			return attachmentMap;
		}

		/* Implementation to download the file attachments from testcase.
		 * Map<String, String> is one of the arguments which has attachment URL and atatchment name.
		 * Download location, Jira API key and testcase key are remaining parameters.
		 * Each attachment URL will be used to GET call on Jira to download the attachments
		 * This method will return downloaded location along with file name */

		public static List<String> downloadFileAttachmentFromJiraTestCase(Map<String, String> attachmentMap,
				String tcAttachmentDownloadLocation, String jiraApiKey, String testcaseKey) throws IOException {
			
			List<String> filePaths = new ArrayList<String>(); // List to save attachment files path
			createFolderIfNotExists(tcAttachmentDownloadLocation); // Create directories where attachments should be downloaded
			for (Map.Entry<String, String> entry : attachmentMap.entrySet()) { // Loop through each map and get the URL and File Name for further processing
				String fileUrl = entry.getKey();
				String fileName = entry.getValue();
				HttpEntity response = Utils.getJiraResponse(fileUrl, jiraApiKey); // GET call for the attachment URL
				if (response != null) {
					try (InputStream in = response.getContent()) {
						try {
							Files.copy(in, Paths.get(tcAttachmentDownloadLocation + "/" + fileName)); // Copy attachment to local 
							filePaths.add(tcAttachmentDownloadLocation + "/" + fileName); // Add the location to the list for further processing
							EntityUtils.consume(response);
						} catch (IOException e) {
						    // Log error message for failures and return with error values
							logger.error("Failed to download the file attachments from Jira Testcase level for the testcase " + testcaseKey, e);
							filePaths.clear();
							filePaths.add("error");
							return filePaths;  // return error string
						}
						logger.info("File downloaded is from Jira testcase level to " + tcAttachmentDownloadLocation + " for the testcase " + testcaseKey + " ; File Name:" + fileName);
					} catch (UnsupportedOperationException | IOException e1) {
						 // Log error message for failures and return with error values
						logger.error("Failed to download the file attachment " + fileName + " from Jira Testcase level for the testcase " + testcaseKey,
								e1);
						filePaths.clear();
						filePaths.add("error");
						return filePaths; // return error string
					}
				} else {
					 // Log error message for failures and return with error values
					logger.error("Failed to download the file attachment " + fileName
							+ " from Jira Testcase level for the testcase " + testcaseKey + ". No Entity response found");
					filePaths.clear();
					filePaths.add("error");
					return filePaths;  // return error string

				}

			}
			return filePaths;  // return file paths

		}

		
		// A Method to download file attachments from test step
		

	    public static List<String> downloadFileAttachmentFromTestStep(String jsonResponse, String apiToken,
	            String testStepFileAttachmentLocationToBeSaved, String tC_Id, String baseURL) throws IOException {
	        List<String> filePaths = new ArrayList<>();
	        JSONObject jsonObject = new JSONObject(jsonResponse);
	        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
	        Path path = Paths.get(testStepFileAttachmentLocationToBeSaved);
	        if (!Files.exists(path)) {
	            try {
	                Files.createDirectories(path);
	            } catch (IOException e) {
	                logger.error("Failed to create directories for test step attachment download location.", e);
	            }
	        }

	        for (int i = 0; i < stepsArray.length(); i++) {
	            JSONObject stepObject = stepsArray.getJSONObject(i);
	            int index = stepObject.getInt("index");
	            int stepNumber = index + 1;
	            if (stepObject.has("attachments")) {
	                JSONArray attachmentsArray = stepObject.getJSONArray("attachments");
	                for (int j = 0; j < attachmentsArray.length(); j++) {
	                    JSONObject attachmentObject = attachmentsArray.getJSONObject(j);
	                    int attachmentID = attachmentObject.getInt("id");
	                    int attachmentNumber = j + 1;
	                    String attachmentFileName = attachmentObject.getString("name");
	                    String testStepAttachmentUrl = baseURL + "/rest/tests/1.0/attachment/" + attachmentID;
	                    HttpEntity response = Utils.getJiraResponse(testStepAttachmentUrl, apiToken);
	                    if (response != null) {
	                        try (InputStream in = response.getContent()) {
	                            Path filePath = Paths.get(testStepFileAttachmentLocationToBeSaved + "/" + stepNumber + "_" + attachmentNumber + "_" + attachmentFileName);
	                            Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);  // Overwrite if file exists
	                            filePaths.add(filePath.toString());
	                            EntityUtils.consume(response);
	                            logger.info("File downloaded from Jira to testStepFileAttachmentLocation. File Name: " + attachmentFileName);
	                        } catch (IOException e) {
	                            logger.error("Failed to download the file attachments from Jira for Testcase level", e);
	                        }
	                    } else {
	                        logger.error("Failed to download the file attachment " + attachmentFileName
	                                + " from Jira for Testcase level. No Entity response found");
	                    }
	                }
	            }
	        }
	        return filePaths;
	    }  // return downloaded file paths
		
		
	/* A Method to download embedded attachments from test step 
	 * One of the String argument is called "columnName" which determines where the embedded attachments will be downloaded from.
	 * The valid values for "columnType" either ""description" or "testData" or "expectedResult".
	 * */

	    public static List<String> downloadTestStepEmbeddedAttachments(String jsonResponse, String apiToken,
	            String testStepAttachmentLocationToBeSaved, String tC_Id, String baseURL, String columnName)
	            throws IOException {
	        List<String> filePaths = new ArrayList<>();
	        JSONObject jsonObject = new JSONObject(jsonResponse);
	        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
	        Path path = Paths.get(testStepAttachmentLocationToBeSaved);
	        if (!Files.exists(path)) {
	            try {
	                Files.createDirectories(path);
	            } catch (IOException e) {
	                logger.error("Failed to create directories for embedded attachment download location.", e);
	            }
	        }

	        for (int i = 0; i < stepsArray.length(); i++) {
	            JSONObject stepObject = stepsArray.getJSONObject(i);
	            int index = stepObject.getInt("index");
	            int stepNumber = index + 1;
	            if (stepObject.has(columnName)) {
	                String htmlContent = stepObject.getString(columnName);
	                Document doc = Jsoup.parse(htmlContent);
	                Elements imgElements = doc.select("img");
	                if (!imgElements.isEmpty()) {
	                    int imageCount = 0;
	                    for (Element img : imgElements) {
	                        String imageUrl = img.attr("src");
	                        if (!imageUrl.isEmpty()) {
	                            imageCount++;
	                            String extractUrl = imageUrl.substring(2);
	                            String absoluteUrl = baseURL + extractUrl;
	                            HttpEntity response = Utils.getJiraResponse(absoluteUrl, apiToken);
	                            if (response != null) {
	                                try (InputStream in = response.getContent()) {
	                                    Path filePath = Paths.get(testStepAttachmentLocationToBeSaved + "/" + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + ".png");
	                                    Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);  // Overwrite if file exists
	                                    filePaths.add(filePath.toString());
	                                    EntityUtils.consume(response);
	                                    logger.info("File downloaded from Jira to testStepAttachmentLocation. File Name: " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + ".png");
	                                } catch (IOException e) {
	                                    logger.error("Failed to download the file attachment " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + " from Jira for test step level", e);
	                                }
	                            } else {
	                                logger.error("Failed to download the file attachment " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + " from Jira for test step level. No Entity response found");
	                            }
	                        }
	                    }
	                }
	            } else {
	                logger.error("No valid argument is passed to the method. It should be either description OR testData OR expectedResult");
	            }
	        }
	        return filePaths;
	    } // return downloaded files paths

		

		// Method to create folder if not exists

		public static void createFolderIfNotExists(String tcAttachmentDownloadLocation) {

			Path path = Paths.get(tcAttachmentDownloadLocation);
			if (!Files.exists(path)) {
				try {
					Files.createDirectories(path);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		// Method to delete File Attachments from local if exists

		public static void deleteAttachmentFileFromLocal(List<String> filePaths) {

			for (String filePath : filePaths) {

				File file = new File(filePath);
				if (file.exists()) {
					file.delete();
					logger.info("The file " + filePath + " is deleted for next attachment download run.");

				}

			}

		}

	// When Attachments are available, A Method to check if attachments are downloaded without error
		public static boolean areAttachmentsDownloadedFromJira(List<String> fileAttachmentDownloadPaths) {
			
			boolean status = false;
			if ((fileAttachmentDownloadPaths != null) && (!fileAttachmentDownloadPaths.contains("error"))) {
				logger.info("Attachments are dowloaded successfully");
				status = true;
			} else if (fileAttachmentDownloadPaths.contains("error")) {
				logger.error("Error while downloading attachments");
			} else if ((fileAttachmentDownloadPaths == null) || (fileAttachmentDownloadPaths.isEmpty())) {
				logger.error("No attachments available to download");
				status = true;
			}

			return status;
			
			
		}


}

	
	here is runner 
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;

public class RunnerClass {

	// Logger Initialization for Runner Class
	private static final Logger logger = LogManager.getLogger();

	// Main method
	public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
		
	    /* Main method calls below functionalities from com.optum.coe.automation.rally package
	     * 1. Get Jira non migrated testcase keys 
	     * 2. Get Jira Testcase details for the given testcase key. It is an iterative process
	     * 3. Create the testcase in Rally using the Jira testcase details
	     * 4. Validate if the testcase is created successfully ; Future implementation is required. US7440061*/
		Gson gson = new Gson();	
		
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

		JiraTestCase jiraTestCase = new JiraTestCase();
		JiraOperation jiraOperation = new JiraOperation();
		ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();
		for (int i = 0 ; i < testcaseKeys.size() ; i++) {
			boolean rallyTestcaseCreationStatus = false;
			boolean rallyOverallTestCaseAttachmentsStatus = false;
			boolean jiraDownloadTCFileAttachmentStatus = false;
			boolean jiraDownloadTSFileAttachmentStatus = false;
			boolean jiraDownloadTSEmbeddedAttachmentStatus = false;
			boolean jiraOverallAttachmentdownloadStatus = false;
			String rallyTestcaseOID = null;
			jiraTestCase.setKey(testcaseKeys.get(i));
			logger.info("Processing " + jiraTestCase.getKey());
			JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
			RallyOperation rallyOperation = new RallyOperation();
			// Start the downloading processing of attachments from Jira to Local and Verify them
						List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
						jiraDownloadTCFileAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(fileAttachmentDownloadPathsTestcaseLevel); // This call will return "error" string during failure OR "true" boolean when no attachments are found OR "true" boolean when attachments are downloaded successfully OR "false" for any cases
						List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
						jiraDownloadTSFileAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(fileAttachmentDownloadPathsTestStepLevel); // This call will return "error" string during failure OR "true" boolean when no attachments are found OR "true" boolean when attachments are downloaded successfully OR "false" for any cases
						List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");
						jiraDownloadTSEmbeddedAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(embeddedAttachmentDownloadPathsTestStepLevel); // This call will return "error" string during failure OR "true" boolean when no attachments are found OR "true" boolean when attachments are downloaded successfully OR "false" for any cases
						
						if ((jiraDownloadTCFileAttachmentStatus) && (jiraDownloadTSFileAttachmentStatus) && (jiraDownloadTSEmbeddedAttachmentStatus)) {
							jiraOverallAttachmentdownloadStatus = true; // This boolean value is used for over all validation	to mark "Testcase Migrated" check box in Jira
							rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

						
						} else {
							
							logger.error("Error while downloading the attachements from Jira to Local while processing " + jiraTestCase.getKey() + "; boolean status are below\n Download testcase file attachments - " + jiraDownloadTCFileAttachmentStatus
									+ "\nDownload teststep file attachments - " + jiraDownloadTSFileAttachmentStatus
									+ "\nDownload testsetp embedded attachments - " + jiraDownloadTSEmbeddedAttachmentStatus);
							return;
							
						}

						// Check whether rally testcase is created successfully with available boolean values. The rallyTestcaseCreationStatus will be true for successful rally test case creation
						if (rallyTestcaseOID != null ) {
							rallyTestcaseCreationStatus = true; // This boolean value is used for over all validation	to mark "Testcase Migrated" check box in Jira
							System.out.println("Rally testcase is successfully created with Jira equivalent testcase for the Jira testcase key " + jiraTestCase.getKey() );
							logger.info("Rally testcase is successfully created with Jira equivalent testcase for the Jira testcase key " + jiraTestCase.getKey());
						} else { // If testcase is not created in Rally, then log the error and break the flow.
							logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
							return;	
						}
									
						/* If attachments are downloaded are successfully to Local, then advance to upload them to the corresponding testcase.
						 * Call attachFilesToRallyTestcase method for this action and return testcase attachment OID for further processing. If any attachment is not uploaded to the testcase, then it will return empty list
						 * Once the the file attachments are successfully upload to rally testcase, then delete the attachments from local.
						 * */
						if ((fileAttachmentDownloadPathsTestcaseLevel != null) && (!fileAttachmentDownloadPathsTestcaseLevel.contains("error"))) {
							
							logger.info("Attachment paths are found in the list for testcase file attachments.");
							List<String> testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
							Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
							
							if (!testcaseAttachmentOIDs.isEmpty()) { // Check if testcase OID is created successfully 
								
								logger.info("Test atatchment OID is created successfully in Rally for the testcase "  + jiraTestCase.getKey());
								rallyOverallTestCaseAttachmentsStatus = true; // This boolean value is used for over all validation	to mark "Testcase Migrated" check box in Jira
							} else { // Throw error when test case is not created successfully in rally and break the flow.
								
								logger.error("The Jira testcase is not created in rally. Jira Testcase key is " + jiraTestCase.getKey()
								+ " is not created in rally");
								return;
							}
							/* If fileAttachmentDownloadPathsTestcaseLevel is empty then, no attachment URL is found 
							 * for the testcase key at testcase level*/	
						} else if (fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) { 
							
							logger.info("No Attachment URL found for Testcase level while processing the testcase " + jiraTestCase.getKey());
						} 

						// Test Step creation and Test Step Attachments implementation place holder.
						//
						//
						   // Handle Test Step Attachments
			 
			            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
			            List<JiraTestStep> testSteps = new ArrayList<>();

			            for (JsonElement element : stepsArray) {
			                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
			                testSteps.add(step);
			            }

			            rallyOperation.migrateTestStepsWithAttachments(rallyTestcaseOID, testSteps, rallyRestApi, fileAttachmentDownloadPathsTestStepLevel, embeddedAttachmentDownloadPathsTestStepLevel);

			            Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
			            Utils.deleteAttachmentFileFromLocal(embeddedAttachmentDownloadPathsTestStepLevel);
						
					
						/* Over all validation for Jira Testcase migration to Rally. US7440061: Create implementation for ValidateRallyTestcaseContent */
						if (jiraOverallAttachmentdownloadStatus == true && rallyTestcaseCreationStatus == true && rallyOverallTestCaseAttachmentsStatus == true  ) {
							
								System.out.println("OverAll Status: Rally Testcase is created successfully with required testcase level attachments");
								/*
								 * Needs to be added calling method to check "Testcase Migrated" and "Test Folder Migrated" the check box in Jira
								 */
						} 


						
					}

				}

}

	

