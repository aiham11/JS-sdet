Certainly! Below are the full classes for both `RallyOperation` and `RunnerClass` incorporating the changes you've requested.

### Full `RallyOperation` Class

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

    // Initialization of the class member variables.
    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    // Logger Initialization for RallyOperation Class
    private static final Logger logger = LogManager.getLogger();

    // Constructor loads the value from .properties file
    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
    }

    // Method to create TestcaseStep with attachments
    public String createTestcaseStepWithAttachment(RallyRestApi rallyApi, String rallyTestcaseOID, JiraTestStep step, String attachmentOID) throws IOException {
        JsonObject testcaseStep = new JsonObject();
        testcaseStep.addProperty("TestCase", "testcase/" + rallyTestcaseOID);
        testcaseStep.addProperty("StepIndex", step.getIndex());
        testcaseStep.addProperty("Input", step.getDescription());
        testcaseStep.addProperty("ExpectedResult", "This is the expected result with screen shot <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");

        CreateRequest createRequest = new CreateRequest("TestcaseStep", testcaseStep);
        CreateResponse createResponse = rallyApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            String stepOID = createResponse.getObject().get("_ref").getAsString();
            logger.info("Successfully created TestcaseStep with OID: " + stepOID);
            return stepOID;
        } else {
            logger.error("Error occurred while creating TestcaseStep: " + createResponse.getErrors());
            return null;
        }
    }

    // Method to create attachment content
    public String createAttachmentContent(RallyRestApi rallyApi, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);

        CreateRequest createRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse createResponse = rallyApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            String attachmentContentOID = createResponse.getObject().get("_ref").getAsString();
            logger.info("Successfully created AttachmentContent with OID: " + attachmentContentOID);
            return attachmentContentOID;
        } else {
            logger.error("Error occurred while creating AttachmentContent: " + createResponse.getErrors());
            return null;
        }
    }

    // Additional methods (e.g., createRallyTestcase) can be included here as needed.
}
```

### Full `RunnerClass`

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;

public class RunnerClass {

    // Logger Initialization for Runner Class
    private static final Logger logger = LogManager.getLogger();

    // Main method
    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

        for (String key : testcaseKeys) {
            boolean rallyTestcaseCreationStatus = false;
            boolean rallyOverallTestStepAttachmentsStatus = false;
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

            if (rallyTestcaseOID != null) {
                rallyTestcaseCreationStatus = true;
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                break;
            }

            List<String> testcaseAttachmentOIDs = new ArrayList<>();

            if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                logger.info("Attachment paths are found in the list.");
                testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
                if (!testcaseAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                } else {
                    logger.error("The Jira testcase is not created in Rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in Rally.");
                    return;
                }
            } else {
                logger.info("No Attachment path found for Testcase level.");
            }

            // Handle Test Step File Attachments
            if (fileAttachmentDownloadPathsTestStepLevel != null && !fileAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step file attachments paths are found in the list.");
                List<String> testStepAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
                if (!testStepAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                    testcaseAttachmentOIDs.addAll(testStepAttachmentOIDs);
                } else {
                    logger.error("The Jira test step file attachments are not created in Rally for Testcase key " + jiraTestCase.getKey());
                    return;
                }
            } else {
                logger.info("No Attachment path found for Test Step file level.");
            }

            // Handle Test Step Embedded Attachments
            if (embeddedAttachmentDownloadPathsTestStepLevel != null && !embeddedAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step embedded attachments paths are found in the list.");
                List<String> embeddedAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, embeddedAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(embeddedAttachmentDownloadPathsTestStepLevel);
                if (!embeddedAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                    testcaseAttachmentOIDs.addAll(embeddedAttachmentOIDs);
                } else {
                    logger.error("The Jira test step embedded attachments are not created in Rally for Testcase key " + jiraTestCase.getKey());
                    return;
                }
            } else {
                logger.info("No Attachment path found for Test Step embedded level.");
            }

            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();

            for (JsonElement element : stepsArray) {
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);
            }

            // Handle Test Step creation with attachments
            for (JiraTestStep step : testSteps) {
                for (String filePath : step.getAttachments()) {
                    String attachmentContentOID = rallyOperation.createAttachmentContent(rallyRestApi, filePath);
                    if (attachmentContentOID != null) {
                        String stepOID = rallyOperation.createTestcaseStepWithAttachment(rallyRestApi, rallyTestcaseOID, step, attachmentContentOID);
                        if (stepOID == null) {
                            logger.error("Failed to create TestcaseStep for step index " + step.getIndex

());
                        }
                    } else {
                        logger.error("Failed to create attachment content for step index " + step.getIndex());
                    }
                }
            }

            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                System.out.println("Rally Testcase Creation Status is true");
            } else {
                logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
            }

            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                // Call method to update "Testcase Migrated" and "Test Folder Migrated" checkboxes in Jira
            }
        }
    }
}
```











for (JiraTestStep step : testSteps) {
    for (JiraAttachment attachment : step.getAttachments()) {
        String filePath = attachment.getUrl(); // Assuming `getUrl()` returns the path to the file
        String attachmentContentOID = rallyOperation.createAttachmentContent(rallyRestApi, filePath);
        if (attachmentContentOID != null) {
            String stepOID = rallyOperation.createTestcaseStepWithAttachment(rallyRestApi, rallyTestcaseOID, step, attachmentContentOID);
            if (stepOID == null) {
                logger.error("Failed to create TestcaseStep for step index " + step.getIndex());
            }
        } else {
            logger.error("Failed to create attachment content for step index " + step.getIndex());
        }
    }
}


### Summary of Changes:
1. **RallyOperation Class**: Added methods `createTestcaseStepWithAttachment` and `createAttachmentContent` to handle the creation of `TestcaseStep` and uploading attachments.
   
2. **RunnerClass**: Updated the loop to create attachments and link them to `TestcaseStep` using the newly added methods in `RallyOperation`.

These changes will allow your framework to process the attachments as you found in Postman, creating the correct `TestcaseStep` with embedded images.
