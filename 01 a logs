i have a problem here rallyOperation.migrateTestSteps(rallyTestcaseOID, testSteps, rallyRestApi) missmatch with RallyOperation class
The method migrateTestSteps(String, List<JiraTestStep>, RallyRestApi) is undefined for the type RallyOperation
this is my runner class:


package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class RunnerClass {

    // Logger Initialization for Runner Class
    private static final Logger logger = LogManager.getLogger();

    // Main method
    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
    	Gson gson = new Gson();
    	String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
		String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
    	RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);
        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();
        for (String key : testcaseKeys) {
            boolean rallyTestcaseCreationStatus = false;
            boolean rallyOverallTestStepAttachmentsStatus = false;
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");

            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

            if (rallyTestcaseOID != null) {
                rallyTestcaseCreationStatus = true;
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                break;
            }

            if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                logger.info("Attachment paths are found in the list.");
                List<String> testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
                if (!testcaseAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                } else {
                    logger.error("The Jira testcase is not created in Rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in Rally.");
                    return;
                }
            } else {
                logger.info("No Attachment path found for Testcase level.");
            }

            // Handle Test Step File Attachments
            if (fileAttachmentDownloadPathsTestStepLevel != null && !fileAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step file attachments paths are found in the list.");
                List<String> testStepAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
                if (!testStepAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                } else {
                    logger.error("The Jira test step file attachments are not created in Rally for Testcase key " + jiraTestCase.getKey());
                    return;
                }
            } else {
                logger.info("No Attachment path found for Test Step file level.");
            }

            // Handle Test Step Embedded Attachments
            if (embeddedAttachmentDownloadPathsTestStepLevel != null && !embeddedAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step embedded attachments paths are found in the list.");
                List<String> embeddedAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, embeddedAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(embeddedAttachmentDownloadPathsTestStepLevel);
                if (!embeddedAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                } else {
                    logger.error("The Jira test step embedded attachments are not created in Rally for Testcase key " + jiraTestCase.getKey());
                    return;
                }
            } else {
                logger.info("No Attachment path found for Test Step embedded level.");
            }
        	JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
			List<JiraTestStep> testSteps = new ArrayList<>();

			for (JsonElement element : stepsArray) {
				JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
				testSteps.add(step);
			}

			rallyOperation.migrateTestSteps(rallyTestcaseOID, testSteps, rallyRestApi);

			if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
				System.out.println("Rally Testcase Creation Status is true");
			} else {
				logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
			}
		
            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                // Call method to update "Testcase Migrated" and "Test Folder Migrated" check boxes in Jira
            }
            
            
        }
     }
    
}

this is my RallyOperation class :
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;
import java.util.Collections;

public class RallyOperation {

	// Initialization of the class member variables. This section can be updated in future if more member variables are added during integration if needed. 
	private String rallyBaseURL;
	private String rallyApiKey;
	private String rallyProjectKey;
	private String rallyUser;

	// Logger Initialization for RallyOperation Class
	private static final Logger logger = LogManager.getLogger();
	
	/* A Constructor loads the value from .properties file. These value will be loaded as soon as a object is created for this class.
	 * Rally Base URL, Rally API Key, Rally Project Reference, Rally user are loaded from .properties file */
	
public RallyOperation() {
	
		rallyBaseURL=ConfigLoader.getConfigValue("RALLY_BASE_URL");
		rallyApiKey=ConfigLoader.getConfigValue("RALLY_API_KEY");
		rallyProjectKey=ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
		rallyUser=ConfigLoader.getConfigValue("RALLY_USER_REF");
		logger.info("Rally values for the project key " + rallyProjectKey +" are assiged from rally_migration_config.properties file");
		logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);

	}
	
	
	/* A method which handles below major functionalities
	 * 1. Transform the Jira Testcase details to Rally Test variable
	 * 2. Check if the Jira folder structure is available in Rally
	 *      a. If folder structure is not available in rally, then create the same Jira folder structure in rally for the testcase 
	 *      b. If folder structure is available in rally, no action is required 
	 * 3. Create the testcase
	 * 4. Log the testcase OID to the log file; This OID will be used while integrating TestStep, Attachments implementation for the testcase
	 * 5. Returns a boolean value as true for a successful testcase creation in rally, else returns false */
	
	
	public String createRallyTestcase(JsonObject jiraJson)  {
		
		//boolean status = false;
		String rallyTestCaseOID = null;
		// Create JSON object for rally Json and add rally project reference key
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);
        
        // Create JSON object for testcase Json to add the rally testcase property
        JsonObject testCase = new JsonObject();
       
        // Get testcase name from Jira Json body and add it to rally testcase as a property
        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira"); // Give a default value if no name is found in Jira Json body
        }

        // Add method as Manual to rally testcase as a property
        testCase.addProperty("Method", "Manual");

        // Add priority value from Jira Json body to rally testcase as a property
        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", priority);
            }
        } else {
            testCase.addProperty("Priority", "Default Priority"); // Add default value
        }

        // Add owner from config file to the rally testcase as a property
        testCase.addProperty("Owner", "/user/" + rallyUser);

        // Add status from Jira Json and add to the rally testcase as a property 
        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false); // default value
        }

        // Add tags - Need implementation as discussed in code review meeting
        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        // Get folder hierarchy from JIRA response
        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");

        // Call a Util method to create test folder based on folder hierarchy
        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey , rallyBaseURL, rallyApiKey);
        if (testFolder == null) {
        	
        	logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return rallyTestCaseOID;// Exit the method or handle accordingly
        } else logger.info("Folder " + folderPath + " is  created successfully in Rally");
        
        // Add TestFolder to the test case
        rallyJson.add("TestFolder", testFolder);

        // Add the testCase object to the rallyJson
        rallyJson.add("testCase", testCase);

        // Save the transformed JSON to a variable
        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        //System.out.println("Transformed JSON: " + rallyJsonString);

        // Initialize Rally API
        RallyRestApi restApi = null;
		try {
			restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
		} catch (URISyntaxException e) {
			logger.error("URI Sytntax error for the URL " + rallyBaseURL + ". Please check the URL." , e);
		}
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        // Extract values from JSON:
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            // Create a new test case
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            // Add Tags to the test case from the JSON file
            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            // Add TestFolder to the test case from the JSON file
            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = null;
			try {
				createResponse = restApi.create(createRequest);
			} catch (IOException e) {
				logger.error("IO exception during create request." , e);
			}

            if (createResponse.wasSuccessful()) {
            	//status = true;
            	rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
            	logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());
             	
            } else {
            	logger.error("Error occurred creating test case");	
                for (String error : createResponse.getErrors()) {
                	logger.error(error);
                }
            }
            
            
        } finally {
            // Release resources
            try {
				restApi.close();
				logger.info("Closed rest api resource in finally block");
			} catch (IOException e) {
				logger.error("Error occurred while closing rest api resource at finally block" , e);
			}
            
        }
         return rallyTestCaseOID;
        
    }

    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID , List<String> filePaths) {
      	
    	List<String> testcaseAttachmentOIDs = new ArrayList<String>();
    	RallyRestApi rallyApi = null;
		try {
			rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
		} catch (URISyntaxException e) {
			logger.error("Rally Base URL has some syntax error.",e );
		
		}
        try {
           // TC4394121
     	   //String testCaseId = "795191573159"; 
           // List<String> filePaths = List.of(ATTACHMENT_ROOT_PATH + "/2_1_pom.xml", ATTACHMENT_ROOT_PATH + "/RallyMigrationAttachmentTest.txt", ATTACHMENT_ROOT_PATH + "/Gif Format.GIF", ATTACHMENT_ROOT_PATH + "/output.png" , ATTACHMENT_ROOT_PATH + "/Test_A_Zip_File.zip" , ATTACHMENT_ROOT_PATH + "/Test_DOC_Format.doc" , ATTACHMENT_ROOT_PATH + "/Test_DOCX_Format.docx" , ATTACHMENT_ROOT_PATH + "/Test_JPG_Format.JPG" , ATTACHMENT_ROOT_PATH + "/Test_XLS_Format.xls" , ATTACHMENT_ROOT_PATH + "/Test_XLSX_Format.xlsx"); 
            for (String filePath : filePaths) {
                try {
					testcaseAttachmentOIDs.add(attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath));
					logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
				} catch (IOException e) {
					testcaseAttachmentOIDs.clear();
					logger.error("File " + filePath + " is not attached to Rally due to IO exception.",e );
					return testcaseAttachmentOIDs;
				}
            }
        } finally {
            try {
				rallyApi.close();
			} catch (IOException e) {
				logger.error("Ready API resource is not closed due to IO exception.",e );
				
			}
        }
    	return testcaseAttachmentOIDs;
        
    }
	
 	public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
	       // Step 1: Read the file and encode it in Base64
	    
 		byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
	       String encodedContent = Base64.getEncoder().encodeToString(fileContent);
	       
	       String ContentType = null;
	       String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();
	       
	       if (attachmentType == "png" ) {
	    	   
	    	   ContentType = "image/png";
	    	   
	       } else if (attachmentType == "txt" ) {
	    	   
	    	   ContentType = "text/plain";
	    	   
	       } else if (attachmentType == "jpeg" || attachmentType == "jpg" )   {
	    	   
	    	   ContentType = "image/jpeg";
	    	   
	       } else if (attachmentType == "xml")   {
	    	   
	    	   ContentType = "application/xml";
	    	   
	       } else if (attachmentType == "gif")   {
	    	   
	    	   ContentType = "image/gif";
	    	   
	       } else if (attachmentType == "doc")   {
	    	   
	    	   ContentType = "application/msword";
	    	   
	       } else if (attachmentType == "docx")   {
	    	   
	    	   ContentType = "application/vnd.openxmlformats-officedocument.wordprocess-ingml.document";
	    	   
	       }  else if (attachmentType == "xls")   {
	    	   
	    	   ContentType = "application/vnd.ms-excel";
	    	   
	       } else if (attachmentType == "xlsx")   {
	    	   
	    	   ContentType = "application/vnd.openxmlformats-officedocument.spread-sheetml.sheet";
	    	   
	       } else if (attachmentType == "zip")   {
	    	   
	    	   ContentType = "application/zip";
	    	   
	       }
	       
	       // Step 2: Create the AttachmentContent
	       JsonObject attachmentContent = new JsonObject();
	       attachmentContent.addProperty("Content", encodedContent);
	       CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
	       CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
	       if (!attachmentContentResponse.wasSuccessful()) {
	           logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
	           return null;
	       }
	       String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();
	       // Step 3: Create the Attachment
	       
	       JsonObject attachment = new JsonObject();
	       attachment.addProperty("Artifact", "/testcase/" + testCaseId); // Reference to the test case
	       attachment.addProperty("Content", attachmentContentRef);
	       attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
	       attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
	       attachment.addProperty("ContentType", ContentType);
	       attachment.addProperty("Size", fileContent.length);
	       CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
	       CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
	       if (attachmentResponse.wasSuccessful()) {
	    	   
	    	   logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
	    	   return attachmentResponse.getObject().get("_ref").getAsString();
	       } else {
	    	   logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
	    	   return null;
	       }
	   }
	     
 	
	// Method to migrate test steps from JIRA to Rally
	public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi) {
		Collections.reverse(jiraTestSteps);

		for (JiraTestStep step : jiraTestSteps) {
			try {
				JsonObject newTestStep = new JsonObject();
				newTestStep.addProperty("TestCase", rallyTestCaseRef);
				newTestStep.addProperty("StepIndex", step.getIndex());
				newTestStep.addProperty("Input", step.getDescription());
				newTestStep.addProperty("ExpectedResult", step.getExpectedResult());
				newTestStep.addProperty("TestData", step.getTestData());

				CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
				CreateResponse createResponse = rallyRestApi.create(createRequest);

				if (createResponse.wasSuccessful()) {
					logger.info("Successfully created test step: " + step.getDescription());
				} else {
					logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
				}
			} catch (Exception e) {
				logger.error("Exception while creating test step: " + step.getDescription(), e);
			}
		}
	}
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
	
}

	
	
	
	
	
	
	



