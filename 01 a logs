Here is the full updated `RallyOperation.java` class with the inclusion of the `migrateTestSteps` method and other necessary methods for handling test steps and attachments:

```java
package com.optum.coe.automation.rally;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.List;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONObject;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

    // Initialization of the class member variables. This section can be updated in future if more member variables are added during integration if needed.
    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    // Logger Initialization for RallyOperation Class
    private static final Logger logger = LogManager.getLogger();

    /* A Constructor loads the value from .properties file. These value will be loaded as soon as a object is created for this class.
     * Rally Base URL, Rally API Key, Rally Project Reference, Rally user are loaded from .properties file */

    public RallyOperation() {

        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);

    }

    /* A method which handles below major functionalities
     * 1. Transform the Jira Testcase details to Rally Test variable
     * 2. Check if the Jira folder structure is available in Rally
     *      a. If folder structure is not available in rally, then create the same Jira folder structure in rally for the testcase
     *      b. If folder structure is available in rally, no action is required
     * 3. Create the testcase
     * 4. Log the testcase OID to the log file; This OID will be used while integrating TestStep, Attachments implementation for the testcase
     * 5. Returns a boolean value as true for a successful testcase creation in rally, else returns false */

    public String createRallyTestcase(JSONObject jiraJson) throws IOException {

        String rallyTestCaseOID = null;

        // Create JSON object for rally Json and add rally project reference key
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        // Create JSON object for testcase Json to add the rally testcase property
        JsonObject testCase = new JsonObject();

        // Get testcase name from Jira Json body and add it to rally testcase as a property
        String name = jiraJson.optString("name", "Default Test Case Name - No TestCase name found in Jira");
        testCase.addProperty("Name", name);

        // Add method as Manual to rally testcase as a property
        testCase.addProperty("Method", "Manual");

        // Add priority value from Jira Json body to rally testcase as a property
        String priority = jiraJson.optString("priority", "Default Priority");
        if (priority.equalsIgnoreCase("Normal")) {
            testCase.addProperty("Priority", "Useful");
        } else {
            testCase.addProperty("Priority", priority);
        }

        // Add owner from config file to the rally testcase as a property
        testCase.addProperty("Owner", "/user/" + rallyUser);

        // Add status from Jira Json and add to the rally testcase as a property
        String status = jiraJson.optString("status", "false");
        testCase.addProperty("Ready", status.equals("Ready"));

        // Add tags - Need implementation as discussed in code review meeting
        // Convert Jira labels to Rally tags if labels are present
        
        JsonArray tagsArray = new JsonArray();
        if (jiraJson.has("labels")) {
            JsonArray labelsArray = new JsonArray();
            RallyRestApi restApi = null;
            try {
                restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
                for (JsonElement labelElement : labelsArray) {
                    String label = labelElement.getAsString();
                    JsonObject tag = Utils.findOrCreateTag(restApi, label);
                    if (tag != null) {
                        tagsArray.add(tag);
                    }
                }
            } catch (URISyntaxException e) {
                logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
            }
            testCase.add("Tags", tagsArray);
        }

        // Get folder hierarchy from JIRA response
        String folderPath = jiraJson.getString("folder");
        String[] folderHierarchy = folderPath.split("/");

        // Call a Util method to create test folder based on folder hierarchy
        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
        if (testFolder == null) {
            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return rallyTestCaseOID; // Exit the method or handle accordingly
        } else logger.info("Folder " + folderPath + " is created successfully in Rally");

        // Add TestFolder to the test case
        rallyJson.add("TestFolder", testFolder);

        // Add the testCase object to the rallyJson
        rallyJson.add("testCase", testCase);

        // Save the transformed JSON to a variable
        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        // Initialize Rally API
        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        // Extract values from JSON:
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            // Create a new test case
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            // Add Tags to the test case from the JSON file
            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            // Add TestFolder to the test case from the JSON file
            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = null;
            try {
                createResponse = restApi.create(createRequest);
            } catch (IOException e) {
                logger.error("IO exception during create request.", e);
            }

            if (createResponse.wasSuccessful()) {
                rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());

            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }

        } finally {
            // Release resources
            try {
                restApi.close();
                logger.info("Closed rest api resource in finally block");
            } catch (IOException e) {
                logger.error("Error occurred while closing rest api resource at finally block", e);
            }
        }
        return rallyTestCaseOID;
    }

    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID

, List<String> filePaths) {
        List<String> testcaseAttachmentOIDs = new ArrayList<String>();
        RallyRestApi rallyApi = null;
        try {
            rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.", e);
        }
        try {
            for (String filePath : filePaths) {
                try {
                    testcaseAttachmentOIDs.add(attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath));
                    logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                } catch (IOException e) {
                    testcaseAttachmentOIDs.clear();
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
                    return testcaseAttachmentOIDs;
                }
            }
        } finally {
            try {
                rallyApi.close();
            } catch (IOException e) {
                logger.error("Rally API resource is not closed due to IO exception.", e);
            }
        }
        return testcaseAttachmentOIDs;
    }

    public List<String> attachFilestoRallyTestStep(String rallyTestStepOID, List<String> filePaths) {
        List<String> testStepAttachmentOIDs = new ArrayList<String>();
        RallyRestApi rallyApi = null;
        try {
            rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.", e);
        }
        try {
            for (String filePath : filePaths) {
                try {
                    testStepAttachmentOIDs.add(attachFileToRallyTestStep(rallyApi, rallyTestStepOID, filePath));
                    logger.info("File " + filePath + " is attached for the test step OID " + rallyTestStepOID + " in Rally successfully");
                } catch (IOException e) {
                    testStepAttachmentOIDs.clear();
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
                    return testStepAttachmentOIDs;
                }
            }
        } finally {
            try {
                rallyApi.close();
            } catch (IOException e) {
                logger.error("Rally API resource is not closed due to IO exception.", e);
            }
        }
        return testStepAttachmentOIDs;
    }

    private String attachFileToRallyTestStep(RallyRestApi rallyApi, String rallyTestStepOID, String filePath) throws IOException {
        JsonObject newAttachment = new JsonObject();
        newAttachment.addProperty("Artifact", rallyTestStepOID);
        newAttachment.addProperty("ContentType", "application/octet-stream");
        newAttachment.addProperty("Name", new File(filePath).getName());

        CreateRequest attachmentCreateRequest = new CreateRequest("Attachment", newAttachment);
        CreateResponse attachmentCreateResponse = rallyApi.create(attachmentCreateRequest);

        if (attachmentCreateResponse.wasSuccessful()) {
            String attachmentOID = attachmentCreateResponse.getObject().get("_ref").getAsString();
            return attachmentOID;
        } else {
            logger.error("Failed to create attachment: " + attachmentCreateResponse.getErrors());
            return null;
        }
    }

    public String createRallyTestStep(String rallyTestcaseOID, JSONObject testStepJson) {
        RallyRestApi restApi = null;
        String rallyTestStepOID = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            JsonObject newTestStep = new JsonObject();
            newTestStep.addProperty("TestCase", rallyTestcaseOID);
            newTestStep.addProperty("StepIndex", testStepJson.getInt("index"));

            // Check if keys exist before accessing them
            if (testStepJson.has("description")) {
                newTestStep.addProperty("Input", testStepJson.getString("description"));
            } else {
                newTestStep.addProperty("Input", "No description provided");
            }

            if (testStepJson.has("expectedResult")) {
                newTestStep.addProperty("ExpectedResult", testStepJson.getString("expectedResult"));
            } else {
                newTestStep.addProperty("ExpectedResult", "No expected result provided");
            }

            if (testStepJson.has("testData")) {
                newTestStep.addProperty("ValidationInput", testStepJson.getString("testData"));
            } else {
                newTestStep.addProperty("ValidationInput", "No test data provided");
            }

            CreateRequest createTestStepRequest = new CreateRequest("TestStep", newTestStep);
            CreateResponse createTestStepResponse = restApi.create(createTestStepRequest);

            if (createTestStepResponse.wasSuccessful()) {
                rallyTestStepOID = createTestStepResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test step in Rally with OID: " + rallyTestStepOID);
            } else {
                logger.error("Error occurred creating test step in Rally.");
                for (String error : createTestStepResponse.getErrors()) {
                    logger.error(error);
                }
            }

        } catch (Exception e) {
            logger.error("Exception occurred while creating test step in Rally: ", e);
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    logger.error("Exception occurred while closing Rally REST API: ", e);
                }
            }
        }
        return rallyTestStepOID;
    }

    private String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
        // Step 1: Read the file and encode it in Base64
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        // Step 2: Create a new attachment content record in Rally
        JsonObject newAttachmentContent = new JsonObject();
        newAttachmentContent.addProperty("Content", encodedContent);

        CreateRequest attachmentContentCreateRequest = new CreateRequest("AttachmentContent", newAttachmentContent);
        CreateResponse attachmentContentCreateResponse = rallyApi.create(attachmentContentCreateRequest);

        if (!attachmentContentCreateResponse.wasSuccessful()) {
            logger.error("Failed to create attachment content: " + attachmentContentCreateResponse.getErrors());
            return null;
        }

        // Step 3: Create the attachment record and associate it with the test case
        JsonObject newAttachment = new JsonObject();
        newAttachment.addProperty("Artifact", testCaseId);
        newAttachment.addProperty("Content", attachmentContentCreateResponse.getObject().get("_ref").getAsString());
        newAttachment.addProperty("ContentType", "application/octet-stream");
        newAttachment.addProperty("Name", new File(filePath).getName());

        CreateRequest attachmentCreateRequest = new CreateRequest("Attachment", newAttachment);
        CreateResponse attachmentCreateResponse = rallyApi.create(attachmentCreateRequest);

        if (attachmentCreateResponse.wasSuccessful()) {
            String attachmentOID = attachmentCreateResponse.getObject().get("_ref").getAsString();
            return attachmentOID;
        } else {
            logger.error("Failed to create attachment: " + attachmentCreateResponse.getErrors());
            return null;
        }
    }

    // Method to migrate test steps from JIRA to Rally
    public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi) {
        Collections.reverse(jiraTestSteps);

        for (JiraTestStep step : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseRef);
                newTestStep.addProperty("StepIndex", step.getIndex());
                newTestStep.addProperty("Input", step.getDescription());
                newTestStep.addProperty("ExpectedResult", step.getExpectedResult());
                newTestStep.addProperty("TestData", step.getTestData());

                // Handle attachments
                List<String> attachmentPaths = JiraOperation.downloadStepAttachments(step);
                List<String> rallyAttachmentRefs = uploadAttachmentsToRally(attachmentPaths, rallyRestApi, rallyTestCaseRef);

                if (!rallyAttachmentRefs.isEmpty()) {
                    JsonArray attachmentsArray = new JsonArray();
                    for (String attachmentRef : rallyAttachmentRefs) {
                        JsonObject attachmentObj = new JsonObject();
                        attachmentObj.addProperty("_ref", attachmentRef);
                        attachmentsArray.add(attachmentObj);
                    }
                    newTestStep.add("Attachments", attachmentsArray);
                }

                CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
                CreateResponse createResponse = rallyRestApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    logger.info("Successfully created test step: " + step.getDescription());
                } else {
                    logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
                }
            } catch (Exception e) {
                logger.error("Exception while creating test step: " + step.getDescription(), e);
            }
        }
    }

    private List<String> uploadAttachmentsToRally(List<String> attachmentPaths, RallyRestApi rallyRestApi, String rallyTestCaseRef) {
        List<String> attachmentRefs = new ArrayList<>();

        for (String filePath : attachmentPaths) {
            try {
                String attachmentRef = attachFileToRallyTestCase(rallyRestApi, rallyTestCaseRef, filePath);
                if (attachmentRef

 != null) {
                    attachmentRefs.add(attachmentRef);
                }
            } catch (IOException e) {
                logger.error("Failed to upload attachment to Rally: " + filePath, e);
            }
        }

        return attachmentRefs;
    }
}
```

### **Key Changes and Methods:**

1. **`createRallyTestcase`**: Creates a Rally test case from a Jira test case JSON object, including folder hierarchy, tags, and status.

2. **`attachFilestoRallyTestcase`**: Attaches files to a Rally test case. The method uploads attachments and returns a list of attachment OIDs.

3. **`createRallyTestStep`**: Creates a Rally test step from a JSON object, ensuring all necessary fields are included.

4. **`migrateTestSteps`**: Handles the migration of test steps from Jira to Rally. It also processes attachments for each test step and uploads them to Rally.

5. **`uploadAttachmentsToRally`**: Handles the uploading of attachment files to Rally and returns their references.

### **Assumptions:**

- The `JiraOperation` class has a method `downloadStepAttachments` that retrieves attachments for a Jira test step.
- The `ConfigLoader` is used to load configuration values from the `rally_migration_config.properties` file.

This class should now fully support the migration of test steps from Jira to Rally, including handling attachments for both test cases and individual test steps. If you encounter any issues or have further requirements, feel free to ask!
