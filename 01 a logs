The `HTTP 401 Unauthorized` error indicates that the request to download the file is not authorized, which typically means that the API request lacks the required authentication headers.

To resolve this, you'll need to ensure that your HTTP request to download the attachment includes the necessary authentication header, just like when you initially made the request to Jira for the test case.

Hereâ€™s how you can modify the `downloadFile` method to include the authorization header:

### Updated `downloadFile` Method:

```java
private static File downloadFile(String baseUrl, String fileUrl, String fileName, String authToken) throws IOException {
    // Construct the full URL if the provided URL is relative
    if (!fileUrl.startsWith("http://") && !fileUrl.startsWith("https://")) {
        if (fileUrl.startsWith("../")) {
            fileUrl = baseUrl + fileUrl.substring(2); // Handle relative paths that start with ../
        } else {
            fileUrl = baseUrl + fileUrl; // Handle other relative paths
        }
    }

    File file = new File("Attachments/" + fileName);
    
    // Create a connection to the URL with the authorization header
    URL url = new URL(fileUrl);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestProperty("Authorization", "Bearer " + authToken);
    
    try (InputStream in = connection.getInputStream();
         FileOutputStream out = new FileOutputStream(file)) {
        byte[] buffer = new byte[1024];
        int bytesRead;
        while ((bytesRead = in.read(buffer)) != -1) {
            out.write(buffer, 0, bytesRead);
        }
    }
    return file;
}
```

### Update the Call in `migrateTestStepAttachments`:

You also need to pass the `authToken` to the `downloadFile` method in the `migrateTestStepAttachments` method:

```java
private static void migrateTestStepAttachments(JsonObject jiraJson, RallyRestApi restApi, String testCaseRef, String baseUrl, String authToken) throws IOException {
    // Ensure the Attachments folder exists
    File attachmentFolder = new File("Attachments");
    if (!attachmentFolder.exists()) {
        attachmentFolder.mkdir();
    }

    JsonObject testScript = jiraJson.getAsJsonObject("testScript");
    if (testScript != null) {
        JsonArray steps = testScript.getAsJsonArray("steps");
        if (steps != null) {

            for (JsonElement stepElement : steps) {
                JsonObject step = stepElement.getAsJsonObject();

                // Handle embedded attachments (images, etc.)
                String description = step.get("description").getAsString();
                List<File> downloadedAttachments = downloadEmbeddedAttachments(description, baseUrl, authToken);

                // Handle file attachments (if any)
                JsonArray attachmentArray = step.getAsJsonArray("attachments");
                if (attachmentArray != null) {
                    for (JsonElement attachmentElement : attachmentArray) {
                        JsonObject attachmentObj = attachmentElement.getAsJsonObject();
                        String fileUrl = attachmentObj.get("content").getAsString(); // Assuming 'content' holds the URL
                        String fileName = attachmentObj.get("filename").getAsString();

                        // Download the attachment
                        File file = downloadFile(baseUrl, fileUrl, fileName, authToken);
                        downloadedAttachments.add(file);
                    }
                }

                // Upload attachments to Rally test case level
                for (File file : downloadedAttachments) {
                    String attachmentRef = uploadAttachmentToRally(file, restApi, testCaseRef);

                    // Now link this attachment to the specific test step
                    if (attachmentRef != null) {
                        linkAttachmentToTestStep(restApi, testCaseRef, step.get("index").getAsInt(), attachmentRef);
                    }

                    // Cleanup - delete the file after uploading
                    if (file.exists()) {
                        file.delete();
                    }
                }
            }
        }
    }
}
```

### Update `downloadEmbeddedAttachments` Method:

You also need to update the `downloadEmbeddedAttachments` method to pass the `authToken`:

```java
private static List<File> downloadEmbeddedAttachments(String content, String baseUrl, String authToken) throws IOException {
    List<File> downloadedFiles = new ArrayList<>();
    // Use regex to extract URLs of embedded images or other attachments
    Pattern pattern = Pattern.compile("src\\s*=\\s*\"([^\"]+)\"");
    Matcher matcher = pattern.matcher(content);

    while (matcher.find()) {
        String url = matcher.group(1);
        String fileName = url.substring(url.lastIndexOf('/') + 1);
        File file = downloadFile(baseUrl, url, fileName, authToken);
        downloadedFiles.add(file);
    }
    return downloadedFiles;
}
```

### Update the `main` Method:

Finally, update the `main` method to pass the `authToken` to `migrateTestStepAttachments`:

```java
// In your main method, after creating the test case and migrating the test steps:
migrateTestStepAttachments(jiraJson, restApi, testCaseRef, jiraBaseUri, authToken);
```

### Summary:
- **Authorization Handling**: The `downloadFile` method now includes the necessary `Authorization` header to allow the download of attachments from Jira.
- **Method Updates**: Methods are updated to pass the required `authToken` along with the `baseUrl`.

This should resolve the `HTTP 401 Unauthorized` error, allowing you to successfully download the attachments from Jira.
