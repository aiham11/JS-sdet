in this when i run its attaching the embedded attachments to the last test step not to thier respective test steps do you know why? package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.GetRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.GetResponse;
import com.rallydev.rest.response.UpdateResponse;
import com.rallydev.rest.request.UpdateRequest;
import com.rallydev.rest.response.UpdateResponse;

import java.util.Collections;


public class RallyOperation {

    // Initialization of the class member variables.
    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    // Logger Initialization for RallyOperation Class
    private static final Logger logger = LogManager.getLogger();

    // Constructor that loads the values from the .properties file
    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
    }

    // Method to create a Rally Test Case based on the JSON object from Jira
    public String createRallyTestcase(JsonObject jiraJson) {
        String rallyTestCaseOID = null;

        // Create JSON object for rally Json and add rally project reference key
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        // Create JSON object for the testcase
        JsonObject testCase = new JsonObject();

        // Get testcase name from Jira Json body and add it to the rally testcase as a property
        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira");
        }

        // Add method, priority, owner, status, and tags to the rally testcase as properties
        testCase.addProperty("Method", "Manual");
        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", priority);
            }
        } else {
            testCase.addProperty("Priority", "Default Priority");
        }

        testCase.addProperty("Owner", "/user/" + rallyUser);
        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false);
        }

        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        // Get folder hierarchy from JIRA response and create the test folder
        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");
        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
        if (testFolder == null) {
            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return rallyTestCaseOID;
        }
        logger.info("Folder " + folderPath + " is created successfully in Rally");

        rallyJson.add("TestFolder", testFolder);
        rallyJson.add("testCase", testCase);

        // Initialize Rally API
        try (RallyRestApi restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey)) {
            restApi.setApplicationName("CreateTestCaseApp");

            CreateRequest createRequest = new CreateRequest("testcase", testCase);
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test case and the OID for created testcase: " + rallyTestCaseOID);
            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }
        } catch (URISyntaxException | IOException e) {
            logger.error("Exception occurred while creating Rally test case", e);
        }
        return rallyTestCaseOID;
    }

    // Method to attach files to a Rally Test Case
    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID, List<String> filePaths) throws IOException {
        List<String> testcaseAttachmentOIDs = new ArrayList<>();
        try (RallyRestApi rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey)) {
            for (String filePath : filePaths) {
                try {
                    String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                    if (attachmentOID != null) {
                        testcaseAttachmentOIDs.add(attachmentOID);
                        logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                    }
                } catch (IOException e) {
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
                }
            }
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.", e);
        }
        return testcaseAttachmentOIDs;
    }

    // Method to upload a single file as an attachment to a Rally Test Case
    public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        String ContentType = determineContentType(filePath);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);

        CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
        if (!attachmentContentResponse.wasSuccessful()) {
            logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
            return null;
        }
        String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();

        JsonObject attachment = new JsonObject();
        attachment.addProperty("Artifact", "/testcase/" + testCaseId);
        attachment.addProperty("Content", attachmentContentRef);
        attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
        attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
        attachment.addProperty("ContentType", ContentType);
        attachment.addProperty("Size", fileContent.length);

        CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
        CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
        if (attachmentResponse.wasSuccessful()) {
            logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
            return attachmentResponse.getObject().get("_ref").getAsString();
        } else {
            logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
            return null;
        }
    }

    // Method to determine the content type based on the file extension
    private String determineContentType(String filePath) {
        String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();
        switch (attachmentType) {
            case ".png":
                return "image/png";
            case ".txt":
                return "text/plain";
            case ".jpeg":
            case ".jpg":
                return "image/jpeg";
            case ".xml":
                return "application/xml";
            case ".gif":
                return "image/gif";
            case ".doc":
                return "application/msword";
            case ".docx":
                return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            case ".xls":
                return "application/vnd.ms-excel";
            case ".xlsx":
                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            case ".zip":
                return "application/zip";
            default:
                return "application/octet-stream";
        }
    }
    
    
    private String extractOID(String fullUrl) {
        if (fullUrl != null && fullUrl.contains("/")) {
            return fullUrl.substring(fullUrl.lastIndexOf('/') + 1);
        } else {
            logger.error("Invalid URL format: " + fullUrl);
            return null;
        }
    } 
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
        List<String> uploadedAttachments = new ArrayList<>();

        for (JiraTestStep jiraTestStep : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseOID);
                newTestStep.addProperty("StepIndex", jiraTestStep.getIndex());
                
                // Combine "Step" and "Test Data" fields into the "Input" field in Rally
                String inputField = (jiraTestStep.getStep() != null ? jiraTestStep.getStep() : "") +
                                    (jiraTestStep.getTestData() != null ? "\n" + jiraTestStep.getTestData() : "");
                newTestStep.addProperty("Input", inputField);
                
                // Map "Expected Result" field from Jira directly to Rally's "Expected Result"
                newTestStep.addProperty("ExpectedResult", jiraTestStep.getExpectedResult());


                if (embeddedAttachmentPaths != null && !embeddedAttachmentPaths.isEmpty()) {
                    for (String embeddedPath : embeddedAttachmentPaths) {
                        if (!uploadedAttachments.contains(embeddedPath)) {
                            String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, embeddedPath);
                            String attachmentOID = extractOID(attachmentURL);
                            
                            
                            System.out.println("here is my attachmentOID  "+attachmentOID+"    here is my STEPOID   "+ rallyTestCaseOID );
                            if (attachmentOID != null) {
                                uploadedAttachments.add(embeddedPath);
                                newTestStep.addProperty("Input", newTestStep.get("Input").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                            }
                        }
                    }
                }

                CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
                CreateResponse createResponse = rallyApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    String testStepURL = createResponse.getObject().get("_ref").getAsString();
                    String testStepOID = extractOID(testStepURL);
                    logger.info("Successfully created test step in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
                } else {
                    logger.error("Failed to create test step in Rally: " + createResponse.getErrors());
                }
            } catch (IOException e) {
                logger.error("Exception occurred while creating test step in Rally", e);
            }
        }
    }

    
    }

here is my util class



package com.optum.coe.automation.rally;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;
import org.apache.http.HttpEntity;

public class Utils {

    // Logger Initialization for Utils Class
    private static final Logger logger = LogManager.getLogger();

    public static HttpEntity getJiraResponse(String url, String apiKey) {
        CloseableHttpClient connection = HttpClients.createDefault();
        HttpGet request = new HttpGet(url);
        request.setHeader("Authorization", "Bearer " + apiKey);
        CloseableHttpResponse response = null;
        try {
            response = connection.execute(request);
        } catch (ClientProtocolException e) {
            logger.error("Error occurred in Jira connection while connecting " + url, e);
        } catch (IOException e) {
            logger.error("Error occurred in Jira connection while connecting " + url, e);
        }
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            logger.info("Successfully returned HttpEntity response for the URL " + url);
            return entity;
        } else {
            logger.error("Error occurred. HttpEntity is null and no response is received for the URL." + url);
            return null;
        }
    }

    public static JsonObject findOrCreateTag(RallyRestApi restApi, String tagName) throws IOException {
        QueryRequest tagRequest = new QueryRequest("Tag");
        tagRequest.setQueryFilter(new QueryFilter("Name", "=", tagName));
        QueryResponse tagResponse = restApi.query(tagRequest);

        if (tagResponse.getResults().size() > 0) {
            return tagResponse.getResults().get(0).getAsJsonObject();
        }

        JsonObject newTag = new JsonObject();
        newTag.addProperty("Name", tagName);

        CreateRequest createTagRequest = new CreateRequest("Tag", newTag);
        CreateResponse createTagResponse = restApi.create(createTagRequest);

        if (createTagResponse.wasSuccessful()) {
            return createTagResponse.getObject();
        } else {
            System.out.println("Error occurred creating tag:");
            for (String error : createTagResponse.getErrors()) {
                System.out.println(error);
            }
            return null;
        }
    }

    public static JsonObject createTestFolder(String[] folderHierarchy, String projectRef, String rallyBaseUrl,
            String rallyApiKey) {
        JsonObject lastFolder = null;
        String lastFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseUrl), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            for (int i = 0; i < folderHierarchy.length; i++) {
                String folderName = folderHierarchy[i];
                if (folderName == null || folderName.trim().isEmpty()) {
                    logger.info("Invalid folder name encountered: '" + folderName + "'");
                    continue;
                }

                if (i == 0) {
                    QueryRequest parentFolderExistenceRequest = new QueryRequest("testfolder");
                    parentFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim())
                            .and(new QueryFilter("Parent", "=", "null")));
                    parentFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse parentQueryResponse = restApi.query(parentFolderExistenceRequest);

                    if (parentQueryResponse.wasSuccessful() && parentQueryResponse.getTotalResultCount() > 0) {
                        lastFolder = parentQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Parent folder already exists: " + lastFolderRef);
                    } else {
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created parent folder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating parent folder.");
                            for (String error : createFolderResponse.getErrors()) {
                                System.out.println(error);
                            }
                            break;
                        }
                    }
                } else {
                    QueryRequest subFolderExistenceRequest = new QueryRequest("testfolder");
                    subFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim())
                            .and(new QueryFilter("Parent", "=", lastFolderRef)));
                    subFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse subQueryResponse = restApi.query(subFolderExistenceRequest);

                    if (subQueryResponse.wasSuccessful() && subQueryResponse.getTotalResultCount() > 0) {
                        lastFolder = subQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Subfolder already exists: " + lastFolderRef);
                    } else {
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);
                        newFolder.addProperty("Parent", lastFolderRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created subfolder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating subfolder");
                            for (String error : createFolderResponse.getErrors()) {
                                System.out.println(error);
                            }
                            break;
                        }
                    }
                }
            }

            return lastFolder;

        } catch (Exception e) {
            logger.error("Exception occurred while creating test folder structure in Rally.", e);
            return null;
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    logger.error("Error occurred while closing RallyRestApi.", e);
                }
            }
        }
    }

    // Implementation to update the TestCase Migrated in Jira to "true". User story US7382197
    public void updateTestCaseMigratedStatusinJira(boolean status) {
        // Implementation will be added here based on the specific Jira API details.
    }

    public static Map<String, String> pharseJsonGetAttachmentUrlAndName(String jsonResponse) {
        Map<String, String> attachmentMap = new HashMap<>();
        JSONArray jArrayResponse = new JSONArray(jsonResponse);
        for (int i = 0; i < jArrayResponse.length(); i++) {
            JSONObject jsonObject = jArrayResponse.getJSONObject(i);
            String url = jsonObject.getString("url");
            String name = jsonObject.getString("filename");
            attachmentMap.put(url, name);
        }
        return attachmentMap;
    }

    public static List<String> downloadFileAttachmentFromJiraTestCase(Map<String, String> attachmentMap,
            String tcAttachmentDownloadLocation, String jiraApiKey, String testcaseKey) throws IOException {

        List<String> filePaths = new ArrayList<>();
        Path path = Paths.get(tcAttachmentDownloadLocation);
        if (!Files.exists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                logger.error("Failed to create directories for attachment download location.", e);
            }
        }

        for (Map.Entry<String, String> entry : attachmentMap.entrySet()) {
            String fileUrl = entry.getKey();
            String fileName = entry.getValue();
            HttpEntity response = Utils.getJiraResponse(fileUrl, jiraApiKey);

            if (response != null) {
                try (InputStream in = response.getContent()) {
                    Path filePath = Paths.get(tcAttachmentDownloadLocation + "/" + fileName);
                    Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);  // Overwrite if file exists
                    filePaths.add(filePath.toString());
                    EntityUtils.consume(response);
                    logger.info("File downloaded from Jira to tcAttachmentDownloadLocation. File Name: " + fileName);
                } catch (IOException e) {
                    logger.error("Failed to download the file attachments from Jira for Testcase level", e);
                }
            } else {
                logger.error("Failed to download the file attachment " + fileName
                        + " from Jira for Testcase level. No Entity response found");
            }
        }
        return filePaths;
    }

    public static String downloadFileFromUrl(String fileURL, String destinationFile) throws IOException {
        logger.debug("Attempting to download file from URL: " + fileURL + " to: " + destinationFile);
        URL url = new URL(fileURL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        try (InputStream inputStream = connection.getInputStream()) {
            Path filePath = Paths.get(destinationFile);
            Files.copy(inputStream, filePath, StandardCopyOption.REPLACE_EXISTING);  // Overwrite if file exists
            logger.info("Downloaded file from URL: " + fileURL + " to: " + destinationFile);
            return filePath.toString();
        } catch (IOException e) {
            logger.error("Failed to download file from URL: " + fileURL, e);
            throw e;
        }
    }

    public static List<String> downloadFileAttachmentFromTestStep(String jsonResponse, String apiToken,
            String testStepFileAttachmentLocationToBeSaved, String tC_Id, String baseURL) throws IOException {
        List<String> filePaths = new ArrayList<>();
        JSONObject jsonObject = new JSONObject(jsonResponse);
        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
        Path path = Paths.get(testStepFileAttachmentLocationToBeSaved);
        if (!Files.exists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                logger.error("Failed to create directories for test step attachment download location.", e);
            }
        }

        for (int i = 0; i < stepsArray.length(); i++) {
            JSONObject stepObject = stepsArray.getJSONObject(i);
            int index = stepObject.getInt("index");
            int stepNumber = index + 1;
            if (stepObject.has("attachments")) {
                JSONArray attachmentsArray = stepObject.getJSONArray("attachments");
                for (int j = 0; j < attachmentsArray.length(); j++) {
                    JSONObject attachmentObject = attachmentsArray.getJSONObject(j);
                    int attachmentID = attachmentObject.getInt("id");
                    int attachmentNumber = j + 1;
                    String attachmentFileName = attachmentObject.getString("name");
                    String testStepAttachmentUrl = baseURL + "/rest/tests/1.0/attachment/" + attachmentID;
                    HttpEntity response = Utils.getJiraResponse(testStepAttachmentUrl, apiToken);
                    if (response != null) {
                        try (InputStream in = response.getContent()) {
                            Path filePath = Paths.get(testStepFileAttachmentLocationToBeSaved + "/" + stepNumber + "_" + attachmentNumber + "_" + attachmentFileName);
                            Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);  // Overwrite if file exists
                            filePaths.add(filePath.toString());
                            EntityUtils.consume(response);
                            logger.info("File downloaded from Jira to testStepFileAttachmentLocation. File Name: " + attachmentFileName);
                        } catch (IOException e) {
                            logger.error("Failed to download the file attachments from Jira for Testcase level", e);
                        }
                    } else {
                        logger.error("Failed to download the file attachment " + attachmentFileName
                                + " from Jira for Testcase level. No Entity response found");
                    }
                }
            }
        }
        return filePaths;
    }

    public static List<String> downloadTestStepEmbeddedAttachments(String jsonResponse, String apiToken,
            String testStepAttachmentLocationToBeSaved, String tC_Id, String baseURL, String columnName)
            throws IOException {
        List<String> filePaths = new ArrayList<>();
        JSONObject jsonObject = new JSONObject(jsonResponse);
        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
        Path path = Paths.get(testStepAttachmentLocationToBeSaved);
        if (!Files.exists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                logger.error("Failed to create directories for embedded attachment download location.", e);
            }
        }

        for (int i = 0; i < stepsArray.length(); i++) {
            JSONObject stepObject = stepsArray.getJSONObject(i);
            int index = stepObject.getInt("index");
            int stepNumber = index + 1;
            if (stepObject.has(columnName)) {
                String htmlContent = stepObject.getString(columnName);
                Document doc = Jsoup.parse(htmlContent);
                Elements imgElements = doc.select("img");
                if (!imgElements.isEmpty()) {
                    int imageCount = 0;
                    for (Element img : imgElements) {
                        String imageUrl = img.attr("src");
                        if (!imageUrl.isEmpty()) {
                            imageCount++;
                            String extractUrl = imageUrl.substring(2);
                            String absoluteUrl = baseURL + extractUrl;
                            HttpEntity response = Utils.getJiraResponse(absoluteUrl, apiToken);
                            if (response != null) {
                                try (InputStream in = response.getContent()) {
                                    Path filePath = Paths.get(testStepAttachmentLocationToBeSaved + "/" + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + ".png");
                                    Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);  // Overwrite if file exists
                                    filePaths.add(filePath.toString());
                                    EntityUtils.consume(response);
                                    logger.info("File downloaded from Jira to testStepAttachmentLocation. File Name: " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + ".png");
                                } catch (IOException e) {
                                    logger.error("Failed to download the file attachment " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + " from Jira for test step level", e);
                                }
                            } else {
                                logger.error("Failed to download the file attachment " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + " from Jira for test step level. No Entity response found");
                            }
                        }
                    }
                }
            } else {
                logger.error("No valid argument is passed to the method. It should be either description OR testData OR expectedResult");
            }
        }
        return filePaths;
    }

    public static void deleteAttachmentFileFromLocal(List<String> filePaths) {
        for (String filePath : filePaths) {
            File file = new File(filePath);
            if (file.exists()) {
                file.delete();
                logger.info("The file " + filePath + " is deleted for the next attachment download run.");
            }
        }
    }

    public static String getJsonString(JsonObject jsonObject, String key) {
        JsonElement element = jsonObject.get(key);
        if (element != null && !element.isJsonNull()) {
            if (element.isJsonArray()) {
                StringBuilder dataBuilder = new StringBuilder();
                JsonArray dataArray = element.getAsJsonArray();
                for (JsonElement jsonElement : dataArray) {
                    if (dataBuilder.length() > 0) {
                        dataBuilder.append(", ");
                    }
                    dataBuilder.append(jsonElement.getAsString());
                }
                return dataBuilder.toString();
            } else {
                return element.getAsString();
            }
        } else {
            logger.warn("Key {} not found or is null in JsonObject", key);
            return "";
        }
    }
}
