package com.optum.coe.automation.rally;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class JiraAttachment {

    private String id;
    private String url;
    private String fileName;
    private long fileSize;

    // Constructor, getters, and setters

    public JiraAttachment(String id, String url, String fileName, long fileSize) {
        this.id = id;
        this.url = url;
        this.fileName = fileName;
        this.fileSize = fileSize;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public long getFileSize() {
        return fileSize;
    }

    public void setFileSize(long fileSize) {
        this.fileSize = fileSize;
    }

    // Method to download the attachment and return the file path
    public String downloadAttachment(String downloadDirectory, String jiraApiKey) throws Exception {
        String filePath = downloadDirectory + File.separator + fileName;
        URL url = new URL(this.url);

        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestProperty("Authorization", "Basic " + jiraApiKey);
        connection.connect();

        if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new Exception("Failed to download attachment: " + fileName + " from URL: " + this.url);
        }

        try (InputStream in = connection.getInputStream();
             FileOutputStream out = new FileOutputStream(filePath)) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
        } finally {
            connection.disconnect();
        }

        return filePath;
    }
}
