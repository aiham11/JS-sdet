public class RallyOperation {

    // Initialization of the class member variables. This section can be updated in future if more member variables are added during integration if needed. 
    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;
    private static  String[] CFList;
    private static String key;

    // Logger Initialization for RallyOperation Class
    private static final Logger logger = LogManager.getLogger();

    /* A Constructor loads the value from .properties file. These value will be loaded as soon as a object is created for this class.
     * Rally Base URL, Rally API Key, Rally Project Reference, Rally user are loaded from .properties file */
    
    public RallyOperation() {
        rallyBaseURL=ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey=ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey=ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser=ConfigLoader.getConfigValue("RALLY_USER_REF");
        CFList=ConfigLoader.getConfigValue("JIRA_CUSTOM_FIELDS").split(",");
        logger.info("Rally values for the project key " + rallyProjectKey +" are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
    }

    /* A method which handles below major functionalities
     * 1. Transform the Jira Testcase details to Rally Test variable
     * 2. Check if the Jira folder structure is available in Rally
     *      a. If folder structure is not available in rally, then create the same Jira folder structure in rally for the testcase 
     *      b. If folder structure is available in rally, no action is required 
     * 3. Create the testcase
     * 4. Log the testcase OID to the log file; This OID will be used while integrating TestStep, Attachments implementation for the testcase
     * 5. Returns a boolean value as true for a successful testcase creation in rally, else returns false */
    
    public String createRallyTestcase(JsonObject jiraJson)  {
        String rallyTestCaseOID = null;
        // Create JSON object for rally Json and add rally project reference key
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        // Create JSON object for testcase Json to add the rally testcase property
        JsonObject testCase = new JsonObject();

        // Get testcase name from Jira Json body and add it to rally testcase as a property
        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira"); // Give a default value if no name is found in Jira Json body
        }

        // Add method as Manual to rally testcase as a property
        testCase.addProperty("Method", "Manual");

        // Add priority value from Jira Json body to rally testcase as a property
        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("High")) {
                testCase.addProperty("Priority", "Critical");
            } else if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Important");
            } else if (priority.equalsIgnoreCase("Low")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", "Useful");
            }
        }

        // Add owner from config file to the rally testcase as a property
        testCase.addProperty("Owner", "/user/" + rallyUser);

        // Add status from Jira Json and add to the rally testcase as a property 
        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false); // default value
        }

        // Add Custom Fields to Rally
        try {
            String NstrValue = createCFNotes(jiraJson);
            testCase.addProperty("Notes", NstrValue);
            logger.info("Test case Custom fields value retrieved.");
        } catch (Exception e) {
            logger.error("Failed to retrieve Custom fields value.", e);
        }

        // Add Automation Status
        try {
            String aStatus = createAutostatus(jiraJson);
            testCase.addProperty("c_AutomationStatus", aStatus);
            logger.info("Test case Automation Status value retrieved.");
        } catch (Exception e) {
            logger.error("Failed to retrieve Automation Status value.", e);
        }

        // Add TC Objective
        try {
            String RTCObj = createTCObjectives(jiraJson);
            testCase.addProperty("Objective", RTCObj);
            logger.info("Test case Objective value retrieved.");
        } catch (Exception e) {
            logger.error("Failed to retrieve Objectives value.", e);
        }

        // Add TC Pre-Conditions
        try {
            String RTCpc = createTCPreConditions(jiraJson);
            testCase.addProperty("PreConditions", RTCpc);
            logger.info("Test case Pre-conditions value retrieved.");
        } catch (Exception e) {
            logger.error("Failed to retrieve Pre-conditions value.", e);
        }

        // Add Estimated Time 
        try {
            String esTime = createEstimatedTime(jiraJson);
            testCase.addProperty("c_ExpectedTestDuration", esTime);
            logger.info("Test case Estimated time value retrieved.");
        } catch (Exception e) {
            logger.error("Failed to retrieve Estimated-time-conditions value.", e);
        }

        // Add tags - Need implementation as discussed in code review meeting
        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        // Get folder hierarchy from JIRA response
        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");

        // Call a Util method to create test folder based on folder hierarchy
        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey , rallyBaseURL, rallyApiKey);
        if (testFolder == null) {    
            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return rallyTestCaseOID;// Exit the method or handle accordingly
        } else {
            logger.info("Folder " + folderPath + " is  created successfully in Rally");
        }

        // Add TestFolder to the test case
        rallyJson.add("TestFolder", testFolder);

        // Add the testCase object to the rallyJson
        rallyJson.add("testCase", testCase);

        // Save the transformed JSON to a variable
        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        // Initialize Rally API
        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        // Extract values from JSON:
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            // Create a new test case
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());
            newTestCase.addProperty("Notes", testCaseData.get("Notes").getAsString());
            if(testCaseData.has("Objective")){
                newTestCase.addProperty("Objective", testCaseData.get("Objective").getAsString());
            }
            if(testCaseData.has("PreConditions")){
                newTestCase.addProperty("PreConditions", testCaseData.get("PreConditions").getAsString());
            }
            if((ConfigLoader.getConfigValue("JIRA_PROJECT_KEY")).equalsIgnoreCase("CC2") && (testCaseData.has("c_AutomationStatus"))){
                newTestCase.addProperty("c_AutomationStatus", testCaseData.get("c_AutomationStatus").getAsString());
            }
            if(testCaseData.has("c_ExpectedTestDuration")){
                newTestCase.addProperty("c_ExpectedTestDuration",testCaseData.get("c_ExpectedTestDuration").getAsString());
            }

            // Add Tags to the test case from the JSON file
            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            // Add TestFolder to the test case from the JSON file
            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = null;
            try {
                createResponse = restApi.create(createRequest);
            } catch (IOException e) {
                logger.error("IO exception during create request.", e);
            }

            if (createResponse.wasSuccessful()) {
                rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());
            } else {
                logger.error("Error occurred creating test case");    
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }
        } finally {
            try {
                restApi.close();
                logger.info("Closed rest api resource in finally block");
            } catch (IOException e) {
                logger.error("Error occurred while closing rest api resource at finally block", e);
            }
        }
        return rallyTestCaseOID;   
    }

    public static String createTCObjectives(JsonObject jiraJson) throws Exception {
        Set<String> map = jiraJson.keySet();
        if (map.contains("objective")) {
            String jiraObj = jiraJson.get("objective").getAsString();
            return jiraObj;
        }
        return null;
    }

    public static String createTCPreConditions(JsonObject jiraJson) throws Exception {
        Set<String> map = jiraJson.keySet();
        if (map.contains("precondition")) {
            String jiraPC = jiraJson.get("precondition").getAsString();
            return jiraPC;
        }
        return null;
    }

    public static String createEstimatedTime(JsonObject jiraJson) throws Exception {
        Set<String> map = jiraJson.keySet();
        String estiTime = new String();
        if (map.contains("estimatedTime")) {
            Integer millis = jiraJson.get("estimatedTime").getAsInt();
            if (millis != null && millis != 0) {
                estiTime = String.format("%02d.%02d", 
                    TimeUnit.MILLISECONDS.toHours(millis),
                    TimeUnit.MILLISECONDS.toMinutes(millis) - 
                    TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)));
            }
        }
        return estiTime;
    }

    public static String createCFNotes(JsonObject jiraJson) throws Exception {
        key = jiraJson.get("key").getAsString();
        StringBuilder nString = new StringBuilder();
        nString.append("Jira TC Created On: " + jiraJson.get("createdOn").getAsString() + "<br>");
        nString.append("Jira TC ID: " + key + "<br>");
        String wUrl = JiraOperation.retrieveJWeblinks(key);
        if (wUrl.length() > 0) {
            nString.append("Web URL: " + wUrl + "<br>");
        }
        if (jiraJson.has("customFields")) {
            JsonObject CFields = (JsonObject) jiraJson.get("customFields");
            Set<String> map = CFields.keySet();
            for (String ele : CFList) {
                if (map.contains(ele)) {
                    nString.append(ele + ": " +  CFields.get(ele).getAsString() + "<br>");
                }
            }
        }
        return (nString.toString());
    }

    public static String createAutostatus(JsonObject jiraJson) throws Exception {
        String c_AutomationStatus = new String();
        if (jiraJson.has("customFields")) {
            JsonObject CFields = (JsonObject) jiraJson.get("customFields");
            Set<String> map = CFields.keySet();
            if (map.contains("Automation Status")) {
                String AutoStatus = CFields.get("Automation Status").getAsString();    
                if (AutoStatus.equalsIgnoreCase("AutoBot Automated")) {
                    c_AutomationStatus = "Automated";
                } else if (AutoStatus.equalsIgnoreCase("AutoBot Blocker")) {
                    c_AutomationStatus = "To be Analyzed";
                } else if (AutoStatus.equalsIgnoreCase("AutoBot Inprogress")) {
                    c_AutomationStatus = "Under Development";
                } else if (AutoStatus.equalsIgnoreCase("Automated Review")) {
                    c_AutomationStatus = "Ready for Review";
                } else if (AutoStatus.equalsIgnoreCase("Automated Scheduled - P1")) {
                    c_AutomationStatus = "Approved";
                } else if (AutoStatus.equalsIgnoreCase("Automated Target - P2")) {
                    c_AutomationStatus = "Research for Automation";
                } else if (AutoStatus.equalsIgnoreCase("Automated Scheduled - P1")) {
                    c_AutomationStatus = "Can Not Automate";
                } else {
                    c_AutomationStatus = null;
                }
            }
        }
        return c_AutomationStatus;
    }

    /* A method which is used to attach the files to rally testcase */
    
    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID , List<String> filePaths) {
        List<String> testcaseAttachmentOIDs = new ArrayList<String>(); // Initialize a list to get Attachment OIDs
        RallyRestApi rallyApi = null; // Initialize rally api object
        try {
            rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.",e );
            testcaseAttachmentOIDs.clear();
            return testcaseAttachmentOIDs;
        }
        try {
            for (String filePath : filePaths) {  // Loop through each local file path where file attachment resides and attach them using attachFileToRallyTestCase method
                try {
                    String testcaseAttachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                    if (testcaseAttachmentOID != null ) {
                        testcaseAttachmentOIDs.add(testcaseAttachmentOID);
                    } else {
                        testcaseAttachmentOIDs.clear();
                        logger.error("Error occurred while trying to attach the files to rally");
                        return testcaseAttachmentOIDs;
                    }
                    logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                } catch (IOException e) {
                    testcaseAttachmentOIDs.clear();
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.",e );
                    return testcaseAttachmentOIDs;
                }
            }
        } finally {
            try {
                rallyApi.close(); // Close api resource
            } catch (IOException e) {
                logger.error("Ready API resource is not closed due to IO exception.",e );
            }
        }
        return testcaseAttachmentOIDs; // return testcase attachment OID for further processing
    }
    
    /* A method which is used to attach a specific file to rally testcase */
    
    public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath)); //Read the file and encode it in Base64
        String encodedContent = Base64.getEncoder().encodeToString(fileContent); 
        String ContentType = determineContentType(filePath);
        
        //Create the AttachmentContent
        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);
        CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
        if (!attachmentContentResponse.wasSuccessful()) {
            logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
            return null;


        }
        String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();
        
        //Create the Attachment
        JsonObject attachment = new JsonObject();
        attachment.addProperty("Artifact", "/testcase/" + testCaseId); // Reference to the test case
        attachment.addProperty("Content", attachmentContentRef);
        attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
        attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
        attachment.addProperty("ContentType", ContentType);
        attachment.addProperty("Size", fileContent.length);
        CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
        CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
        if (attachmentResponse.wasSuccessful()) {
            logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
            return attachmentResponse.getObject().get("_ref").getAsString();
        } else {
            logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
            return null;
        }
    }

    // Method to determine the content type based on the file extension
    private String determineContentType(String filePath) {
        String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();
        switch (attachmentType) {
            case ".png":
                return "image/png";
            case ".txt":
                return "text/plain";
            case ".jpeg":
            case ".jpg":
                return "image/jpeg";
            case ".xml":
                return "application/xml";
            case ".gif":
                return "image/gif";
            case ".doc":
                return "application/msword";
            case ".docx":
                return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            case ".xls":
                return "application/vnd.ms-excel";
            case ".xlsx":
                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            case ".zip":
                return "application/zip";
            default:
                return "application/octet-stream";
        }
    }

    // Method to extract the OID from a given Rally URL
    private String extractOID(String fullUrl) {
        if (fullUrl != null && fullUrl.contains("/")) {
            return fullUrl.substring(fullUrl.lastIndexOf('/') + 1);
        } else {
            logger.error("Invalid URL format: " + fullUrl);
            return null;
        }
    }

    // Method to migrate test steps with attachments
    public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
        List<String> uploadedAttachments = new ArrayList<>();

        for (JiraTestStep jiraTestStep : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseOID);
                newTestStep.addProperty("StepIndex", jiraTestStep.getIndex());
                
                // Combine "Step" and "Test Data" fields into the "Input" field in Rally
                String inputField = (jiraTestStep.getStep() != null ? jiraTestStep.getStep() : "") +
                                    (jiraTestStep.getTestData() != null ? "\n" + jiraTestStep.getTestData() : "");
                newTestStep.addProperty("Input", inputField);
                
                // Map "Expected Result" field from Jira directly to Rally's "Expected Result"
                newTestStep.addProperty("ExpectedResult", jiraTestStep.getExpectedResult());

                if (embeddedAttachmentPaths != null && !embeddedAttachmentPaths.isEmpty()) {
                    for (String embeddedPath : embeddedAttachmentPaths) {
                        if (!uploadedAttachments.contains(embeddedPath)) {
                            String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, embeddedPath);
                            String attachmentOID = extractOID(attachmentURL);

                            if (attachmentOID != null) {
                                uploadedAttachments.add(embeddedPath);
                                newTestStep.addProperty("Input", newTestStep.get("Input").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                            }
                        }
                    }
                }

                CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
                CreateResponse createResponse = rallyApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    String testStepURL = createResponse.getObject().get("_ref").getAsString();
                    String testStepOID = extractOID(testStepURL);
                    logger.info("Successfully created test step in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
                } else {
                    logger.error("Failed to create test step in Rally: " + createResponse.getErrors());
                }
            } catch (IOException e) {
                logger.error("Exception occurred while creating test step in Rally", e);
            }
        }
    }
}
