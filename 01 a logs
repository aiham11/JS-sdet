// This method will determine if the attachment is related to the ExpectedResult or Input based on the JiraTestStep
private boolean isAttachmentForExpectedResult(JiraTestStep jiraTestStep) {
    // Attachments in ExpectedResult are those where the ExpectedResult is not empty
    return jiraTestStep.getExpectedResult() != null && !jiraTestStep.getExpectedResult().isEmpty();
}

// This method returns a list of attachments that should be associated with the given step index
private List<String> getAttachmentsForTestStep(int stepIndex, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
    List<String> attachmentsForStep = new ArrayList<>();
    
    // Add logic to determine which attachments belong to the specific test step
    // Example: assuming attachments have a naming pattern that includes the step index
    if (fileAttachmentPaths != null) {
        for (String path : fileAttachmentPaths) {
            if (path.contains("step_" + stepIndex + "_")) {
                attachmentsForStep.add(path);
            }
        }
    }

    if (embeddedAttachmentPaths != null) {
        for (String path : embeddedAttachmentPaths) {
            if (path.contains("step_" + stepIndex + "_")) {
                attachmentsForStep.add(path);
            }
        }
    }

    return attachmentsForStep;
}

// Method to migrate test steps with attachments
public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
    List<String> uploadedAttachments = new ArrayList<>();

    for (JiraTestStep jiraTestStep : jiraTestSteps) {
        try {
            JsonObject newTestStep = new JsonObject();
            newTestStep.addProperty("TestCase", rallyTestCaseOID);
            newTestStep.addProperty("StepIndex", jiraTestStep.getIndex());
            
            // Combine "Step" and "Test Data" fields into the "Input" field in Rally
            String inputField = (jiraTestStep.getStep() != null ? jiraTestStep.getStep() : "") +
                                (jiraTestStep.getTestData() != null ? "\n" + jiraTestStep.getTestData() : "");
            newTestStep.addProperty("Input", inputField);
            
            // Map "Expected Result" field from Jira directly to Rally's "Expected Result"
            newTestStep.addProperty("ExpectedResult", jiraTestStep.getExpectedResult());

            // Get attachments for this specific test step
            List<String> stepAttachments = getAttachmentsForTestStep(jiraTestStep.getIndex(), fileAttachmentPaths, embeddedAttachmentPaths);

            if (stepAttachments != null && !stepAttachments.isEmpty()) {
                for (String attachmentPath : stepAttachments) {
                    if (!uploadedAttachments.contains(attachmentPath)) {
                        String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, attachmentPath);
                        String attachmentOID = extractOID(attachmentURL);

                        if (attachmentOID != null) {
                            uploadedAttachments.add(attachmentPath);
                            // Determine whether to embed the attachment in the ExpectedResult or Input
                            if (isAttachmentForExpectedResult(jiraTestStep)) {
                                newTestStep.addProperty("ExpectedResult", newTestStep.get("ExpectedResult").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                            } else {
                                newTestStep.addProperty("Input", newTestStep.get("Input").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                            }
                        }
                    }
                }
            }

            CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
            CreateResponse createResponse = rallyApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                String testStepURL = createResponse.getObject().get("_ref").getAsString();
                String testStepOID = extractOID(testStepURL);
                logger.info("Successfully created test step in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
            } else {
                logger.error("Failed to create test step in Rally: " + createResponse.getErrors());
            }
        } catch (IOException e) {
            logger.error("Exception occurred while creating test step in Rally", e);
        }
    }
}

// Method to extract the OID from a given Rally URL
private String extractOID(String fullUrl) {
    if (fullUrl != null && fullUrl.contains("/")) {
        return fullUrl.substring(fullUrl.lastIndexOf('/') + 1);
    } else {
        logger.error("Invalid URL format: " + fullUrl);
        return null;
    }
}

// Method to attach files to a Rally Test Case
public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
    byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
    String encodedContent = Base64.getEncoder().encodeToString(fileContent);

    String ContentType = determineContentType(filePath);

    JsonObject attachmentContent = new JsonObject();
    attachmentContent.addProperty("Content", encodedContent);

    CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
    CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
    if (!attachmentContentResponse.wasSuccessful()) {
        logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
        return null;
    }
    String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();

    JsonObject attachment = new JsonObject();
    attachment.addProperty("Artifact", "/testcase/" + testCaseId);
    attachment.addProperty("Content", attachmentContentRef);
    attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
    attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
    attachment.addProperty("ContentType", ContentType);
    attachment.addProperty("Size", fileContent.length);

    CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
    CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
    if (attachmentResponse.wasSuccessful()) {
        logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
        return attachmentResponse.getObject().get("_ref").getAsString();
    } else {
        logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
        return null;
    }
}

// Method to determine the content type based on the file extension
private String determineContentType(String filePath) {
    String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();
    switch (attachmentType) {
        case ".png":
            return "image/png";
        case ".txt":
            return "text/plain";
        case ".jpeg":
        case ".jpg":
            return "image/jpeg";
        case ".xml":
            return "application/xml";
        case ".gif":
            return "image/gif";
        case ".doc":
            return "application/msword";
        case ".docx":
            return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        case ".xls":
            return "application/vnd.ms-excel";
        case ".xlsx":
            return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        case ".zip":
            return "application/zip";
        default:
            return "application/octet-stream";
    }
}






















// This method returns a list of attachments that should be associated with the given step index
private List<String> getAttachmentsForTestStep(int stepIndex, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
    List<String> attachmentsForStep = new ArrayList<>();
    
    // Loop through file attachments and add those that match the step index
    if (fileAttachmentPaths != null) {
        for (String path : fileAttachmentPaths) {
            // Check if the file name or path contains the step index
            if (path.contains("step_" + stepIndex + "_")) {
                attachmentsForStep.add(path);
            }
        }
    }

    // Loop through embedded attachments and add those that match the step index
    if (embeddedAttachmentPaths != null) {
        for (String path : embeddedAttachmentPaths) {
            // Check if the file name or path contains the step index
            if (path.contains("step_" + stepIndex + "_")) {
                attachmentsForStep.add(path);
            }
        }
    }

    return attachmentsForStep;
}
