public class Utils {

    // Logger Initialization for Utils Class
    private static final Logger logger = LogManager.getLogger();

    // Existing methods...

    // Updated method signature for downloadTestStepEmbeddedAttachments
    public static List<String> downloadTestStepEmbeddedAttachments(
            String fieldContent,
            String apiToken,
            String testStepAttachmentLocationToBeSaved,
            String tC_Id,
            String baseURL,
            String columnName) throws IOException {

        List<String> filePaths = new ArrayList<>();

        // Ensure the download directory exists
        Path path = Paths.get(testStepAttachmentLocationToBeSaved);
        if (!Files.exists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                logger.error("Failed to create directories for embedded attachment download location.", e);
            }
        }

        // Parse the HTML content to find image URLs
        Document doc = Jsoup.parse(fieldContent);
        Elements imgElements = doc.select("img");

        if (!imgElements.isEmpty()) {
            int imageCount = 0;
            for (Element img : imgElements) {
                String imageUrl = img.attr("src");
                if (!imageUrl.isEmpty()) {
                    imageCount++;
                    String extractUrl = imageUrl.substring(2);
                    String absoluteUrl = baseURL + extractUrl;
                    HttpEntity response = Utils.getJiraResponse(absoluteUrl, apiToken);
                    if (response != null) {
                        try (InputStream in = response.getContent()) {
                            Path filePath = Paths.get(testStepAttachmentLocationToBeSaved + "/" + tC_Id + "_" + imageCount + "_EmbeddedFile_" + columnName + ".png");
                            Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);  // Overwrite if file exists
                            filePaths.add(filePath.toString());
                            EntityUtils.consume(response);
                            logger.info("File downloaded from Jira to testStepAttachmentLocation. File Name: " + filePath.getFileName());
                        } catch (IOException e) {
                            logger.error("Failed to download the file attachment from Jira for test step level", e);
                        }
                    } else {
                        logger.error("Failed to download the file attachment from Jira for test step level. No Entity response found");
                    }
                }
            }
        } else {
            logger.error("No valid argument is passed to the method. It should be either description OR testData OR expectedResult");
        }

        return filePaths;
    }

    // Existing methods...
}
