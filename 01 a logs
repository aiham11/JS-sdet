    public String getHtmlContent() {
        StringBuilder htmlContent = new StringBuilder();
        if (description != null) {
            htmlContent.append(description);
        }
        if (testData != null) {
            htmlContent.append(testData);
        }
        if (expectedResult != null) {
            htmlContent.append(expectedResult);
        }
        return htmlContent.toString();
    }



public class JiraTestStep {
    private String htmlContent;

    // Other fields and methods...

    public String getHtmlContent() {
        return htmlContent;
    }

    public void setHtmlContent(String htmlContent) {
        this.htmlContent = htmlContent;
    }


String attachmentLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");


    // Other methods...
}























public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi, Map<Integer, List<String>> attachmentOIDsMap) {
    Collections.reverse(jiraTestSteps);

    for (JiraTestStep step : jiraTestSteps) {
        try {
            // Extract HTML content from the step (assuming it's in the description)
            String htmlContent = step.getDescription(); // Replace with "getTestData()" or "getExpectedResult()" as needed
            
            // Define the location where attachments will be saved
            String attachmentLocation = "C:/path/to/your/attachments"; // Update with the actual path where you want to save attachments
            
            // Download the embedded attachments from the HTML content
            List<String> descriptionAttachmentPaths = Utils.downloadTestStepEmbeddedAttachments(
                htmlContent,
                apiToken, // Assuming apiToken is defined elsewhere
                attachmentLocation,
                rallyTestCaseRef, // Assuming this is the test case ID
                rallyBaseUrl, // Assuming rallyBaseUrl is defined elsewhere
                "description" // Use "description", "testData", or "expectedResult" based on where the content is
            );

            // Construct Rally test step JSON object
            JsonObject newTestStep = new JsonObject();
            newTestStep.addProperty("TestCase", rallyTestCaseRef);
            newTestStep.addProperty("StepIndex", step.getIndex());
            newTestStep.addProperty("Input", step.getDescription());
            newTestStep.addProperty("ExpectedResult", step.getExpectedResult());
            newTestStep.addProperty("TestData", step.getTestData());

            // Construct attachment URLs and append to the respective fields
            if (!descriptionAttachmentPaths.isEmpty()) {
                newTestStep.addProperty("Input", newTestStep.get("Input").getAsString() + Utils.constructAttachmentUrls(descriptionAttachmentPaths));
            }

            CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
            CreateResponse createResponse = rallyRestApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                String rallyTestStepOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test step: " + step.getDescription());
            } else {
                logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + Arrays.toString(createResponse.getErrors()));
            }
        } catch (Exception e) {
            logger.error("Exception while creating test step: " + step.getDescription(), e);
        }
    }
}

String attachmentLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");

