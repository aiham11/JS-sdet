Let's proceed with the following steps:

### 1. **Revert to the Last Working Version**
First, revert the code to the last known working version. If you have version control, you can check out the previous commit that was functioning correctly.

### 2. **Reintroduce the Recent Changes**
We'll reintroduce the recent changes step by step. I'll start by reintroducing the change related to the attachment embedding logic and add detailed logging to help identify where the issue might be occurring.

Hereâ€™s how you can approach this:

### Step 1: Reintroduce the Attachment Embedding Logic

Ensure that the attachment embedding logic is correct. I'll provide a simplified version that you can use to reintroduce the changes.

```java
// This method returns a list of attachments that should be associated with the given step index
private List<String> getAttachmentsForTestStep(int stepIndex, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
    List<String> attachmentsForStep = new ArrayList<>();
    
    if (fileAttachmentPaths != null) {
        for (String path : fileAttachmentPaths) {
            if (path.contains("step_" + stepIndex + "_")) {
                attachmentsForStep.add(path);
            }
        }
    }
    
    if (embeddedAttachmentPaths != null) {
        for (String path : embeddedAttachmentPaths) {
            if (path.contains("step_" + stepIndex + "_")) {
                attachmentsForStep.add(path);
            }
        }
    }
    
    return attachmentsForStep;
}

// Method to determine if the attachment is for the ExpectedResult or Input field
private boolean isAttachmentForExpectedResult(JiraTestStep jiraTestStep) {
    return jiraTestStep.getExpectedResult() != null && !jiraTestStep.getExpectedResult().isEmpty();
}

// Method to embed the attachment into the correct test step
private void embedAttachmentsInTestStep(TestStep rallyTestStep, List<String> attachmentsForStep) {
    for (String attachmentPath : attachmentsForStep) {
        String attachmentUrl = uploadAttachmentToRally(attachmentPath);  // Upload the attachment to Rally and get the URL
        if (attachmentUrl != null) {
            rallyTestStep.setExpectedResult(rallyTestStep.getExpectedResult() + "<img src='" + attachmentUrl + "' />");
        }
    }
}
```

### Step 2: Add Detailed Logging

Add logging to track which attachments are being embedded into which test steps.

```java
private void embedAttachmentsInTestStep(TestStep rallyTestStep, List<String> attachmentsForStep) {
    for (String attachmentPath : attachmentsForStep) {
        String attachmentUrl = uploadAttachmentToRally(attachmentPath);  // Upload the attachment to Rally and get the URL
        if (attachmentUrl != null) {
            rallyTestStep.setExpectedResult(rallyTestStep.getExpectedResult() + "<img src='" + attachmentUrl + "' />");
            System.out.println("Embedded attachment " + attachmentPath + " into step " + rallyTestStep.getIndex());
        } else {
            System.out.println("Failed to upload attachment " + attachmentPath + " for step " + rallyTestStep.getIndex());
        }
    }
}
```

### Step 3: Test the Changes

After reintroducing the changes, run the migration process again to see if the issue is resolved. Check the logs to ensure that attachments are being correctly embedded into their respective test steps.

### Step 4: Troubleshoot Any Issues

If the issue persists, carefully review the logs and make sure the attachment paths and URLs are correct. If necessary, add more logging or temporarily simplify the logic to pinpoint the exact cause.

Would you like me to provide the exact code to revert to or more detailed guidance on the troubleshooting steps?
