Understood. You want the attachments to be correctly embedded in both the `ExpectedResult` and `Input` fields (or whichever field is appropriate) for the test steps. The JSON format you provided should be respected, meaning the attachment should be included within the text of the `ExpectedResult` or `Input` fields in the exact format:

```json
{
  "ExpectedResult": "This is the expected result with screenshot <img src='https://rally1.rallydev.com/slm/attachment/{{attachmentOID}}/content'/>"
}
```

### Updated `RallyOperation` Class

This class will now embed the attachments into the `ExpectedResult` or `Input` fields as specified, ensuring they are placed correctly within the fields as part of the migration process.

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    private static final Logger logger = LogManager.getLogger();

    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
    }

    public String createRallyTestcase(JsonObject jiraJson) {
        String rallyTestCaseOID = null;
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        JsonObject testCase = new JsonObject();
        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira");
        }

        testCase.addProperty("Method", "Manual");
        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", priority);
            }
        } else {
            testCase.addProperty("Priority", "Default Priority");
        }

        testCase.addProperty("Owner", "/user/" + rallyUser);
        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false);
        }

        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");

        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
        if (testFolder == null) {
            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return rallyTestCaseOID;
        } else {
            logger.info("Folder " + folderPath + " is created successfully in Rally");
        }

        rallyJson.add("TestFolder", testFolder);
        rallyJson.add("testCase", testCase);

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = rallyJson;
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test case and the OID for created testcase: " + rallyTestCaseOID);
            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }
        } catch (IOException e) {
            logger.error("Exception while creating test case in Rally", e);
        } finally {
            try {
                restApi.close();
            } catch (IOException e) {
                logger.error("Error occurred while closing rest api resource", e);
            }
        }
        return rallyTestCaseOID;
    }

    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID, List<String> filePaths) {
        List<String> testcaseAttachmentOIDs = new ArrayList<>();
        RallyRestApi rallyApi = null;
        try {
            rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.", e);
        }
        try {
            for (String filePath : filePaths) {
                try {
                    testcaseAttachmentOIDs.add(attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath));
                    logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                } catch (IOException e) {
                    testcaseAttachmentOIDs.clear();
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
                    return testcaseAttachmentOIDs;
                }
            }
        } finally {
            try {
                rallyApi.close();
            } catch (IOException e) {
                logger.error("Rally API resource is not closed due to IO exception.", e);
            }
        }
        return testcaseAttachmentOIDs;
    }

    public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        String ContentType = null;
        String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();

        if (attachmentType.equals(".png")) {
            ContentType = "image/png";
        } else if (attachmentType.equals(".txt")) {
            ContentType = "text/plain";
        } else if (attachmentType.equals(".jpeg") || attachmentType.equals(".jpg")) {
            ContentType = "image/jpeg";
        } else if (attachmentType.equals(".xml")) {
            ContentType = "application/xml";
        } else if (attachmentType.equals(".gif")) {
            ContentType = "image/gif";
        } else if (attachmentType.equals(".doc")) {
            ContentType = "application/msword";
        } else if (attachmentType.equals(".docx")) {
            ContentType = "application/vnd.openxmlformats-officedocument.wordprocessingml

.document";
        } else if (attachmentType.equals(".xls")) {
            ContentType = "application/vnd.ms-excel";
        } else if (attachmentType.equals(".xlsx")) {
            ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        } else if (attachmentType.equals(".zip")) {
            ContentType = "application/zip";
        }

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);

        CreateRequest createRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse createResponse = rallyApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            String attachmentContentOID = createResponse.getObject().get("_ref").getAsString();

            JsonObject attachment = new JsonObject();
            attachment.addProperty("TestCase", "/testcase/" + testCaseId);
            attachment.addProperty("Content", attachmentContentOID);
            attachment.addProperty("Name", filePath.substring(filePath.lastIndexOf('/') + 1));
            attachment.addProperty("Description", "Attachment for TestCase " + testCaseId);
            attachment.addProperty("ContentType", ContentType);

            CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
            CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);

            if (attachmentResponse.wasSuccessful()) {
                logger.info("Successfully attached file " + filePath + " to Rally TestCase.");
                return attachmentResponse.getObject().get("_ref").getAsString();
            } else {
                logger.error("Failed to attach file " + filePath + " to Rally TestCase.");
                return null;
            }
        } else {
            logger.error("Failed to create attachment content in Rally.");
            return null;
        }
    }

    public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, List<String> fileAttachmentPaths, List<String> embeddedAttachmentPaths) {
        for (JiraTestStep jiraTestStep : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseOID);
                newTestStep.addProperty("StepIndex", jiraTestStep.getIndex());
                newTestStep.addProperty("Input", jiraTestStep.getInput());
                newTestStep.addProperty("ExpectedResult", jiraTestStep.getExpectedResult());

                // Add attachments to the ExpectedResult or Input as needed
                if (fileAttachmentPaths != null && !fileAttachmentPaths.isEmpty()) {
                    for (String filePath : fileAttachmentPaths) {
                        String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                        if (attachmentOID != null) {
                            newTestStep.addProperty("ExpectedResult", newTestStep.get("ExpectedResult").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                        }
                    }
                }

                if (embeddedAttachmentPaths != null && !embeddedAttachmentPaths.isEmpty()) {
                    for (String embeddedPath : embeddedAttachmentPaths) {
                        String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, embeddedPath);
                        if (attachmentOID != null) {
                            newTestStep.addProperty("Input", newTestStep.get("Input").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                        }
                    }
                }

                CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
                CreateResponse createResponse = rallyApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    logger.info("Successfully created test step in Rally for TestCase: " + rallyTestCaseOID);
                } else {
                    logger.error("Failed to create test step in Rally: " + createResponse.getErrors());
                }
            } catch (IOException e) {
                logger.error("Exception occurred while creating test step in Rally", e);
            }
        }
    }
}
```

### Updated `RunnerClass`

This class coordinates the entire process, ensuring that attachments are correctly downloaded and then embedded in the appropriate fields during test step creation.

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;

public class RunnerClass {

    private static final Logger logger = LogManager.getLogger();

    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

        for (String key : testcaseKeys) {
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            // Download and attach testcase level attachments
            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

            if (rallyTestcaseOID != null) {
                if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                    rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                    Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
                }
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                break;
            }

            // Handle Test Step Attachments
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();

            for (JsonElement element : stepsArray) {
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);
            }

            rallyOperation.migrateTestStepsWithAttachments(rallyTestcaseOID, testSteps, rallyRestApi, fileAttachmentDownloadPathsTestStepLevel, embeddedAttachmentDownloadPathsTestStepLevel);
        }
    }
}
```

### Key Points:

- **Embedding Attachments**: Attachments are now correctly embedded in the `ExpectedResult` or `Input` fields in the exact format you specified.
- **Test Case vs. Test Step**: The class ensures that test case level attachments remain at the test case level, while test step level attachments are embedded within the specific test steps.
- **Final Format**: The `ExpectedResult` or `Input` fields will contain the text along with the embedded attachment URLs in the format:
  ```json
  "ExpectedResult": "This is the expected result with screenshot <img src='https://rally1.rallydev.com/slm/attachment/{{attachmentOID}}/content'/>"
  ```

This should meet your requirements precisely. Let me know if any further adjustments are needed!
