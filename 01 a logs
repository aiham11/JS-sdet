package com.optum.coe.automation.rally;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.ParseException;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

public class JiraOperation {
    private String jiraBaseURL;
    private String jiraApiKey;
    private String jiraProjectKey;
    private String max_chunk;
    private String tcFileAttachmentDownloadLocation;
    private static String tsFileAttachmentDownloadLocation;
    private static final Logger logger = LogManager.getLogger();

    public JiraOperation() {
        jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        max_chunk = ConfigLoader.getConfigValue("MAX_VALUE_CHUNK");
        tcFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_CASE_FILE_ATTACHMENT_LOCATION");
        tsFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");
        logger.info("Jira values for the project key " + jiraProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"),
                "Below are the values assigned from rally_migration_config.properties file. \nJira Base URL - "
                        + jiraBaseURL + "\nJira Project Key " + jiraProjectKey + "\nMax Chunk value - " + max_chunk
                        + "\nTest Case File Attachment Download location - " + tcFileAttachmentDownloadLocation
                        + "\nTest Step File Attachment location - " + tsFileAttachmentDownloadLocation);
    }

    public ArrayList<String> getJiraNonMigratedTestcaseKeys() {
        ArrayList<String> testCaseKeys = new ArrayList<>();
        String encodedKey = null;
        try {
            encodedKey = java.net.URLEncoder.encode(
                    "projectKey = " + jiraProjectKey
                            + " AND \"Migrate Test to Rally\" = true AND \"TestCase Migrated\" = false",
                    java.nio.charset.StandardCharsets.UTF_8.toString());
        } catch (Exception e) {
            logger.error("Error while encoding a part of URL ", e);
            return testCaseKeys;
        }

        String url = jiraBaseURL + "/rest/atm/1.0/testcase/search?fields=key&maxResults=" + max_chunk + "&query="
                + encodedKey;
        logger.info("String URL to get non-migrated testcase keys from Jira: " + url);

        HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
        if (response != null) {
            String result = null;
            try {
                result = EntityUtils.toString(response);
                if (result == null || result.trim().isEmpty()) {
                    logger.error("Empty or null response received from Jira for non-migrated test case keys.");
                    return testCaseKeys;
                }
                JSONArray jsonArray = new JSONArray(result);
                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    String key = jsonObject.getString("key");
                    logger.info("Key retrieved: " + key);
                    testCaseKeys.add(key);
                }
            } catch (ParseException | IOException e) {
                logger.error("Error while parsing the JSON response ", e);
            }
        } else {
            logger.error("Response is NULL while retrieving non-migrated keys from Jira.");
        }
        return testCaseKeys;
    }

    // Other methods as in the previous implementation...
}














package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;

public class RunnerClass {

    // Logger Initialization for Runner Class
    private static final Logger logger = LogManager.getLogger();

    // Main method
    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();

        // Fetch Jira response
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

        if (testcaseKeys.isEmpty()) {
            logger.error("No non-migrated test case keys found. Exiting process.");
            return;
        }

        for (String key : testcaseKeys) {
            boolean rallyTestcaseCreationStatus = false;
            boolean rallyOverallTestStepAttachmentsStatus = false;
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            if (jiraTestcaseJson == null) {
                logger.error("Failed to retrieve test case details for key: " + jiraTestCase.getKey());
                continue; // Skip this test case and continue with the next one
            }

            // Download attachments from Jira for the TestCase level and TestStep level
            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            // Create Rally TestCase
            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

            if (rallyTestcaseOID != null) {
                rallyTestcaseCreationStatus = true;
            } else {
                logger.error("Test case is not created in Rally for the key " + jiraTestCase.getKey());
                continue; // Skip this test case if it couldn't be created
            }

            // List to store all attachment OIDs for referencing in TestSteps
            List<String> testcaseAttachmentOIDs = new ArrayList<>();

            // Attach files at the TestCase level
            if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                logger.info("Attachment paths are found for the TestCase level.");
                testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
                if (!testcaseAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                } else {
                    logger.error("The attachments for TestCase key " + jiraTestCase.getKey() + " are not uploaded to Rally.");
                    continue; // Skip further processing if attachments couldn't be uploaded
                }
            } else {
                logger.info("No Attachment path found for TestCase level.");
            }

            // Handle Test Step File Attachments and Embedded Attachments
            Map<Integer, List<String>> stepAttachmentOIDsMap = new HashMap<>();

            if (fileAttachmentDownloadPathsTestStepLevel != null && !fileAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step file attachments paths are found.");
                addAttachmentsToStepMap(jiraTestcaseJson, fileAttachmentDownloadPathsTestStepLevel, stepAttachmentOIDsMap, rallyTestcaseOID, rallyOperation);
            } else {
                logger.info("No file attachment paths found for Test Step level.");
            }

            if (embeddedAttachmentDownloadPathsTestStepLevel != null && !embeddedAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step embedded attachments paths are found.");
                addAttachmentsToStepMap(jiraTestcaseJson, embeddedAttachmentDownloadPathsTestStepLevel, stepAttachmentOIDsMap, rallyTestcaseOID, rallyOperation);
            } else {
                logger.info("No embedded attachment paths found for Test Step level.");
            }

            // Retrieve the steps and migrate them
            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();

            for (JsonElement element : stepsArray) {
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);
            }

            // Migrate Test Steps to Rally with their respective attachments
            rallyOperation.migrateTestSteps(rallyTestcaseOID, testSteps, rallyRestApi, stepAttachmentOIDsMap);

            // Logging the overall result
            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                logger.info("Rally TestCase creation and TestStep attachment upload completed successfully for key: " + jiraTestCase.getKey());
            } else {
                logger.error("Rally TestCase creation or TestStep attachment upload failed for key: " + jiraTestCase.getKey());
            }

            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                // Call method to update "TestCase Migrated" and "Test Folder Migrated" check boxes in Jira
                // jiraOperation.updateJiraTestCaseStatus(jiraTestCase.getKey());
            }
        }
    }

    private static void addAttachmentsToStepMap(JsonObject jiraTestcaseJson, List<String> attachmentPaths, Map<Integer, List<String>> stepAttachmentOIDsMap, String rallyTestcaseOID, RallyOperation rallyOperation) {
        List<String> attachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, attachmentPaths);
        Utils.deleteAttachmentFileFromLocal(attachmentPaths);
        if (!attachmentOIDs.isEmpty()) {
            // Assume that attachments belong to specific test steps based on their order or name
            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            for (int i = 0; i < stepsArray.size(); i++) {
                if (stepAttachmentOIDsMap.containsKey(i)) {
                    stepAttachmentOIDsMap.get(i).addAll(attachmentOIDs);
                } else {
                    stepAttachmentOIDsMap.put(i, new ArrayList<>(attachmentOIDs));
                }
            }
        } else {
            logger.error("Test Step attachments are not created in Rally for TestCase OID " + rallyTestcaseOID);
        }
    }
}
