To migrate file attachments from test steps in Jira directly to the test case level in Rally, we can create a method in the `RallyOperation` class. This method will handle downloading the attachments from Jira and then uploading them to the Rally test case. Hereâ€™s how to implement this method while keeping the rest of the class intact:

### Step 1: Create the method `migrateFileAttachmentsFromTestStepsToTestCase`

Add the following method to the `RallyOperation` class:

```java
public void migrateFileAttachmentsFromTestStepsToTestCase(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi) {
    if (rallyTestCaseOID == null || rallyTestCaseOID.isEmpty()) {
        logger.error("Rally TestCase ID is null or empty. Cannot migrate file attachments.");
        return;
    }

    for (JiraTestStep jiraTestStep : jiraTestSteps) {
        List<String> fileAttachments = jiraTestStep.getFileAttachments(); // Assuming there's a method to get file attachments for a step

        if (fileAttachments != null && !fileAttachments.isEmpty()) {
            for (String filePath : fileAttachments) {
                try {
                    // Upload each file attachment to the Rally test case
                    String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                    if (attachmentOID != null) {
                        logger.info("Successfully migrated attachment from Test Step to Test Case level for file: " + filePath);
                    } else {
                        logger.error("Failed to migrate attachment for file: " + filePath);
                    }
                } catch (IOException e) {
                    logger.error("IO Exception occurred while migrating file attachment from Test Step to Test Case level", e);
                }
            }
        }
    }
}
```

### Step 2: Adjust Your Existing Flow to Call the New Method

In your existing flow where you handle the migration of test steps, you can call this new method to handle file attachments at the test case level. For instance, after you have created the Rally test case, you can invoke this method:

```java
// Assuming rallyTestCaseOID and rallyApi have been initialized
rallyOperation.migrateFileAttachmentsFromTestStepsToTestCase(rallyTestCaseOID, testSteps, rallyRestApi);
```

### Full Updated Class Example

Here's how the full class might look with the new method included:

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;
    private static final Logger logger = LogManager.getLogger();

    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
    }

    // Existing methods...

    public void migrateFileAttachmentsFromTestStepsToTestCase(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi) {
        if (rallyTestCaseOID == null || rallyTestCaseOID.isEmpty()) {
            logger.error("Rally TestCase ID is null or empty. Cannot migrate file attachments.");
            return;
        }

        for (JiraTestStep jiraTestStep : jiraTestSteps) {
            List<String> fileAttachments = jiraTestStep.getFileAttachments(); // Assuming there's a method to get file attachments for a step

            if (fileAttachments != null && !fileAttachments.isEmpty()) {
                for (String filePath : fileAttachments) {
                    try {
                        // Upload each file attachment to the Rally test case
                        String attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                        if (attachmentOID != null) {
                            logger.info("Successfully migrated attachment from Test Step to Test Case level for file: " + filePath);
                        } else {
                            logger.error("Failed to migrate attachment for file: " + filePath);
                        }
                    } catch (IOException e) {
                        logger.error("IO Exception occurred while migrating file attachment from Test Step to Test Case level", e);
                    }
                }
            }
        }
    }

    // Existing methods...
}
```

### Notes:

- Ensure that `JiraTestStep` class has a method to retrieve file attachments. This could be `getFileAttachments()` or similar.
- This method assumes the attachments should be directly uploaded to the test case without any additional processing or logic. Adjust accordingly if specific rules apply.
  
This implementation should integrate seamlessly with your current setup and provide the functionality you requested while maintaining the existing class structure.
