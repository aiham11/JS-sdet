  import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, Map<Integer, List<String>> embeddedAttachmentsMap) {
    Set<String> processedAttachments = new HashSet<>();

    for (JiraTestStep jiraTestStep : jiraTestSteps) {
        System.out.println("Printing the Jira test steps: " + jiraTestStep);
        try {
            JsonObject newTestStep = new JsonObject();
            newTestStep.addProperty("TestCase", rallyTestCaseOID);
            newTestStep.addProperty("StepIndex", jiraTestStep.getIndex() + 1);  // Adjust the index to start from 1

            // Combine "Step" and "Test Data" fields into the "Input" field in Rally
            String inputField = cleanText((jiraTestStep.getStep() != null ? jiraTestStep.getStep() : "") +
                                (jiraTestStep.getTestData() != null ? "\n" + jiraTestStep.getTestData() : ""));
            
            // Map "Expected Result" field from Jira directly to Rally's "Expected Result" after cleaning the text
            String expectedResultField = cleanText(jiraTestStep.getExpectedResult());

            // Handle Input field if it exceeds 2048 characters
            if (inputField != null && inputField.length() > 2048) {
                logger.warn("Input field length exceeds 2048 characters. Saving content to file and uploading it as an attachment.");
                String filePath = saveToFile("Input", jiraTestStep.getIndex(), inputField);
                String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                String attachmentOID = extractOID(attachmentURL);
                if (attachmentOID != null) {
                    newTestStep.addProperty("Input", "<a href='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'>Input Content</a>");
                }
            } else {
                newTestStep.addProperty("Input", inputField);
            }

            // Handle Expected Result field if it exceeds 2048 characters
            if (expectedResultField != null && expectedResultField.length() > 2048) {
                logger.warn("Expected result field length exceeds 2048 characters. Saving content to file and uploading it as an attachment.");
                String filePath = saveToFile("ExpectedResult", jiraTestStep.getIndex(), expectedResultField);
                String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                String attachmentOID = extractOID(attachmentURL);
                if (attachmentOID != null) {
                    newTestStep.addProperty("ExpectedResult", "<a href='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'>Expected Result Content</a>");
                }
            } else {
                newTestStep.addProperty("ExpectedResult", expectedResultField);
            }

            // Handle embedded attachments specific to this test step (unchanged code)
            // ...

            CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
            CreateResponse createResponse = rallyApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                String testStepURL = createResponse.getObject().get("_ref").getAsString();
                String testStepOID = extractOID(testStepURL);
                logger.info("Successfully created test step in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
            } else {
                String[] errors = createResponse.getErrors();
                logger.error("Failed to create test step in Rally: " + String.join(", ", errors));
            }
        } catch (Exception e) {
            logger.error("Error processing Jira test step: " + jiraTestStep.getIndex(), e);
        }
    }
}

private String saveToFile(String fieldType, int stepIndex, String content) throws IOException {
    // Define the file path and name
    String fileName = fieldType + "_Step_" + stepIndex + ".txt";
    String filePath = "your/local/path/" + fileName;

    // Write the content to a file
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
        writer.write(content);
    }

    logger.info("Saved " + fieldType + " content to file: " + filePath);
    return filePath;
}

private String attachFileToRallyTestCase(RallyRestApi rallyApi, String rallyTestCaseOID, String filePath) {
    // Your existing method for attaching files to a Rally test case
    // ...
    return "attachment URL"; // Replace with the actual URL returned from the attachment method
}
