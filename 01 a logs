package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;

public class RunnerClass {

    private static final Logger logger = LogManager.getLogger();

    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        String testStepFileAttachmentLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();
		boolean rallyTestcaseCreationStatus  ,rallyOverallTestCaseAttachmentsStatus  ,jiraDownloadTCFileAttachmentStatus  ,jiraDownloadTSFileAttachmentStatus ,jiraDownloadTSEmbeddedAttachmentStatus ,jiraOverallAttachmentdownloadStatus  ;
		String rallyTestcaseOID ;
		
        for (String key : testcaseKeys) {
        	 rallyTestcaseCreationStatus = false;
			 rallyOverallTestCaseAttachmentsStatus = false;
			 jiraDownloadTCFileAttachmentStatus = false;
			 jiraDownloadTSFileAttachmentStatus = false;
			 jiraDownloadTSEmbeddedAttachmentStatus = false;
			 jiraOverallAttachmentdownloadStatus = false;
			 rallyTestcaseOID = null;
        	
        	
        	
        	
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
  
            RallyOperation rallyOperation = new RallyOperation();
            
            
        	List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
			jiraDownloadTCFileAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(fileAttachmentDownloadPathsTestcaseLevel); // This call will return "error" string during failure OR "true" boolean when no attachments are found OR "true" boolean when attachments are downloaded successfully OR "false" for any cases
			List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
			jiraDownloadTSFileAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(fileAttachmentDownloadPathsTestStepLevel); // This call will return "error" string during failure OR "true" boolean when no attachments are found OR "true" boolean when attachments are downloaded successfully OR "false" for any cases
			List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");
			jiraDownloadTSEmbeddedAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(embeddedAttachmentDownloadPathsTestStepLevel); // This call will return "error" string during failure OR "true" boolean when no attachments are found OR "true" boolean when attachments are downloaded successfully OR "false" for any cases
			
			if ((jiraDownloadTCFileAttachmentStatus) && (jiraDownloadTSFileAttachmentStatus) && (jiraDownloadTSEmbeddedAttachmentStatus)) {
				jiraOverallAttachmentdownloadStatus = true; // This boolean value is used for over all validation	to mark "Testcase Migrated" check box in Jira
				rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

			
			} else {
				
				logger.error("Error while downloading the attachements from Jira to Local while processing " + jiraTestCase.getKey() + "; boolean status are below\n Download testcase file attachments - " + jiraDownloadTCFileAttachmentStatus
						+ "\nDownload teststep file attachments - " + jiraDownloadTSFileAttachmentStatus
						+ "\nDownload testsetp embedded attachments - " + jiraDownloadTSEmbeddedAttachmentStatus);
				return;
				
			}

     
         //   rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);
            
            
            
            
          // Check whether rally testcase is created successfully with available boolean values. The rallyTestcaseCreationStatus will be true for successful rally test case creation
         			if (rallyTestcaseOID != null ) {
         				rallyTestcaseCreationStatus = true; // This boolean value is used for over all validation	to mark "Testcase Migrated" check box in Jira
         				System.out.println("Rally testcase is successfully created with Jira equivalent testcase for the Jira testcase key " + jiraTestCase.getKey() );
         				logger.info("Rally testcase is successfully created with Jira equivalent testcase for the Jira testcase key " + jiraTestCase.getKey());
         			} else { // If testcase is not created in Rally, then log the error and break the flow.
         				logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
         				return;	
         			}
         			
         			
         			/* If attachments are downloaded are successfully to Local, then advance to upload them to the corresponding testcase.
					 * Call attachFilesToRallyTestcase method for this action and return testcase attachment OID for further processing. If any attachment is not uploaded to the testcase, then it will return empty list
					 * Once the the file attachments are successfully upload to rally testcase, then delete the attachments from local.
					 * */
         			if ((fileAttachmentDownloadPathsTestcaseLevel != null) && (!fileAttachmentDownloadPathsTestcaseLevel.contains("error"))) {
						
						logger.info("Attachment paths are found in the list for testcase file attachments.");
						List<String> testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
						Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
						
						if (!testcaseAttachmentOIDs.isEmpty()) { // Check if testcase OID is created successfully 
							
							logger.info("Test atatchment OID is created successfully in Rally for the testcase "  + jiraTestCase.getKey());
							rallyOverallTestCaseAttachmentsStatus = true; // This boolean value is used for over all validation	to mark "Testcase Migrated" check box in Jira
						} else { // Throw error when test case is not created successfully in rally and break the flow.
							
							logger.error("The Jira testcase is not created in rally. Jira Testcase key is " + jiraTestCase.getKey()
							+ " is not created in rally");
							return;
						}
						/* If fileAttachmentDownloadPathsTestcaseLevel is empty then, no attachment URL is found 
						 * for the testcase key at testcase level*/	
					} else if (fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) { 
						
						logger.info("No Attachment URL found for Testcase level while processing the testcase " + jiraTestCase.getKey());
					} 


         			
    
            // Handle 	Test Step Attachments


            // Create a map to hold the embedded attachments for each step
            Map<Integer, List<String>> embeddedAttachmentsMap = new HashMap<Integer, List<String>>();
            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();
            


            for (int i = 0; i < stepsArray.size(); i++) {
                JsonElement element = stepsArray.get(i);
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);

                // Download and map embedded attachments for the current test step
                List<String> embeddedAttachmentPaths = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");
                if (!embeddedAttachmentPaths.isEmpty()) {
                    embeddedAttachmentsMap.put(i , embeddedAttachmentPaths);
                }
            }

            rallyOperation.migrateTestStepsWithAttachments(rallyTestcaseOID, testSteps, rallyRestApi, embeddedAttachmentsMap);
            rallyOperation.migrateFileAttachmentsFromTestStepsToTestCase(rallyTestcaseOID, testSteps, rallyRestApi, testStepFileAttachmentLocation);
            Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
            embeddedAttachmentsMap.values().forEach(Utils::deleteAttachmentFileFromLocal);
            
            
            if (jiraOverallAttachmentdownloadStatus == true && rallyTestcaseCreationStatus == true && rallyOverallTestCaseAttachmentsStatus == true  ) {
				
				System.out.println("OverAll Status: Rally Testcase is created successfully with required testcase level attachments");
				/*
				 * Needs to be added calling method to check "Testcase Migrated" and "Test Folder Migrated" the check box in Jira
				 */
		} 

 
            
            
            
        }
    }
}
