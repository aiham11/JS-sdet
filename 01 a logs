Jira to Rally Migration Documentation
Source Code Repository
    • Repository URL: GitLab - Jira to Rally Migration
Technology Stack
    • Programming Language: Java
    • Version Control: GitLab
    • Build Tool: Maven
        ◦ Refer to the POM.xml file for dependencies​(POM.xml).
    • IDE: Preferred IDEs include IntelliJ IDEA, Eclipse, or any Java-supporting IDE.
    • Additional Libraries:
        ◦ Apache HTTP Client for API calls​(POM.xml).
        ◦ Google Gson for JSON parsing​(POM.xml).
        ◦ Rally REST API​(POM.xml).
        ◦ Log4j for logging​(POM.xml).
Configuration File (rally_migration_config.properties)
Located in the project’s config folder, this file contains various configurations that need to be updated depending on the specific project and Rally service account details.
Jira Configuration:
    • JIRA_BASE_URL: The base URL of Jira (e.g., https://jira.healthcareit.net)
    • JIRA_PROJECT_KEY: The Jira project key (e.g., CC2 or RHPQA)
    • JIRA_CUSTOM_FIELDS: Custom fields used in Jira to be migrated​(rally_migration_config.…).
Rally Configuration:
    • RALLY_BASE_URL: The base URL for Rally (e.g., https://rally1.rallydev.com)
    • RALLY_API_KEY: Rally API Key for authentication​(rally_migration_config.…).
    • RALLY_PROJECT_REF: The Rally project reference ID​(rally_migration_config.…).
    • Note: Ensure service accounts and API tokens are valid and have the required permissions.
Jira to Rally Fields Mapping
Direct Field Mappings:
    • Name: Name in Jira → Name in Rally
    • Preconditions: Preconditions in Jira → Preconditions in Rally
Indirect/Equivalent Field Mappings:
    • Labels: Labels in Jira → Tags in Rally​(JiraTestCase).
    • Custom Field Values: Custom fields in Jira → Notes in Rally.
Pre-Requisites
    • The Jira test case must have the "Migrate Test to Rally" field checked.
    • Test cases that have already been migrated should have the "TestCase Migrated" field set to true​(JiraOperation).
Folder and Test Case Creation in Rally
Test Folder Creation
    • Test folders from Jira are created in Rally following the same folder hierarchy​(Utils).
    • If the folder doesn’t exist in Rally, the process will create the necessary folder structure​(Utils).
Test Case Creation
    • Test cases are created in Rally using the createRallyTestcase method​(RunnerClass).
    • If any error occurs during test case creation, the process logs the error and aborts further execution.
Test Step and Attachment Migration
Test Step Creation
    • Test steps are created in Rally using the migrateTestStepsWithAttachments method​(RunnerClass).
    • The test script type (STEP_BY_STEP, BDD, or PLAIN_TEXT) is identified, and the steps are migrated accordingly​(RunnerClass)​(JiraOperation).
Attachment Migration
Test Case File Attachments:
    • Attachments at the test case level are downloaded and saved locally following the naming convention defined in TEST_CASE_FILE_ATTACHMENT_LOCATION​(JiraOperation).
Test Step File Attachments:
    • Test step file attachments are downloaded using the method in the Utils class and uploaded to Rally​(Utils). Attachments are named using the format TS_<Test_Step_Number>_<AttachmentNumber>_<AttachmentName>​(Utils).
Embedded Attachments:
    • Embedded attachments in Jira are extracted from description, testData, and expectedResult fields and uploaded to Rally​(JiraTestStep)​(Utils). They are referenced in the respective fields in Rally as <img src='https://rally1.rallydev.com/slm/attachment/{{attachmentOID}}/content'/>​(RunnerClass).
Rally Limitations and Alternate Solutions
    • Text Area Length: Rally imposes a 2048-character limit on text areas. Text that exceeds this limit should be truncated or handled appropriately:
      
      The Rally 2048-character limit on text areas (such as Description, Preconditions, or ExpectedResult) can be handled using the following strategies based on the implementation:
    1. Truncate Excess Text: The text exceeding the 2048-character limit can be truncated during migration. Only the first 2048 characters are uploaded to Rally, and the rest is either discarded or logged for review. This ensures the migration process does not fail due to text length violations.
    2. Storing Overflow Text as an Attachment:
        ◦ Any text beyond the 2048-character limit is saved in a separate file, which is uploaded as an attachment to the test case or test step in Rally.
        ◦ The migration tool generates a text file that contains the overflow content, and the file is attached to the respective test case or test step in Rally. This way, all content is preserved, even if not directly in the Rally text fields.
       For example, in the rally_migration_config.properties, there is a reference to handling excess characters:
       properties
       Copy code
       TEST_STEP_STRING_TO_HTML_LOCATION=Attachments//TestStep_Chars_Exceed
       This indicates that excess text from test steps might be converted to an HTML or text file and saved in a specified folder, then uploaded as an attachment to Rally​(rally_migration_config.…)​(Utils).
    3. Error Logging:
        ◦ The process can also log a warning or error message if a test case exceeds the limit. This message can include details of the test case so that teams can manually handle the long text in Rally post-migration.
        ◦ Alternatively, the migration script could flag these cases for manual review by updating a field or adding a tag like TextOverflow to the migrated test cases.
The exact approach depends on the use case. If it's critical to preserve all text, the attachment approach would be most appropriate. If the content is not critical, truncation might be acceptable.
    • 
      ​
    • Sensitive IDs: Information like Tax IDs or SSNs should not be included in test case migrations due to security concerns primarily managed by:
    1. Identification of Sensitive Data:
        ◦ In the Utils class, a method called findIfLimitedWordsArePresent is used to scan the test step input fields (description, test data, expected result) for patterns resembling sensitive data such as Tax IDs and SSNs. The method uses regular expressions to detect a 9-digit number associated with these keywords:
            ▪ Example: "SSN" or "Tax Id" followed by a 9-digit number​(Utils).
    2. Redaction and Special Handling:
        ◦ If sensitive data like SSNs or Tax IDs are detected, the implementation avoids directly placing this information into Rally's text fields. Instead, the sensitive data is moved into an HTML file, which is then attached to the test case. The test step field in Rally will contain a note indicating that sensitive information has been handled separately due to security concerns.
            ▪ For example, the note might be:
              
              "Jira To Rally Migration Automation Notes: During Jira to Rally migration, This teststep input detail has been attached as an HTML file at testcase level due to sensitive information like TAX ID, SSN."
              This approach ensures that the sensitive information is not directly stored in Rally’s text fields but still available as an attachment​(Utils)​(Utils).
    3. Logging and Notifications:
        ◦ The system logs a message when sensitive information is detected, including the specific type of sensitive data (e.g., SSN or Tax ID), and includes relevant details for tracking and auditing​(Utils).
    • 





    • Concurrency Issues: Use retry blocks when handling Rally API concurrency limitations​
Hardcoded Areas
    • Custom field values for projects like CC2 are hardcoded in the implementation and need to be reviewed when moving to new projects​(rally_migration_config.…).
Triage: RallyMigrateNeedFix
    • Use the RallyMigrateNeedFix flag to indicate test cases that require further attention before finalizing migration​(rally_migration_config.…).
Out of Scope
    • Jira Test Execution Details: Test execution results and details from Jira are not migrated.
    • User Stories: Mapping user stories between Jira and Rally is out of scope.
Sample Execution and Screenshots
    • Ensure to capture the execution process and take screenshots at different stages of the migration, including the configuration setup, test case migration, and validation in Rally.
Rally Points of Contact
    • Yanicke, Steven
    • Van Quakebeke, Joseph A
