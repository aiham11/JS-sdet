package com.optum.coe.automation.rally;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.DeleteRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.DeleteResponse;

public class RallyOperation {

	// Initialization of the class member variables. This section can be updated in future if more member variables are added during integration if needed. 
	private String rallyBaseURL;
	private String rallyApiKey;
	private String rallyProjectKey;
	private String rallyUser;
	private static String[] CFList;
	private static String key;
	private String testStepImgLocation;
	private static String attachmentURL;
	private static String tcFileAttachmentDownloadLocation;

	
	// Logger Initialization for RallyOperation Class
	private static final Logger logger = LogManager.getLogger();
	
	/* A Constructor loads the value from .properties file. These value will be loaded as soon as a object is created for this class.
	 * Rally Base URL, Rally API Key, Rally Project Reference, Rally user are loaded from .properties file */
	
	public RallyOperation() {
	
		rallyBaseURL=ConfigLoader.getConfigValue("RALLY_BASE_URL");
		rallyApiKey=ConfigLoader.getConfigValue("RALLY_API_KEY");
		rallyProjectKey=ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
		tcFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_CASE_FILE_ATTACHMENT_LOCATION");
		rallyUser=ConfigLoader.getConfigValue("RALLY_USER_REF");
		CFList=ConfigLoader.getConfigValue("JIRA_CUSTOM_FIELDS").split(",");
		testStepImgLocation=ConfigLoader.getConfigValue("TEST_STEP_STRING_TO_HTML_LOCATION");
		logger.info("Rally values for the project key " + rallyProjectKey +" are assiged from rally_migration_config.properties file");
		logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);

	}
	
	
	/* A method which handles below major functionalities
	 * 1. Transform the Jira Testcase details to Rally Test variable
	 * 2. Check if the Jira folder structure is available in Rally
	 *      a. If folder structure is not available in rally, then create the same Jira folder structure in rally for the testcase 
	 *      b. If folder structure is available in rally, no action is required 
	 * 3. Create the testcase
	 * 4. Log the testcase OID to the log file; This OID will be used while integrating TestStep, Attachments implementation for the testcase
	 * 5. Returns a boolean value as true for a successful testcase creation in rally, else returns false */
	
	
	public String createRallyTestcase(JsonObject jiraJson) throws IOException, InterruptedException  {
		
		List<String> htmlTCFilePathObjectiveField = new ArrayList<String>();
		//boolean status = false;
		String rallyTestCaseOID = null;
		JsonObject testFolderData = null;
		// Create JSON object for rally Json and add rally project reference key
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);
        
        // Create JSON object for testcase Json to add the rally testcase property
        JsonObject testCase = new JsonObject();
       
        // Get testcase name from Jira Json body and add it to rally testcase as a property
        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira"); // Give a default value if no name is found in Jira Json body
        }

        // Add method as Manual to rally testcase as a property
        testCase.addProperty("Method", "Manual");

        // Add priority value from Jira Json body to rally testcase as a property
        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("High")) {
                testCase.addProperty("Priority", "Critical");
            }
            else if (priority.equalsIgnoreCase("Normal")) {
            	testCase.addProperty("Priority", "Important");
            }
			else if (priority.equalsIgnoreCase("Low")) {
            	testCase.addProperty("Priority", "Useful");
            }
            else {
                testCase.addProperty("Priority", "Useful");
            }
        }

        // Add owner from config file to the rally testcase as a property
        testCase.addProperty("Owner", "/user/" + rallyUser);

        // Add status from Jira Json and add to the rally testcase as a property 
        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false); // default value
        }

        // Add Custom Fields to Rally
        String NstrValue;
		try {
			NstrValue = createCFNotes(jiraJson);
	        testCase.addProperty("Notes", NstrValue);
	        logger.info("Test case Custom fields value retrieved.");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("Failed to retrieve Custom fields value.");
		}
        
        // Add Automation Status
        String aStatus;
		try {
			aStatus = createAutostatus(jiraJson);
	        testCase.addProperty("c_AutomationStatus", aStatus);
			logger.info("Test case Automation Status value retrieved.");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("Failed to retrieve Automation Status value.");
		}
        
        // Add TC Objective
        String RTCObj;
		try {
			RTCObj = createTCObjectives(jiraJson);
			if(RTCObj != null) {
				if(RTCObj.length() < 32760) {
			        testCase.addProperty("Objective",RTCObj);
					logger.info("Test case Objective value retrieved.");
				}else {
					Utils.createFolderIfNotExists(tcFileAttachmentDownloadLocation);
					String objFilenameObj = "TC_Char_limitation_Objective.html";
                	String fileLocationinstring = tcFileAttachmentDownloadLocation + "/" + objFilenameObj ;
                	htmlTCFilePathObjectiveField.add(fileLocationinstring);
                	Utils.textToHtmlFile(RTCObj, fileLocationinstring);
       		     	String RTCObjtext = "Jira to Rally Migration Notes : Testcase objective length is greater than Rally limit, added it as an attachment, file name is: " + objFilenameObj;
       		     	testCase.addProperty("Objective",RTCObjtext);
					logger.info("Testcase objective length is greater than Rally limit, added it as an attachment, file name is: " + objFilenameObj);
			    	}			
				}	
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("Failed to retrieve Objectives value.");
		}

        // Add TC Pre-Conditions
        String RTCpc;
		try {
			RTCpc = createTCPreConditions(jiraJson);
	        testCase.addProperty("PreConditions",RTCpc);
			logger.info("Test case Pre-conditions value retrieved.");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("Failed to retrieve Pre-conditions value.");
		}
        
        // Add Estimated Time 
        String esTime;
		try {
			esTime = createEstimatedTime(jiraJson);
	        testCase.addProperty("c_ExpectedTestDuration", esTime);
			logger.info("Test case Estimated time value retrieved.");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("Failed to retrieve Estimated-time-conditions value.");
		}
        
        // Add tags 
		 // Initialize Rally API
        RallyRestApi restApi = null;
		try {
			restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
		} catch (URISyntaxException e) {
			logger.error("URI Sytntax error for the URL " + rallyBaseURL + ". Please check the URL." , e);
		}
        restApi.setApplicationName("CreateTestCaseApp");
		 JsonArray labelsArray = jiraJson.getAsJsonArray("labels");
	        JsonArray tagsArray = new JsonArray();
	        if (labelsArray != null) {
	            for (JsonElement label : labelsArray) {
	                JsonObject tagObject = Utils.findOrCreateTag(restApi, label.getAsString());
	                if (tagObject != null) {
	                    JsonObject tagRefObject = new JsonObject();
	                    tagRefObject.addProperty("_ref", tagObject.get("_ref").getAsString());
	                    tagsArray.add(tagRefObject);
	                }
	            }
	        }
	        testCase.add("Tags", tagsArray);

	    Set<String> folderCheck = jiraJson.keySet(); 
	    if(folderCheck.contains("folder")) {
	        // Get folder hierarchy from JIRA response
	        String folderPath = jiraJson.get("folder").getAsString();
	        String[] folderHierarchy = folderPath.split("/");

	        // Call a Util method to create test folder based on folder hierarchy
	        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey , rallyBaseURL, rallyApiKey);
	        if (testFolder == null) {	
	        	logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
	        	return rallyTestCaseOID;// Exit the method or handle accordingly
	        } else logger.info("Folder " + folderPath + " is  created successfully in Rally");
	        
	        // Add TestFolder to the test case
	        rallyJson.add("TestFolder", testFolder);
	    	
	    }
	    


        // Add the testCase object to the rallyJson
        rallyJson.add("testCase", testCase);

        // Save the transformed JSON to a variable
        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

		try {
			restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
		} catch (URISyntaxException e) {
			logger.error("URI Sytntax error for the URL " + rallyBaseURL + ". Please check the URL." , e);
		}
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        // Extract values from JSON:
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        if(folderCheck.contains("folder")) {
        	testFolderData = jsonData.getAsJsonObject("TestFolder"); 
        }

        try {
            // Create a new test case
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());
            newTestCase.addProperty("Notes", testCaseData.get("Notes").getAsString());
            if(testCaseData.has("Objective")){
            	newTestCase.addProperty("Objective", testCaseData.get("Objective").getAsString());
            }
            if(testCaseData.has("PreConditions")){
            	newTestCase.addProperty("PreConditions", testCaseData.get("PreConditions").getAsString());
            }
            if((ConfigLoader.getConfigValue("JIRA_PROJECT_KEY")).equalsIgnoreCase("CC2") && (testCaseData.has("c_AutomationStatus"))){
                newTestCase.addProperty("c_AutomationStatus", testCaseData.get("c_AutomationStatus").getAsString());
            }
            if(testCaseData.has("c_ExpectedTestDuration")){
                newTestCase.addProperty("c_ExpectedTestDuration",testCaseData.get("c_ExpectedTestDuration").getAsString());
            }

            // Add Tags to the test case from the JSON file
            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            if(folderCheck.contains("folder")) {
            // Add TestFolder to the test case from the JSON file
            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);
            }
            int createRallyTestCaseTry = 0;
            CreateRequest createRequest = null;
            CreateResponse createResponse = null;
            while (createRallyTestCaseTry <= 5) {
            createRequest = new CreateRequest("testcase", newTestCase);
            createResponse = null;
			try {
				createResponse = restApi.create(createRequest);
				break;
			} catch (IOException e) {
				logger.info("IO exception during create request." , e);
				if (createRallyTestCaseTry == 5) {
					logger.error("Tried retry for 5 times, but still failing during testcase creation in rally");
					break;
				}
				logger.info("Retrying " + createRallyTestCaseTry + " time");
				createRallyTestCaseTry++;
			}
            }
            if (createResponse.wasSuccessful()) {
            	//status = true;
            	rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
            	logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());
            	
            	// Adding Objective attachment to the TC's if exists
            	if(htmlTCFilePathObjectiveField.size() > 0) {
            		List<String> htmlFielAttachmentOIDs = null;
		        	htmlFielAttachmentOIDs = attachFilestoRallyTestcase(rallyTestCaseOID , htmlTCFilePathObjectiveField);
			        Utils.deleteAttachmentFileFromLocal(htmlTCFilePathObjectiveField);
			        if(htmlFielAttachmentOIDs.isEmpty()) {
			        	logger.error("Error while attaching the html attachment file to testcase objective for TC's " + rallyTestCaseOID);
			        	rallyTestCaseOID = null;
			        	return rallyTestCaseOID;
			        }
            	}
            } else {
            	logger.error("Error occurred creating test case");	
                for (String error : createResponse.getErrors()) {
                	logger.error(error);
                }
            }
            
            
        } finally {
            // Release resources
            try {
				restApi.close();
				logger.info("Closed rest api resource in finally block");
			} catch (IOException e) {
				logger.error("Error occurred while closing rest api resource at finally block" , e);
			}
            
        }
         return rallyTestCaseOID;   
    }
	
	public static String createTCObjectives (JsonObject jiraJson) throws Exception{
		Set<String> map = jiraJson.keySet();
		if (map.contains("objective")) {
			String jiraObj = jiraJson.get("objective").getAsString();
			return jiraObj;
		// System.out.println("jiraObj :" + jiraObj);
		}
		return null;
	}
	
	public static String createTCPreConditions (JsonObject jiraJson) throws Exception{
		Set<String> map = jiraJson.keySet();
		if (map.contains("precondition")) {
			String jiraPC = jiraJson.get("precondition").getAsString();
			return jiraPC;
		// System.out.println("jiraObj :" + jiraObj);
		}
		return null;
	}
	
	public static String createEstimatedTime (JsonObject jiraJson) throws Exception{
		Set<String> map = jiraJson.keySet();
		String estiTime = new String();
       	if (map.contains("estimatedTime"))
       	{
    		Integer millis = jiraJson.get("estimatedTime").getAsInt();
    		if(millis != null && millis != 0)	
    		{
    			estiTime = String.format("%02d.%02d", 
				    TimeUnit.MILLISECONDS.toHours(millis),
				    TimeUnit.MILLISECONDS.toMinutes(millis) - 
				    TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)));
    		}
       	}
		return estiTime;
	}
	
	public static String createCFNotes(JsonObject jiraJson) throws Exception{
		key=jiraJson.get("key").getAsString();
	    StringBuilder nString = new StringBuilder();
	    nString.append("Jira TC Created On: " + jiraJson.get("createdOn").getAsString() + "<br>");
	    nString.append("Jira TC ID: " + key + "<br>");
        String wUrl = JiraOperation.retrieveJWeblinks(key);
        if (wUrl.length() > 0)
        {
        	nString.append("Web URL: " + wUrl + "<br>");
        }
	    if (jiraJson.has("customFields")) 
	    {
	    	JsonObject CFields = (JsonObject) jiraJson.get("customFields");
	        Set<String> map = CFields.keySet();
	        for (String ele : CFList) {
	       	if (map.contains(ele))
	          	{
	          		nString.append(ele + ": " +  CFields.get(ele).getAsString() + "<br>");
	          	}
	        }
	    }
	    return (nString.toString());
	}
	
	public static String createAutostatus(JsonObject jiraJson) throws Exception{
        String c_AutomationStatus = new String();
	    if (jiraJson.has("customFields")) 
	    {
	    	JsonObject CFields = (JsonObject) jiraJson.get("customFields");
	        Set<String> map = CFields.keySet();
	        if (map.contains("Automation Status")) {
	        	String AutoStatus = CFields.get("Automation Status").getAsString();	
	            if (AutoStatus.equalsIgnoreCase("AutoBot Automated")) {
	                c_AutomationStatus = "Automated";
	            }
	            else if (AutoStatus.equalsIgnoreCase("AutoBot Blocker")) {
	                c_AutomationStatus = "To be Analyzed";
	            }
	            else if (AutoStatus.equalsIgnoreCase("AutoBot Inprogress")) {
	                c_AutomationStatus = "Under Development";
	            }
	            else if (AutoStatus.equalsIgnoreCase("Automated Review")) {
	                c_AutomationStatus = "Ready for Review";
	            }
	            else if (AutoStatus.equalsIgnoreCase("Automated Scheduled - P1")) {
	                c_AutomationStatus = "Approved";
	            }
	            else if (AutoStatus.equalsIgnoreCase("Automated Target - P2")) {
	                c_AutomationStatus = "Research for Automation";
	            }
	            else if (AutoStatus.equalsIgnoreCase("Automated Scheduled - P1")) {
	                c_AutomationStatus = "Can Not Automate";
	            }
	            else
	            {
	            	c_AutomationStatus = null;
	            }
	        }
	    }
		return c_AutomationStatus;
	}

	/* A method which is used to attach the files to rally testcase */
	
    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID , List<String> filePaths) throws InterruptedException {      	
    	String attachmentOID = null;
    	List<String> testcaseAttachmentOIDs = new ArrayList<String>(); // Initialize a list to get Attachment OIDs
    	RallyRestApi rallyApi = null; // Initialize rally api object
		try {
			rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
		} catch (URISyntaxException e) {
			logger.error("Rally Base URL has some syntax error.",e );
			testcaseAttachmentOIDs.clear();
			return testcaseAttachmentOIDs;		
		}
        try {
            for (String filePath : filePaths) {  // Loop through each local file path where file attachment resides and attach them using attachFileToRallyTestCase method
                try {
                	attachmentOID = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath);
                    if (attachmentOID != null) {
                        testcaseAttachmentOIDs.add(attachmentOID);
                        logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                    }
				} catch (IOException e) {
					testcaseAttachmentOIDs.clear();
					logger.error("File " + filePath + " is not attached to Rally due to IO exception.",e );
					return testcaseAttachmentOIDs;
				}
            }
        } finally {
            try {
				rallyApi.close(); // Close api resource
			} catch (IOException e) {
				logger.error("Ready API resource is not closed due to IO exception.",e );
				
			}
        }
    	return testcaseAttachmentOIDs; // return testcase attachment OID for further processing        
    }
	
    /* A method which is used to attach a specific file to rally testcase */
    
 	public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException, InterruptedException {
          if (testCaseId == null || testCaseId.isEmpty()) {
            logger.error("TestCase ID is null or empty. Cannot attach file: " + filePath);
            return null;
           }
          byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
          String encodedContent = Base64.getEncoder().encodeToString(fileContent);
          if (encodedContent.isEmpty()) {
        	  logger.info("The file " + filePath + " has zero byte file. Ignoring to attach it to rally testcase");
        	  return "zeroByteFile";
          }
          String contentType = Utils.determineContentType(filePath);
	       //Create the AttachmentContent
	       JsonObject attachmentContent = new JsonObject();
	       attachmentContent.addProperty("Content", encodedContent);
	       CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
	       CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
	       if (!attachmentContentResponse.wasSuccessful()) {
	           logger.error("Error creating AttachmentContent for file " + filePath + ": " + String.join(", ", attachmentContentResponse.getErrors()));
	           return null;
	       }
	       String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();
	       logger.info("AttachmentContentRef: " + attachmentContentRef);
	       if (attachmentContentRef == null || attachmentContentRef.isEmpty()) {
	            logger.error("AttachmentContentRef is null or empty for file " + filePath);
	            return null;
	       }
	       //Create the Attachment
	       JsonObject attachment = new JsonObject();
	       attachment.addProperty("Artifact", "/testcase/" + testCaseId); // Reference to the test case
	       attachment.addProperty("Content", attachmentContentRef);
	       attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
	       attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
	       attachment.addProperty("ContentType", contentType);
	       attachment.addProperty("Size", fileContent.length);
	       
	       int retryCnt = 5;
	       CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
	       while(retryCnt > 0) {
	    	   CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
	    	   if(attachmentResponse.wasSuccessful()) {
	    		    attachmentURL = attachmentResponse.getObject().get("_ref").getAsString();
	   	            logger.info("Attachment URL: " + attachmentURL);
	   	            return attachmentURL;
	    	   }
	    	   else if(!attachmentResponse.wasSuccessful()) {
               		String[] errors = attachmentResponse.getErrors();
               		if(Arrays.toString(errors).contains("Concurrency conflict:")) {
               			retryCnt--;
               			// logger.error("Error creating Attachment for file " + filePath + ": " + String.join(", ", attachmentResponse.getErrors()));
    		            logger.info("Retry Attachment creation.");
               		}
                	if (retryCnt == 1) {
                		logger.info("During attachment creation last retry, 2 seconds wait time is started");
                		Thread.sleep(2000);
                		logger.info("During attachment creation last retry, 2 seconds wait time is ended");
                		}
                	if (retryCnt == 0) {
                		logger.error("Error creating Attachment for file " + filePath + ": " + String.join(", ", attachmentResponse.getErrors()));
                		return null;
                	}
		        }
	       }
	    	   
	       // Log the attachment creation response	        
	        if (attachmentURL == null || attachmentURL.isEmpty()) {
	            logger.error("Attachment URL is null or empty after creation for file " + filePath);
	            return null;
	        }
	        return attachmentURL;
	    }
 	
 	// Modified migrateTestStepsWithAttachments method
    public boolean migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, Map<Integer, List<String>> embeddedAttachmentsMap, String jiraTestcaseId) throws URISyntaxException, IOException, InterruptedException {
    	RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
    	Set<String> processedAttachments = new HashSet<>();
    	String testStepOID = null;
    	String testStepURL = null;
    	int actualJiraTestStepIndex = 0;
    	JsonObject newTestStep;
    	String inputField;
    	String htmlFilePathInputField;
    	String htmlFilePathExpectedResult;
    	String filename;
    	String attachmentURL;
    	String attachmentOID;
    	String testStepInputValue;
    	boolean rallyTestStepCreationStatus = false;
    	boolean sensitiveCharFlagForInput;
    	boolean sensitiveCharFlagForExpectedResult;
    	List<String> htmlFilePaths = new ArrayList<String>();
    	Utils.createFolderIfNotExists(testStepImgLocation);   
    	
    	try {
    	for (JiraTestStep jiraTestStep : jiraTestSteps) {
            try {
            	sensitiveCharFlagForInput = false;
            	sensitiveCharFlagForExpectedResult = false;
            	rallyTestStepCreationStatus = false;
            	actualJiraTestStepIndex = jiraTestStep.getIndex() + 1;
            	newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseOID);
                newTestStep.addProperty("StepIndex", actualJiraTestStepIndex);  // Adjust the index to start from 1
                
                // Combine "Step" and "Test Data" fields into the "Input" field in Rally
                inputField = Utils.cleanText((jiraTestStep.getStep() != null ? "" + jiraTestStep.getStep() : "") +
                        (jiraTestStep.getTestData() != null ? "\n" + jiraTestStep.getTestData() : ""));
                
                sensitiveCharFlagForInput = Utils.findIfLimitedWordsArePresent(inputField);    
                
                if ((inputField != null) &&(inputField.length() > 2048 )) {
                 	logger.info("Test Step (Description/Input) field has more than 2048 chars");
                 	htmlFilePathInputField = testStepImgLocation + "//TS_" + actualJiraTestStepIndex + "_Char_limitation_InputDetails.html";
                 	Utils.textToHtmlFile(inputField, htmlFilePathInputField);
              	   	newTestStep.addProperty("Input", "Jira To Rally Migration Automation Notes: During Jira to Rally migration, This teststep input detail has been attached as html file at testcase level due to character limitation (2048 chars) in rally. File Name - TS_" + (jiraTestStep.getIndex() + 1) + "_Char_limitation_InputDetails.html." );
              	   	htmlFilePaths.add(htmlFilePathInputField);
                 }
                else if (sensitiveCharFlagForInput == true) {
               	 logger.info("Test Step (Description/Input) field has some sensitive contents like SSN, TAX ID");
                  	 htmlFilePathInputField = testStepImgLocation + "//TS_" + actualJiraTestStepIndex + "_Rally_limitation_InputDetails.html";
                  	 Utils.textToHtmlFile(inputField, htmlFilePathInputField);
               	 newTestStep.addProperty("Input", "Jira To Rally Migration Automation Notes: During Jira to Rally migration, This teststep input detail has been attached as html file at testcase level due to Rally limitation such as sensitive information like TAX ID,SSN. File Name - TS_" + (jiraTestStep.getIndex() + 1) + "_Rally_limitation_InputDetails.html." );
               	 htmlFilePaths.add(htmlFilePathInputField);
                }
                else {
                 	newTestStep.addProperty("Input", inputField ); 	
                }
                
                // Map "Expected Result" field from Jira directly to Rally's "Expected Result" after cleaning the text
                String expectedResultField = Utils.cleanText(jiraTestStep.getExpectedResult());
                if(expectedResultField ==  null) {
                	expectedResultField = "";
                }
                
                sensitiveCharFlagForExpectedResult = Utils.findIfLimitedWordsArePresent(expectedResultField);    
                
                if ((expectedResultField != null ) && (expectedResultField.length() > 2048)) {
                	logger.info("Test Step (ExpectedResult) field has more than 2048 chars");
                	htmlFilePathExpectedResult = testStepImgLocation + "//TS_" + actualJiraTestStepIndex + "_Char_limitation_ExpectedDetails.html";
                	Utils.textToHtmlFile(expectedResultField, htmlFilePathExpectedResult);
                	newTestStep.addProperty("ExpectedResult", "Jira To Rally Migration Automation Notes: During Jira to Rally migration, This teststep expected result detail has been attached as html file at testcase level due to character limitation (2048 chars) in rally. File Name - TS_" + (jiraTestStep.getIndex() + 1) + "_Char_limitation_ExpectedDetails.html.");
                	htmlFilePaths.add(htmlFilePathExpectedResult);
                }
                else if (sensitiveCharFlagForExpectedResult == true) {
                	logger.info("Test Step (ExpectedResult) field has some sensitive contents like SSN, TAX ID");
                	htmlFilePathExpectedResult = testStepImgLocation + "//TS_" + actualJiraTestStepIndex + "_Rally_limitation_ExpectedDetails.html";
                  	Utils.textToHtmlFile(expectedResultField, htmlFilePathExpectedResult);
               	   	newTestStep.addProperty("ExpectedResult", "Jira To Rally Migration Automation Notes: During Jira to Rally migration, This teststep input detail has been attached as html file at testcase level due to Rally limitation such as sensitive information like TAX ID,SSN. File Name - TS_" + (jiraTestStep.getIndex() + 1) + "_Rally_limitation_ExpectedDetails.html." );
               	   	htmlFilePaths.add(htmlFilePathExpectedResult);
                }
                else {
                	newTestStep.addProperty("ExpectedResult", expectedResultField);
                }
                
                List<String> stepEmbeddedAttachments = embeddedAttachmentsMap.get(jiraTestStep.getIndex());
				if ((inputField.isEmpty()) && (!expectedResultField.isEmpty())) {
					newTestStep.addProperty("Input", "Jira To Rally Migration Automation Notes: No Step or Test data detail is found for this teststep in Jira.");         	
				 } else if ((inputField.isEmpty()) && (expectedResultField.isEmpty()) 
						 && (stepEmbeddedAttachments == null || stepEmbeddedAttachments.isEmpty())) {
					 logger.info("No Test Steps are found for this testcase");
					 return rallyTestStepCreationStatus = true;
				 }
				

                // Handle embedded attachments specific to this test step
                if (stepEmbeddedAttachments != null && !stepEmbeddedAttachments.isEmpty()) {
                    logger.info("Embedded atatchments are found");
                	for (String embeddedPath : stepEmbeddedAttachments) {
                        if (!processedAttachments.contains(embeddedPath)) {
                            // Extract the filename from the full path
                            filename = embeddedPath.substring(embeddedPath.lastIndexOf("\\") + 1);
                            String[] attachmentParts = filename.split("_");
                            if (attachmentParts.length > 0) {
                                try {
                                    // Extract the step number from the first part of the filename
                                    int attachmentStepNumber = Integer.parseInt(attachmentParts[2]);
                                     // Check if this attachment corresponds to the current step
                                    if (attachmentStepNumber == actualJiraTestStepIndex) {  // Ensure the matching is correct
                                        attachmentURL = attachFileToRallyTestCase(rallyRestApi, rallyTestCaseOID, embeddedPath);
                                        attachmentOID = Utils.extractOID(attachmentURL);
                                        if (attachmentOID != null) {
                                            // Determine whether the attachment belongs to Input or ExpectedResult
                                            if (filename.contains("testData") || filename.contains("description")) {
                                                testStepInputValue = newTestStep.get("Input").getAsString();;
                                            	newTestStep.addProperty("Input", testStepInputValue + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                                                logger.info("Embedded Attachment added to Input field for Test Step " + actualJiraTestStepIndex + ": " + embeddedPath);
                                            } else if (filename.contains("expectedResult")) {
                                                newTestStep.addProperty("ExpectedResult", newTestStep.get("ExpectedResult").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                                                logger.info("Embedded Attachment added to Expected Result field for Test Step " + actualJiraTestStepIndex + ": " + embeddedPath);
                                            } else {
                                                logger.info("Embedded Attachment name does not contain a recognized field identifier (testData, description, expectedResult): " + embeddedPath);
                                            }
                                        }
                                        processedAttachments.add(embeddedPath);  // Mark this attachment as processed
                                    }
                                } catch (NumberFormatException e) {
                                    logger.error("Failed to parse step number from attachment name: " + filename, e);
                                    return rallyTestStepCreationStatus;
                                }
                            }
                        }
                    }
                } else {
                	
                	logger.info("No Embedded attachment is found at test step level for the jira testcase key " + rallyTestCaseOID);
                	
                }

                // Creating Test Step using the added test step json body
                
//                for (String fields : newTestStep.keySet()) {
//					JsonElement element =  newTestStep.getAsJsonObject(fields);
//					System.out.println(key + ":" + element);
//				}

				int retryCount = 5;
				CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep); 
				while (retryCount > 0) {
                CreateResponse createResponse = rallyRestApi.create(createRequest);
                if (createResponse.wasSuccessful()) {
                    testStepURL = createResponse.getObject().get("_ref").getAsString();
                    testStepOID = Utils.extractOID(testStepURL);
                    if (testStepOID != null)   {
                    	rallyTestStepCreationStatus = true;
                    	logger.info("Successfully created test step " + actualJiraTestStepIndex  + " in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
                    	break;
                    } else {
                    	return rallyTestStepCreationStatus;
                    }
                   
                } else {
                	String[] errors = createResponse.getErrors();
                	logger.error("Failed to create test step in Rally for the test step : " + actualJiraTestStepIndex + " ; TestcaseOID is " + rallyTestCaseOID + " ; Error is " + Arrays.toString(errors));
                	if (Arrays.toString(errors).contains("Concurrency conflict:")) {
                	retryCount--;
                	logger.info("Retry test step creation.");
                	if (retryCount == 1) {
                		logger.info("During test step creation last retry, 2 seconds wait time is started");
                		Thread.sleep(2000);
                		logger.info("During test step creation last retry, 2 seconds wait time is ended");
                		}
                	if (retryCount == 0) {
                		logger.error("Failed to create test step. all retry is done. Retry count is " + retryCount + " ; returning rallyTestStepCreationStatus as " + rallyTestStepCreationStatus);
                		return rallyTestStepCreationStatus;
                		}
                	
                	} 
                }
			 }
            
            
            } catch (IOException e) {
                logger.error("Exception occurred while creating test step in Rally", e);
                if (e.getMessage().contains("403 Forbidden")) {
                	JiraOperation.markCurrentJiraTestCaseRallyMigrateNeedFix(jiraTestcaseId);
                	logger.info("The Rally Migrate to Fix custom field in Jira has been marked for future analysis. 403 forbidden error could be due to sensitive word/data in test step fields as per the analysis so far. For example: Tax ID, SSN ID");
                	DeleteRequest deleteRequest = new DeleteRequest(rallyTestCaseOID);
                	DeleteResponse deleteResponse = rallyRestApi.delete(deleteRequest);
                	if (deleteResponse.wasSuccessful()) {
                		logger.info("The invalid testcase is being deleted successfully as Rally Migrate to Fix custom field in Jira has been marked for future analysis, Testcase OID is: " + rallyTestCaseOID );
                		rallyTestStepCreationStatus = true;
                	} else {
                		logger.error("The invalid testcase is NOT deleted successfully, Test case OID is : " + rallyTestCaseOID );
                	}
                	
                }
                return rallyTestStepCreationStatus;
            } 
        }
    	
    	if (htmlFilePaths.size() != 0) {
        	List<String> htmlFielAttachmentOIDs = null;
        	htmlFielAttachmentOIDs = attachFilestoRallyTestcase(rallyTestCaseOID , htmlFilePaths);
        	Utils.deleteAttachmentFileFromLocal(htmlFilePaths);
        	if(htmlFielAttachmentOIDs.isEmpty()) {
        		logger.error("Error while attaching the html attachment file to testcase level for step number " + actualJiraTestStepIndex);
        		return rallyTestStepCreationStatus;
        	}
    	}
    	
    }
    	finally {
    		if (rallyRestApi != null ) {
    			logger.info("Rally Api is closed at Test Step level");
    			rallyRestApi.close();
    		}
		}
    	
    	return rallyTestStepCreationStatus;
    }
 	
  
    public boolean migratePlainTextBDDFromJiraTestScriptToRallyTestStep(String rallyTestCaseOID, JsonObject jiraJson) throws InterruptedException, IOException {
    	
    	
    	JsonObject newTestStep;
    	String testStepURL;
    	String testStepOID;
    	boolean rallyTestStepCreationStatus = false;
    	RallyRestApi rallyRestApi = null;
    	try {
			rallyRestApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
			String plainTextDescription;
			if(jiraJson.getAsJsonObject("testScript").has("text")) {
	    		plainTextDescription = jiraJson.getAsJsonObject("testScript").get("text").getAsString();
	    	} else {
	    		plainTextDescription = "";
	    	}
			
	    	newTestStep = new JsonObject();
	        newTestStep.addProperty("TestCase", rallyTestCaseOID);
	        newTestStep.addProperty("StepIndex", 1);
	        newTestStep.addProperty("Input", plainTextDescription);
	        if (plainTextDescription.isEmpty()) {
	        	rallyTestStepCreationStatus = true;
	        	logger.info("No description is found at Plain Text or BDD at Test Script level");
	        	return rallyTestStepCreationStatus;
	        }

	        int retryCount = 5;
			CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep); 
			while (retryCount > 0) {
                
                CreateResponse createResponse = rallyRestApi.create(createRequest);
                if (createResponse.wasSuccessful()) {
                    testStepURL = createResponse.getObject().get("_ref").getAsString();
                    testStepOID = Utils.extractOID(testStepURL);
                    if (testStepOID != null)   {
                    	rallyTestStepCreationStatus = true;
                    	logger.info("Successfully created plain text description from Jira to Rally Test step for the Rally testStep OID " + testStepOID + " for TestCase: " + rallyTestCaseOID);
                    	break;
                    } else {
                    	return rallyTestStepCreationStatus;
                    }
                    
                    
                } else {
                	String[] errors = createResponse.getErrors();
                	logger.error("Failed to create test step in Rally for the test step 1 during PlainText from Jira to Rally Test step ; TestcaseOID is " + rallyTestCaseOID + " ; Error is " + Arrays.toString(errors));
                	retryCount--;
                	if (retryCount == 1) {
                		logger.info("During test step creation last retry, 2 seconds wait time is started");
                		Thread.sleep(2000);
                		logger.info("During test step creation last retry, 2 seconds wait time is ended");
                	}
                	if (retryCount == 0) {
                		logger.error("Failed to create test step. all retry is done. Retry count is " + retryCount + " ; returning rallyTestStepCreationStatus as " + rallyTestStepCreationStatus);
                		return rallyTestStepCreationStatus;
                	}
                	
                }
           
			 }
			 
	        
		} catch (URISyntaxException e) {
			logger.error("Exception occurred while creating test step in Rally", e);
			return rallyTestStepCreationStatus;
		} finally {
			if (rallyRestApi != null ) {
    			logger.info("Rally Api is closed at Test Script Level Plain text or BDD");
    			rallyRestApi.close();
    		}
		}
		return rallyTestStepCreationStatus;
    	
    }
    
    
    
    // migrate file attachments from test steps in Jira directly to the test case level in Rally,
    
    public void migrateFileAttachmentsFromTestStepsToTestCase(String rallyTestCaseOID, List<String> fileAttachmentPaths) throws URISyntaxException, InterruptedException {
    	RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
    	if (rallyTestCaseOID == null || rallyTestCaseOID.isEmpty()) {
            logger.error("Rally TestCase ID is null or empty. Cannot migrate file attachments.");
            return;
        }
        for (String filePath : fileAttachmentPaths) {
            File file = new File(filePath);
            if (file.getName().startsWith("TS_") && ((!file.getName().contains("_EmbbededFile_")))) {
                try {
                    // Attach the file to the Rally test case
                    String attachmentOID = attachFileToRallyTestCase(rallyRestApi, rallyTestCaseOID, filePath);
                    if (attachmentOID != null) {
                        logger.info("Successfully migrated attachment to Test Case level for file: " + filePath);
                    } else {
                        logger.error("Failed to migrate attachment for file: " + filePath);
                    }
                } catch (IOException e) {
                    logger.error("IO Exception occurred while migrating file attachment to Test Case level", e);
                }
            } else {
                logger.info("Skipped file " + filePath + " as it does not follow the naming convention.");
            }
        }
    } 	
}

