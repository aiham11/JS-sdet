package com.optum.coe.automation.rally;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class JiraOperation {
    private static final Logger logger = LogManager.getLogger();
    private final String jiraBaseURL;
    private final String jiraApiKey;
    private final String jiraProjectKey;
    private final String attachmentDownloadLocation;

    public JiraOperation() {
        jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_KEY");
        jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        attachmentDownloadLocation = ConfigLoader.getConfigValue("ATTACHMENT_DOWNLOAD_LOCATION");
        logger.info("Jira values for the project key " + jiraProjectKey + " are assigned from rally_migration_config.properties file");
        logger.info("Jira Project Key: " + jiraProjectKey + ", Max Chunk value: " + ConfigLoader.getConfigValue("MAX_CHUNK_VALUE")
                + ", Test Attachment Download location: " + attachmentDownloadLocation);
    }

    public List<String> getJiraNonMigratedTestcaseKeys() {
        List<String> keys = new ArrayList<>();
        String queryUrl = jiraBaseURL + "/rest/atm/1.0/testcase/search?fields=key&maxResults="
                + ConfigLoader.getConfigValue("MAX_CHUNK_VALUE")
                + "&query=projectKey+%3D+" + jiraProjectKey
                + "+AND+%22Migrate+Test+to+Rally%22+%3D+true+AND+%22TestCase+Migrated%22+%3D+false";
        HttpEntity entity = Utils.getJiraResponse(queryUrl, jiraApiKey);
        try {
            String jsonResponse = EntityUtils.toString(entity);
            JsonObject jsonObject = JsonParser.parseString(jsonResponse).getAsJsonObject();
            JsonArray results = jsonObject.getAsJsonArray("results");
            for (JsonElement result : results) {
                keys.add(result.getAsJsonObject().get("key").getAsString());
            }
        } catch (IOException e) {
            logger.error("Error occurred while retrieving Jira test case keys", e);
        }
        return keys;
    }

    public JsonObject getJiraTestCaseDetails(String key) {
        String queryUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + key;
        HttpEntity entity = Utils.getJiraResponse(queryUrl, jiraApiKey);
        try {
            String jsonResponse = EntityUtils.toString(entity);
            return JsonParser.parseString(jsonResponse).getAsJsonObject();
        } catch (IOException e) {
            logger.error("Failed to retrieve JIRA testcase details for the key " + key, e);
        }
        return null;
    }

    public List<JiraTestStep> getTestSteps(JsonObject jiraTestCaseDetails) {
        List<JiraTestStep> testSteps = new ArrayList<>();
        JsonObject testScript = jiraTestCaseDetails.getAsJsonObject("testScript");
        if (testScript != null && testScript.has("steps")) {
            JsonArray stepsArray = testScript.getAsJsonArray("steps");
            for (JsonElement stepElement : stepsArray) {
                JsonObject stepObject = stepElement.getAsJsonObject();
                JiraTestStep step = new JiraTestStep();
                step.setStepIndex(stepObject.get("index").getAsInt());
                step.setInput(stepObject.get("description").getAsString());
                step.setExpectedResult(stepObject.get("expectedResult").getAsString());
                if (stepObject.has("attachments")) {
                    JsonArray attachmentsArray = stepObject.getAsJsonArray("attachments");
                    List<JiraAttachment> attachments = new ArrayList<>();
                    for (JsonElement attachmentElement : attachmentsArray) {
                        JsonObject attachmentObject = attachmentElement.getAsJsonObject();
                        JiraAttachment attachment = new JiraAttachment();
                        attachment.setFileName(attachmentObject.get("fileName").getAsString());
                        attachment.setFilePath(downloadAttachment(attachmentObject.get("content").getAsString(), attachment.getFileName()));
                        attachment.setContentType(attachmentObject.get("contentType").getAsString());
                        attachment.setFileSize(attachmentObject.get("fileSize").getAsInt());
                        attachments.add(attachment);
                    }
                    step.setAttachments(attachments);
                }
                testSteps.add(step);
            }
        }
        return testSteps;
    }

    public List<File> downloadAttachments(String key) {
        List<File> attachments = new ArrayList<>();
        String queryUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + key + "/attachments";
        HttpEntity entity = Utils.getJiraResponse(queryUrl, jiraApiKey);
        try {
            String jsonResponse = EntityUtils.toString(entity);
            JsonArray attachmentsArray = JsonParser.parseString(jsonResponse).getAsJsonArray();
            for (JsonElement attachmentElement : attachmentsArray) {
                JsonObject attachmentObject = attachmentElement.getAsJsonObject();
                String attachmentUrl = jiraBaseURL + "/secure/attachment/" + attachmentObject.get("id").getAsString() + "/" + attachmentObject.get("fileName").getAsString();
                File downloadedFile = downloadFile(attachmentUrl, attachmentObject.get("fileName").getAsString());
                attachments.add(downloadedFile);
            }
        } catch (IOException e) {
            logger.error("Error occurred while downloading attachments for key " + key, e);
        }
        return attachments;
    }

    private File downloadFile(String url, String fileName) {
        File downloadedFile = new File(attachmentDownloadLocation + File.separator + fileName);
        try (FileOutputStream fos = new FileOutputStream(downloadedFile)) {
            HttpEntity entity = Utils.getJiraResponse(url, jiraApiKey);
            entity.writeTo(fos);
        } catch (IOException e) {
            logger.error("Error occurred while downloading file " + fileName, e);
        }
        return downloadedFile;
    }

    public String downloadAttachment(String contentUrl, String fileName) {
        String filePath = attachmentDownloadLocation + File.separator + fileName;
        try (FileOutputStream fos = new FileOutputStream(filePath)) {
            HttpEntity entity = Utils.getJiraResponse(contentUrl, jiraApiKey);
            entity.writeTo(fos);
        } catch (IOException e) {
            logger.error("Error occurred while downloading attachment " + fileName, e);
        }
        return filePath;
    }

    public void updateTestCaseMigratedStatusInJira(String key, boolean status) {
        // Implement the logic to update the test case status in JIRA
        // This is a placeholder for the actual implementation
    }
}
