import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.ParseException;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class JiraOperation {

    private String jiraBaseURL; 
    private String jiraApiKey;
    private String jiraProjectKey;
    private String max_chunk; 
    private String tcAttachmentDownloadLocation;

    private static final Logger logger = LogManager.getLogger();

    public JiraOperation() {
        jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        max_chunk = ConfigLoader.getConfigValue("MAX_VALUE_CHUNK");
        tcAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_CASE_ATTACHMENT_LOCATION");
        logger.info("Jira values for the project key " + jiraProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Below are the values assigned from rally_migration_config.properties file. \nJira Base URL - " + jiraBaseURL + "\nJira Project Key " + jiraProjectKey + "\nMax Chunk value - " + max_chunk + "\nTest Attachment Download location - " + tcAttachmentDownloadLocation);
    }

    public ArrayList<String> getJiraNonMigratedTestcaseKeys() {
        ArrayList<String> testCaseKeys = new ArrayList<>();

        String encodededKey = null;
        try {
            encodededKey = URLEncoder.encode("projectKey = " + jiraProjectKey + " AND \"Migrate Test to Rally\" = true AND \"TestCase Migrated\" = false", StandardCharsets.UTF_8.toString());
        } catch (UnsupportedEncodingException e) {
            logger.error("Error while encoding a part of URL ", e);
        }

        String url = jiraBaseURL + "/rest/atm/1.0/testcase/search?fields=key&maxResults=" + max_chunk + "&query=" + encodededKey;
        logger.info("String URL to get non migrated testcase keys from Jira " + url);

        HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);

        if (response !=  null) {
            String result = null;
            try {
                result = EntityUtils.toString(response);

            } catch (ParseException e) {
                logger.error("Error while parsing the Json response ", e);

            } catch (IOException e) {
                logger.error("Error while parsing the Json response" ,e);

            }
            JSONArray jsonArray = new JSONArray(result);

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                String key = jsonObject.getString("key");                
                logger.info("Key retrieved: " + jsonObject.getString("key"));
                testCaseKeys.add(key);
            }

        } else {
            logger.error("Response is NULL from while retrieving non migrated keys from JIRA. Returning NULL");
        }

        return testCaseKeys;
    }

    public JsonObject getJiraTestCaseDetails(String key) {
        JsonObject jiraJson = null;

        String url = jiraBaseURL + "/rest/atm/1.0/testcase/" + key;

        HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
        if (response !=  null) {
            try {
                String responseBody = EntityUtils.toString(response);
                logger.info("Testcase details for the key" + key + ": " + responseBody);
                jiraJson = JsonParser.parseString(responseBody).getAsJsonObject();

            } catch (ParseException e) {
                logger.error("Failed to retrieving JIRA testcase details for the key " + key + "; Parser exception " , e);

            } catch (IOException e) {
                logger.error("Failed to retrieving JIRA testcase details for the key " + key + "; IO exception " , e);
            }

        } else {
            logger.error("failed to get jira testcase details for the key " + key + "; Returning null");
        }

        return jiraJson;
    }

    public List<String> getJiraTestSteps(String key) {
        List<String> testSteps = new ArrayList<>();

        String url = jiraBaseURL + "/rest/atm/1.0/testcase/" + key + "/teststeps";

        HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
        if (response != null) {
            try {
                String responseBody = EntityUtils.toString(response);
                logger.info("Test steps response for the key " + key + ": " + responseBody);
                
                if (responseBody.trim().startsWith("[")) {
                    JSONArray stepsArray = new JSONArray(responseBody);
                    for (int i = 0; i < stepsArray.length(); i++) {
                        JSONObject stepObject = stepsArray.getJSONObject(i);
                        String stepDescription = stepObject.getString("description");
                        testSteps.add(stepDescription);
                    }
                } else {
                    logger.error("Unexpected response format for test steps: " + responseBody);
                }
            } catch (ParseException | IOException e) {
                logger.error("Failed to retrieve Jira test steps for the key " + key, e);
            }
        } else {
            logger.error("Failed to get Jira test steps for the key " + key + "; Returning null");
        }

        logger.info("Test steps for Jira key " + key + ": " + testSteps);
        return testSteps;
    }
}
