import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;

public class RallyOperation {

    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    private static final Logger logger = LogManager.getLogger();

    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Below are the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
    }

    public boolean createRallyTestcase(JsonObject jiraJson) throws IOException {
        boolean status = false;

        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        JsonObject testCase = new JsonObject();

        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira");
        }

        testCase.addProperty("Method", "Manual");

        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", priority);
            }
        } else {
            testCase.addProperty("Priority", "Default Priority");
        }

        testCase.addProperty("Owner", "/user/" + rallyUser);

        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false);
        }

        JsonArray tagsArray = new JsonArray();
        if (jiraJson.has("labels")) {
            JsonArray labelsArray = jiraJson.get("labels").getAsJsonArray();
            RallyRestApi restApi = null;
            try {
                restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
                for (JsonElement labelElement : labelsArray) {
                    String label = labelElement.getAsString();
                    JsonObject tag = Utils.findOrCreateTag(restApi, label);
                    if (tag != null) {
                        tagsArray.add(tag);
                    }
                }
            } catch (URISyntaxException e) {
                logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
            }
            testCase.add("Tags", tagsArray);
        }

        JsonElement folderElement = jiraJson.get("folder");
        if (folderElement != null && !folderElement.isJsonNull()) {
            String folderPath = folderElement.getAsString();
            String[] folderHierarchy = folderPath.split("/");

            JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
            if (testFolder == null) {
                logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
                return status;
            } else {
                logger.info("Folder " + folderPath + " is created successfully in Rally");
            }

            rallyJson.add("TestFolder", testFolder);
        }

        rallyJson.add("testCase", testCase);

        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            if (testCaseData.has("Tags")) {
                JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
                if (tagsArrayFromJson != null) {
                    JsonArray newTagsArray = new JsonArray();
                    for (JsonElement tagElement : tagsArrayFromJson) {
                        JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                        String tagRef = tagObjectFromJson.get("_ref").getAsString();
                        JsonObject newTagObject = new JsonObject();
                        newTagObject.addProperty("_ref", tagRef);
                        newTagsArray.add(newTagObject);
                    }
                    newTestCase.add("Tags", newTagsArray);
                }
            }

            if (testFolderData != null && testFolderData.has("_ref")) {
                String testFolderRef = testFolderData.get("_ref").getAsString();
                newTestCase.addProperty("TestFolder", testFolderRef);
            }

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                status = true;
                logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());
            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }

        } catch (IOException e) {
            logger.error("IO exception during create request.", e);
        } finally {
            try {
                if (restApi != null) {
                    restApi.close();
                    logger.info("Closed rest api resource in finally block");
                }
            } catch (IOException e) {
                logger.error("Error occurred while closing rest api resource at finally block", e);
            }
        }
        return status;
    }

    // Method to retrieve the reference of the created test case
    public String getTestCaseRef(JsonObject jiraJson) {
        String testCaseRef = null;
        try {
            RallyRestApi restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            String testCaseName = jiraJson.get("name").getAsString();
            QueryRequest testCaseRequest = new QueryRequest("TestCase");
            testCaseRequest.setFetch(new Fetch("Name", "_ref"));
            testCaseRequest.setQueryFilter(new QueryFilter("Name", "=", testCaseName));

            QueryResponse testCaseQueryResponse = restApi.query(testCaseRequest);
            if (testCaseQueryResponse.wasSuccessful() && testCaseQueryResponse.getTotalResultCount() > 0) {
                testCaseRef = testCaseQueryResponse.getResults().get(0).getAsJsonObject().get("_ref").getAsString();
                logger.info("Test case reference retrieved: " + testCaseRef);
            } else {
                logger.error("Failed to retrieve test case reference for the test case name: " + testCaseName);
            }
        } catch (URISyntaxException | IOException e) {
            logger.error("Error occurred while retrieving test case reference", e);
        }
        return testCaseRef;
    }

    // Method to create test steps in Rally
    public boolean createRallyTestSteps(String testCaseRef, List<String> testSteps) {
        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            for (String step : testSteps) {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", testCaseRef);
                newTestStep.addProperty("Input", step);

                CreateRequest createRequest = new CreateRequest("TestStep", newTestStep);
                CreateResponse createResponse = restApi.create(createRequest);

                if (!createResponse.wasSuccessful()) {
                    logger.error("Error occurred creating test step");
                    for (String error : createResponse.getErrors()) {
                        logger.error(error);
                    }
                    return false;
                }
            }
            return true;
        } catch (URISyntaxException | IOException e) {
            logger.error("Error occurred while creating test steps in Rally", e);
            return false;
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (IOException e) {
                    logger.error("Error occurred while closing RallyRestApi", e);
                }
            }
        }
    }
}
