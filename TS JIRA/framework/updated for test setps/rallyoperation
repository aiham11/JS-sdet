package com.optum.coe.automation.rally;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

	private String rallyBaseURL;
	private String rallyApiKey;
	private String rallyProjectKey;
	private String rallyUser;
	private static final Logger logger = LogManager.getLogger();

	public RallyOperation() {
		rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
		rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
		rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
		rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
		logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
		logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
	}

	public String createRallyTestcase(JsonObject jiraJson) throws IOException {
	    String rallyTestCaseOID = null;
	    JsonObject rallyJson = new JsonObject();
	    rallyJson.addProperty("projectRef", rallyProjectKey);

	    JsonObject testCase = new JsonObject();

	    // Safely retrieve the name element, with a fallback default name
	    String name = Utils.getJsonString(jiraJson, "name");
	    if (name.isEmpty()) {
	        name = "Default Test Case Name - No TestCase name found in Jira";
	    }
	    testCase.addProperty("Name", name);

	    testCase.addProperty("Method", "Manual");

	    // Safely retrieve the priority element, with a fallback default priority
	    String priority = Utils.getJsonString(jiraJson, "priority");
	    if (priority.equalsIgnoreCase("Normal")) {
	        priority = "Useful";
	    } else if (priority.isEmpty()) {
	        priority = "Default Priority";
	    }
	    testCase.addProperty("Priority", priority);

	    testCase.addProperty("Owner", "/user/" + rallyUser);

	    // Safely retrieve the status element, with a fallback ready status
	    String status = Utils.getJsonString(jiraJson, "status");
	    testCase.addProperty("Ready", status.equals("Ready"));

	    // Handle labels/tags
	    JsonArray tagsArray = new JsonArray();
	    if (jiraJson.has("labels")) {
	        JsonArray labelsArray = jiraJson.getAsJsonArray("labels");
	        RallyRestApi restApi = null;
	        try {
	            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
	            for (JsonElement labelElement : labelsArray) {
	                String label = labelElement.getAsString();
	                JsonObject tag = Utils.findOrCreateTag(restApi, label);
	                if (tag != null) {
	                    tagsArray.add(tag);
	                }
	            }
	        } catch (URISyntaxException e) {
	            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
	        } finally {
	            if (restApi != null) {
	                restApi.close();
	            }
	        }
	        testCase.add("Tags", tagsArray);
	    }

	    // Handle folder creation
	    String folderPath = Utils.getJsonString(jiraJson, "folder");
	    if (!folderPath.isEmpty()) {
	        String[] folderHierarchy = folderPath.split("/");
	        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
	        if (testFolder == null) {
	            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
	            return rallyTestCaseOID;
	        } else {
	            rallyJson.add("TestFolder", testFolder);
	            logger.info("Folder " + folderPath + " is created successfully in Rally");
	        }
	    }

	    rallyJson.add("testCase", testCase);
	    String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

	    RallyRestApi restApi = null;
	    try {
	        restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
	        restApi.setApplicationName("CreateTestCaseApp");

	        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();
	        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
	        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

	        JsonObject newTestCase = new JsonObject();
	        newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
	        newTestCase.addProperty("Project", rallyProjectKey);
	        newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
	        newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
	        newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
	        newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

	        if (testCaseData.has("Tags")) {
	            newTestCase.add("Tags", testCaseData.getAsJsonArray("Tags"));
	        }

	        if (testFolderData != null) {
	            String testFolderRef = testFolderData.get("_ref").getAsString();
	            newTestCase.addProperty("TestFolder", testFolderRef);
	        }

	        CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
	        CreateResponse createResponse = restApi.create(createRequest);

	        if (createResponse.wasSuccessful()) {
	            rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
	            logger.info("Successfully created test case and the OID for created testcase: " + rallyTestCaseOID);
	        } else {
	            logger.error("Error occurred creating test case");
	            for (String error : createResponse.getErrors()) {
	                logger.error(error);
	            }
	        }
	    } catch (Exception e) {
	        logger.error("Exception while creating Rally test case", e);
	    } finally {
	        if (restApi != null) {
	            try {
	                restApi.close();
	            } catch (IOException e) {
	                logger.error("Error occurred while closing RallyRestApi", e);
	            }
	        }
	    }

	    return rallyTestCaseOID;
	}

	public String attachFilestoRallyTestcase(RallyRestApi rallyRestApi, String rallyTestCaseRef, String filePath) throws IOException {
	    String attachmentOID = null;
	    File file = new File(filePath);
	    if (!file.exists()) {
	        logger.error("File not found: " + filePath);
	        return null;
	    }

	    long fileSize = file.length();
	    if (fileSize > 5 * 1024 * 1024) {
	        logger.error("File too large to upload: " + filePath);
	        return null;
	    }

	    byte[] fileContent = Files.readAllBytes(file.toPath());
	    String base64Content = Base64.getEncoder().encodeToString(fileContent);

	    JsonObject attachmentContent = new JsonObject();
	    attachmentContent.addProperty("TestCase", rallyTestCaseRef);
	    attachmentContent.addProperty("Name", file.getName());
	    attachmentContent.addProperty("Description", "Attachment for Test Case");
	    attachmentContent.addProperty("Content", base64Content);

	    CreateRequest createRequest = new CreateRequest("Attachment", attachmentContent);
	    CreateResponse createResponse = rallyRestApi.create(createRequest);

	    if (createResponse.wasSuccessful()) {
	        attachmentOID = createResponse.getObject().get("_ref").getAsString();
	        logger.info("Successfully uploaded attachment: " + filePath);
	    } else {
	        logger.error("Failed to upload attachment: " + filePath);
	        for (String error : createResponse.getErrors()) {
	            logger.error(error);
	        }
	    }

	    return attachmentOID;
	}
	
	
	
	public List<String> uploadAttachmentsToRally(List<String> attachmentPaths, RallyRestApi rallyRestApi, String rallyTestCaseRef) {
	    List<String> rallyAttachmentRefs = new ArrayList<>();

	    for (String filePath : attachmentPaths) {
	        try {
	            String attachmentRef = attachFileToRallyTestCase(rallyRestApi, rallyTestCaseRef, filePath);
	            rallyAttachmentRefs.add(attachmentRef);
	            logger.info("File " + filePath + " uploaded successfully to Rally.");
	        } catch (IOException e) {
	            logger.error("Failed to upload attachment: " + filePath, e);
	        }
	    }

	    return rallyAttachmentRefs;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	// Method to migrate test steps from JIRA to Rally
	public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi) {
	    Collections.reverse(jiraTestSteps);

	    for (JiraTestStep step : jiraTestSteps) {
	        try {
	            JsonObject newTestStep = new JsonObject();
	            newTestStep.addProperty("TestCase", rallyTestCaseRef);
	            newTestStep.addProperty("StepIndex", step.getIndex());
	            newTestStep.addProperty("Input", step.getDescription());
	            newTestStep.addProperty("ExpectedResult", step.getExpectedresult());
	            newTestStep.addProperty("TestData", step.getTestdata());

	            // Handle attachments
	            List<String> attachmentPaths = jiraOperation.downloadStepAttachments(step); // assuming jiraOperation is an instance of JiraOperation class
	            List<String> rallyAttachmentRefs = uploadAttachmentsToRally(attachmentPaths, rallyRestApi, rallyTestCaseRef);

	            if (!rallyAttachmentRefs.isEmpty()) {
	                JsonArray attachmentsArray = new JsonArray();
	                for (String attachmentRef : rallyAttachmentRefs) {
	                    JsonObject attachmentObj = new JsonObject();
	                    attachmentObj.addProperty("_ref", attachmentRef);
	                    attachmentsArray.add(attachmentObj);
	                }
	                newTestStep.add("Attachments", attachmentsArray);
	            }

	            CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
	            CreateResponse createResponse = rallyRestApi.create(createRequest);

	            if (createResponse.wasSuccessful()) {
	                logger.info("Successfully created test step: " + step.getDescription());
	            } else {
	                logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
	            }
	        } catch (Exception e) {
	            logger.error("Exception while creating test step: " + step.getDescription(), e);
	        }
	    }
	}


    
}
