import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.util.Base64;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

    // Logger Initialization for RallyOperation Class
    private static final Logger logger = LogManager.getLogger();

    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    // A Constructor loads the value from .properties file
    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
        logger.info("Rally Base URL: " + rallyBaseURL + ", Rally Project Reference: " + rallyProjectKey);
    }

    // Create a Rally testcase
    public boolean createRallyTestcase(JiraTestCase jiraTestCase) throws IOException {
        boolean status = false;

        // Create JSON object for rally Json and add rally project reference key
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        // Create JSON object for testcase Json to add the rally testcase property
        JsonObject testCase = new JsonObject();

        // Get testcase name from Jira Json body and add it to rally testcase as a property
        String name = jiraTestCase.getName();
        if (name != null && !name.isEmpty()) {
            testCase.addProperty("Name", name);
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira");
        }

        // Add method as Manual to rally testcase as a property
        testCase.addProperty("Method", "Manual");

        // Map priority value from Jira to Rally
        String priority = jiraTestCase.getPriority();
        if (priority != null && !priority.isEmpty()) {
            switch (priority.toLowerCase()) {
                case "critical":
                    testCase.addProperty("Priority", "Critical");
                    break;
                case "important":
                    testCase.addProperty("Priority", "Important");
                    break;
                case "useful":
                case "normal":
                default:
                    testCase.addProperty("Priority", "Useful");
                    break;
            }
        } else {
            testCase.addProperty("Priority", "Useful");
        }

        // Add owner from config file to the rally testcase as a property
        testCase.addProperty("Owner", rallyUser);

        // Add status from Jira Json and add to the rally testcase as a property
        String statusValue = jiraTestCase.getStatus();
        if (statusValue != null && !statusValue.isEmpty()) {
            testCase.addProperty("Ready", statusValue.equals("Approved"));
        } else {
            testCase.addProperty("Ready", false);
        }

        // Convert Jira labels to Rally tags if labels are present
        String labels = jiraTestCase.getLables();
        if (labels != null && !labels.isEmpty()) {
            String[] labelArray = labels.split(",");
            JsonArray tagsArray = new JsonArray();
            RallyRestApi restApi = null;
            try {
                restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
                for (String label : labelArray) {
                    JsonObject tag = Utils.findOrCreateTag(restApi, label.trim());
                    if (tag != null) {
                        tagsArray.add(tag);
                    }
                }
            } catch (URISyntaxException e) {
                logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
            } finally {
                if (restApi != null) {
                    restApi.close();
                }
            }
            testCase.add("Tags", tagsArray);
        }

        // Get folder hierarchy from JIRA response
        String folderPath = jiraTestCase.getTestFolder();
        if (folderPath != null && !folderPath.isEmpty()) {
            String[] folderHierarchy = folderPath.split("/");

            // Call a Util method to create test folder based on folder hierarchy
            JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
            if (testFolder == null) {
                logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
                return status;
            } else {
                logger.info("Folder " + folderPath + " is created successfully in Rally");
            }

            // Add TestFolder to the test case
            rallyJson.add("TestFolder", testFolder);
        }

        // Add the testCase object to the rallyJson
        rallyJson.add("testCase", testCase);

        // Save the transformed JSON to a variable
        String rallyJsonString = rallyJson.toString();

        // Initialize Rally API
        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        // Extract values from JSON
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            // Create a new test case
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            // Add Tags to the test case from the JSON file if present
            if (testCaseData.has("Tags")) {
                newTestCase.add("Tags", testCaseData.getAsJsonArray("Tags"));
            }

            // Add TestFolder to the test case from the JSON file if present
            if (testFolderData != null && testFolderData.has("_ref")) {
                String testFolderRef = testFolderData.get("_ref").getAsString();
                newTestCase.addProperty("TestFolder", testFolderRef);
            }

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                status = true;
                logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());

                // Create test steps
                String testCaseRef = createResponse.getObject().get("_ref").getAsString();
                createTestSteps(jiraTestCase, testCaseRef);
            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }

        } catch (IOException e) {
            logger.error("IO exception during create request.", e);
        } finally {
            // Release resources
            try {
                if (restApi != null) {
                    restApi.close();
                    logger.info("Closed rest api resource in finally block");
                }
            } catch (IOException e) {
                logger.error("Error occurred while closing rest api resource at finally block", e);
            }
        }
        return status;
    }

    // Create test steps in Rally
    private void createTestSteps(JiraTestCase jiraTestCase, String testCaseRef) {
        List<JiraTestStep> steps = jiraTestCase.getTestSteps();
        if (steps == null || steps.isEmpty()) {
            return;
        }

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
            restApi.setApplicationName("CreateTestStepsApp");

            for (JiraTestStep step : steps) {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", testCaseRef);
                newTestStep.addProperty("Input", step.getDescription());
                newTestStep.addProperty("ExpectedResult", step.getExpectedResult());
                newTestStep.addProperty("Index", step.getIndex());

                CreateRequest createRequest = new CreateRequest("TestCaseStep", newTestStep);
                CreateResponse createResponse = restApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    logger.info("Successfully created test step: " + createResponse.getObject().get("_ref").getAsString());
                } else {
                    logger.error("Error occurred creating test step");
                    for (String error : createResponse.getErrors()) {
                        logger.error(error);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Exception occurred while creating test steps", e);
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                    logger.info("Closed rest api resource in finally block");
                } catch (IOException e) {
                    logger.error("Error occurred while closing rest api resource at finally block", e);
                }
            }
        }
    }

    // Upload attachments
    public void uploadAttachments(JiraTestCase jiraTestCase) throws IOException {
        RallyRestApi restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        String rallyTestCaseRef = getRallyTestCaseRef(jiraTestCase); // Implement this method to get Rally test case reference

        uploadAttachmentList(jiraTestCase.getAttachments(), ConfigLoader.getConfigValue("TEST_CASE_ATTACHMENT_LOCATION"), rallyTestCaseRef, restApi);
        uploadAttachmentList(jiraTestCase.getTestStepAttachments(), ConfigLoader.getConfigValue("TEST_STEP_ATTACHMENT_LOCATION"), rallyTestCaseRef, restApi);
        uploadAttachmentList(jiraTestCase.getEmbeddedAttachments(), ConfigLoader.getConfigValue("TEST_STEP_EMBEDDED_ATTACHMENT_LOCATION"), rallyTestCaseRef, restApi);

        restApi.close();
    }

    private void uploadAttachmentList(List<JiraAttachment> attachments, String uploadPath, String rallyTestCaseRef, RallyRestApi restApi) throws IOException {
        if (attachments == null || attachments.isEmpty()) {
            return;
        }

        for (JiraAttachment attachment : attachments) {
            String localFilePath = uploadPath + "/" + attachment.getFilename();
            File file = new File(localFilePath);

            if (file.exists()) {
                byte[] fileContent = Files.readAllBytes(file.toPath());

                JsonObject attachmentContent = new JsonObject();
                attachmentContent.addProperty("TestCase", rallyTestCaseRef);
                attachmentContent.addProperty("Content", Base64.getEncoder().encodeToString(fileContent));
                attachmentContent.addProperty("ContentType", "application/octet-stream");
                attachmentContent.addProperty("Name", file.getName());
                attachmentContent.addProperty("Size", file.length());

                CreateRequest createRequest = new CreateRequest("Attachment", attachmentContent);
                CreateResponse createResponse = restApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    logger.info("Successfully uploaded attachment: " + file.getName());
                } else {
                    logger.error("Failed to upload attachment: " + file.getName());
                    for (String error : createResponse.getErrors()) {
                        logger.error(error);
                    }
                }
            } else {
                logger.warn("File not found for upload: " + localFilePath);
            }
        }
    }

    private String getRallyTestCaseRef(JiraTestCase jiraTestCase) {
        // Implement logic to retrieve Rally TestCase reference
        // This will typically involve querying Rally to get the reference of the created test case
        return ""; // Return the actual reference
    }
}
