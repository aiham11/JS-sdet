import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class Utils {

    // Logger Initialization for Utils Class
    private static final Logger logger = LogManager.getLogger();

    /**
     * Method to get JIRA response for a given URL and API key
     *
     * @param url
     * @param jiraApiKey
     * @return HttpEntity response
     */
    public static HttpEntity getJiraResponse(String url, String jiraApiKey) {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpGet httpGet = new HttpGet(url);
        httpGet.setHeader("Authorization", "Basic " + jiraApiKey);
        httpGet.setHeader("Accept", "application/json");
        HttpEntity entity = null;
        try {
            entity = httpClient.execute(httpGet).getEntity();
        } catch (IOException e) {
            logger.error("Error while executing GET request to JIRA for URL: " + url, e);
        }
        return entity;
    }

    /**
     * Method to encode a string in Base64
     *
     * @param value
     * @return encoded string
     */
    public static String encodeBase64(String value) {
        return Base64.getEncoder().encodeToString(value.getBytes());
    }

    /**
     * Method to decode a Base64 string
     *
     * @param encodedValue
     * @return decoded string
     */
    public static String decodeBase64(String encodedValue) {
        return new String(Base64.getDecoder().decode(encodedValue));
    }

    /**
     * Method to update the migrated status of a Jira test case
     *
     * @param testCaseKey The key of the Jira test case
     * @param status      The migration status to set
     */
    public static void updateTestCaseMigratedStatusinJira(String testCaseKey, boolean status) {
        String jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        String jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        
        String url = jiraBaseURL + "/rest/api/2/issue/" + testCaseKey;
        HttpPut httpPut = new HttpPut(url);

        String json = "{ \"fields\": { \"TestCase Migrated\": " + status + " } }";
        StringEntity entity;
        try {
            entity = new StringEntity(json);
            httpPut.setEntity(entity);
            httpPut.setHeader("Accept", "application/json");
            httpPut.setHeader("Content-type", "application/json");
            httpPut.setHeader("Authorization", "Basic " + jiraApiKey);

            try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
                httpClient.execute(httpPut);
                logger.info("Updated migrated status for Jira test case " + testCaseKey + " to " + status);
            }
        } catch (Exception e) {
            logger.error("Error updating migrated status for Jira test case " + testCaseKey, e);
        }
    }

    /**
     * Method to find or create a Rally tag
     *
     * @param restApi The RallyRestApi object
     * @param tagName The name of the tag to find or create
     * @return The JsonObject of the found or created tag
     */
    public static JsonObject findOrCreateTag(RallyRestApi restApi, String tagName) {
        // Implementation for finding or creating a tag in Rally
        return null;
    }

    /**
     * Method to create a test folder in Rally
     *
     * @param folderHierarchy The hierarchy of the folder
     * @param projectRef      The project reference in Rally
     * @param rallyBaseURL    The base URL for Rally
     * @param rallyApiKey     The API key for Rally
     * @return The JsonObject of the created test folder
     */
    public static JsonObject createTestFolder(String[] folderHierarchy, String projectRef, String rallyBaseURL, String rallyApiKey) {
        // Implementation for creating a test folder in Rally
        return null;
    }
}
