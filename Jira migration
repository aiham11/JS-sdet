import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.http.ContentType;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Base64;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;

public class JiraClient {

    private static final String JIRA_URL = "https://jira.healthcareit.net";
    private static final String USERNAME = "your-username"; // Replace with your actual Jira username
    private static final String PASSWORD = "your-password"; // Replace with your actual Jira password
    private static final String PROJECT_KEY = "CC2";

    public static void main(String[] args) {
        // Generate the Basic Authentication token
        String authToken = generateBasicAuthToken(USERNAME, PASSWORD);

        // Set the base URI for Jira
        RestAssured.baseURI = JIRA_URL;

        try {
            // Print request details for debugging
            System.out.println("Request URI: " + RestAssured.baseURI + "/rest/atm/1.0/testcase/search");
            System.out.println("Authorization: Basic " + authToken);
            System.out.println("Query Parameters: fields=key,attachments, maxResults=100000, query=projectKey = \"" + PROJECT_KEY + "\"");

            // Send the GET request with the Basic Authentication token
            Response response = given()
                    .header("Authorization", "Basic " + authToken)
                    .queryParam("fields", "key,attachments")
                    .queryParam("maxResults", "100000")
                    .queryParam("query", "projectKey = \"" + PROJECT_KEY + "\"")
                    .header("Accept", "application/json")
                    .when()
                    .get("/rest/atm/1.0/testcase/search")
                    .then()
                    .contentType(ContentType.JSON)
                    .extract().response();

            // Get the JSON response as a map
            Map<String, Object> jsonResponse = response.jsonPath().getMap("$");

            // Save the JSON response to a file
            saveResponseToFile(response.asString(), "response.json");

            // Extract and download attachments
            extractAndDownloadAttachments(jsonResponse, authToken);

            // Check the status code and handle errors
            int statusCode = response.getStatusCode();
            if (statusCode == 200) {
                System.out.println("Request was successful.");
            } else if (statusCode == 401 || statusCode == 403) {
                System.err.println("Authentication failed. Please check your username and password.");
            } else {
                System.err.println("Failed to retrieve test cases. Status code: " + statusCode);
                System.err.println("Response: " + response.asString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to generate the Basic Authentication token
    private static String generateBasicAuthToken(String username, String password) {
        String credentials = username + ":" + password;
        return Base64.getEncoder().encodeToString(credentials.getBytes());
    }

    // Method to save the JSON response to a file
    private static void saveResponseToFile(String jsonResponse, String fileName) {
        try (FileWriter fileWriter = new FileWriter(fileName)) {
            fileWriter.write(jsonResponse);
            System.out.println("JSON response saved to " + fileName);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to extract and download attachments
    private static void extractAndDownloadAttachments(Map<String, Object> jsonResponse, String authToken) {
        List<Map<String, Object>> testCases = (List<Map<String, Object>>) jsonResponse.get("testCases");
        if (testCases != null) {
            for (Map<String, Object> testCase : testCases) {
                List<Map<String, String>> attachments = (List<Map<String, String>>) testCase.get("attachments");
                if (attachments != null) {
                    for (Map<String, String> attachment : attachments) {
                        String attachmentUrl = attachment.get("url");
                        String fileName = attachment.get("fileName");
                        downloadAttachment(attachmentUrl, fileName, authToken);
                    }
                }
            }
        }
    }

    // Method to download an attachment
    private static void downloadAttachment(String attachmentUrl, String fileName, String authToken) {
        try {
            Response response = given()
                    .header("Authorization", "Basic " + authToken)
                    .header("Accept", "application/json")
                    .when()
                    .get(attachmentUrl)
                    .then()
                    .extract().response();

            InputStream inputStream = response.asInputStream();
            try (FileOutputStream outputStream = new FileOutputStream(fileName)) {
                byte[] buffer = new byte[1024];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }
                System.out.println("Attachment downloaded: " + fileName);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
