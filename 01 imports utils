It looks like there's an issue with the way files are being downloaded and possibly overwritten, resulting in a `FileAlreadyExistsException`. Here are the necessary changes and additions to ensure that the `attachFilestoRallyTestcase` method is correctly used and that the files are properly handled.

### `Utils.java`
**Ensure Files are Not Overwritten by Adding a Check for Existing Files:**
```java
public static List<String> downloadFileAttachmentFromTestStep(String jsonResponse, String apiToken,
        String testStepFileAttachmentLocationToBeSaved, String tC_Id, String baseURL) throws IOException {
    List<String> filePaths = new ArrayList<String>();
    JSONObject jsonObject = new JSONObject(jsonResponse);
    JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
    Path path = Paths.get(testStepFileAttachmentLocationToBeSaved);
    if (!Files.exists(path)) {
        try {
            Files.createDirectories(path);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    for (int i = 0; i < stepsArray.length(); i++) {
        JSONObject stepObject = stepsArray.getJSONObject(i);
        int index = stepObject.getInt("index");
        int stepNumber = index + 1;
        if (stepObject.has("attachments")) {
            JSONArray attachmentsArray = stepObject.getJSONArray("attachments");
            for (int j = 0; j < attachmentsArray.length(); j++) {
                JSONObject attachmentObject = attachmentsArray.getJSONObject(j);
                int attachmentID = attachmentObject.getInt("id");
                int attachmentNumber = j + 1;
                String attachmentFileName = attachmentObject.getString("name");
                String testStepAttachmentUrl = baseURL + "/rest/tests/1.0/attachment/" + attachmentID;
                HttpEntity response = Utils.getJiraResponse(testStepAttachmentUrl, apiToken);
                if (response != null) {
                    try (InputStream in = response.getContent()) {
                        Path filePath = Paths.get(testStepFileAttachmentLocationToBeSaved + "/" + stepNumber
                                + "_" + attachmentNumber + "_" + attachmentFileName);
                        if (Files.exists(filePath)) {
                            filePath = Paths.get(testStepFileAttachmentLocationToBeSaved + "/" + stepNumber
                                    + "_" + attachmentNumber + "_" + System.currentTimeMillis() + "_" + attachmentFileName);
                        }
                        try {
                            Files.copy(in, filePath);
                            filePaths.add(filePath.toString());
                            EntityUtils.consume(response);
                        } catch (IOException e) {
                            logger.error("Failed to download the file attachments from Jira for Testcase level", e);
                        }
                        logger.info("File downloaded from Jira to tcAttachmentDownloadLocation. File Name:"
                                + attachmentFileName);
                    } catch (UnsupportedOperationException | IOException e1) {
                        logger.error("Failed to download the file attachment " + attachmentFileName
                                + " from Jira for Testcase level", e1);
                    }
                } else {
                    logger.error("Failed to download the file attachment " + attachmentFileName
                            + " from Jira for Testcase level. No Entity response found");
                }
            }
        }
    }
    return filePaths;
}

public static List<String> downloadTestStepEmbeddedAttachments(String jsonResponse, String apiToken,
        String testStepAttachmentLocationToBeSaved, String tC_Id, String baseURL, String columnName)
        throws IOException {
    List<String> filePaths = new ArrayList<String>();
    JSONObject jsonObject = new JSONObject(jsonResponse);
    JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
    Path path = Paths.get(testStepAttachmentLocationToBeSaved);
    if (!Files.exists(path)) {
        try {
            Files.createDirectories(path);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    for (int i = 0; i < stepsArray.length(); i++) {
        JSONObject stepObject = stepsArray.getJSONObject(i);
        int index = stepObject.getInt("index");
        int stepNumber = index + 1;
        if ((columnName.equals("description")) || (columnName.equals("testData")) || (columnName.equals("expectedResult"))) {
            if (stepObject.has(columnName)) {
                String htmlContent = stepObject.getString(columnName);
                Document doc = Jsoup.parse(htmlContent);
                Elements imgElements = doc.select("img");
                if (!imgElements.isEmpty()) {
                    int imageCount = 0;
                    for (Element img : imgElements) {
                        String imageUrl = img.attr("src");
                        if (!imageUrl.isEmpty()) {
                            imageCount++;
                            String extractUrl = imageUrl.substring(2);
                            String absoluteUrl = baseURL + extractUrl;
                            HttpEntity response = Utils.getJiraResponse(absoluteUrl, apiToken);
                            if (response != null) {
                                try (InputStream in = response.getContent()) {
                                    Path filePath = Paths.get(testStepAttachmentLocationToBeSaved + "/" + stepNumber
                                            + "_" + imageCount + "_" + "_EmbbededFile_" + columnName + ".png");
                                    if (Files.exists(filePath)) {
                                        filePath = Paths.get(testStepAttachmentLocationToBeSaved + "/" + stepNumber
                                                + "_" + imageCount + "_" + System.currentTimeMillis() + "_EmbbededFile_" + columnName + ".png");
                                    }
                                    try {
                                        Files.copy(in, filePath);
                                        filePaths.add(filePath.toString());
                                        EntityUtils.consume(response);
                                    } catch (IOException e) {
                                        logger.error(
                                                "Failed to download the file attachments from Jira for test step level",
                                                e);
                                    }
                                    logger.info(
                                            "File downloaded from Jira to tcAttachmentDownloadLocation. File Name:"
                                                    + stepNumber + "_" + imageCount + "_" + "_EmbbededFile_"
                                                    + columnName + ".png");
                                } catch (UnsupportedOperationException | IOException e1) {
                                    logger.error("Failed to download the file attachment " + stepNumber + "_"
                                            + imageCount + "_" + "_EmbbededFile_" + columnName
                                            + " from Jira for Testcase level", e1);
                                }
                            } else {
                                logger.error("Failed to download the file attachment " + stepNumber + "_"
                                        + imageCount + "_" + "_EmbbededFile_" + columnName
                                        + " from Jira for test step level. No Entity response found");
                            }
                        }
                    }
                }
            }
        } else {
            logger.error(
                    "No Valid arugument is passed the method. it should be either description OR testData OR expectedResult");
        }
    }
    return filePaths;
}
```

### `RunnerClass.java`
**Correct Argument Passing and File Handling:**
```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;

public class RunnerClass {

    // Logger Initialization for Runner Class
    private static final Logger logger = LogManager.getLogger();

    // Main method
    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {

        /*
         * Main method calls below functionalities from com.optum.coe.automation.rally
         * package 1. Get Jira non migrated testcase keys 2. Get Jira Testcase details
         * for the given testcase key. It is an iterative process 3. Create the testcase
         * in Rally using the Jira testcase details 4. Validate if the testcase is
         * created successfully ; Future implementation is required. US7440061
         */

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();
        for (int i = 0; i < testcaseKeys.size(); i++) {			
            boolean rallyTestcaseCreationStatus = false;
            boolean rallyOverallTestStepAttachmentsStatus = false;
            jiraTestCase.setKey(testcaseKeys.get(i));
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();
            
            // Declaration of rallyTestcaseOID
            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);
            
            // Validation for Testcase creation
            if (rallyTestcaseOID != null ) {
                rallyTestcaseCreationStatus = true;
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                break;	
            }

            // Download attachments
            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            // Upload test case attachments to Rally
            if (fileAttachmentDownloadPathsTestcaseLevel != null) {
                logger.info("Attachment paths are found in the list.");
                List<String> testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcase

Level);
                // Validation for Testcase file attachments 
                if (!testcaseAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;	
                } else {
                    logger.error("The Jira testcase is not created in rally. Jira Testcase key is " + jiraTestCase.getKey()
                    + " is not created in rally");
                    return;
                }

            } else {
                logger.info("No Attachment path found for Testcase level.");
            }

            // Upload test step attachments to Rally
            if (fileAttachmentDownloadPathsTestStepLevel != null && !fileAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                List<String> testStepAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
                // Validation for Testcase file attachments
                if (!testStepAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;	
                } else {
                    logger.error("The Jira teststep attachments are not created in rally. Jira Testcase key is " + jiraTestCase.getKey()
                    + " is not created in rally");
                    return;
                }
            }

            if (embeddedAttachmentDownloadPathsTestStepLevel != null && !embeddedAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                List<String> embeddedTestStepAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, embeddedAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(embeddedAttachmentDownloadPathsTestStepLevel);
                // Validation for Testcase embedded attachments
                if (!embeddedTestStepAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;	
                } else {
                    logger.error("The Jira embedded teststep attachments are not created in rally. Jira Testcase key is " + jiraTestCase.getKey()
                    + " is not created in rally");
                    return;
                }
            }

            // Over all validation for Jira Testcase migration to Rally. US7440061: Create implementation for ValidateRallyTestcaseContent
            if (rallyTestcaseCreationStatus == true && rallyOverallTestStepAttachmentsStatus == true ) {
                /*
                 * Needs to be added calling method to check "Testcase Migrated" and "Test Folder Migrated" the check box in Jira
                 */
            }
        }
    }
}
```

These updates ensure that the files are not overwritten and that the correct arguments are passed to the `attachFilestoRallyTestcase` method.
