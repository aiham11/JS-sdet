
public List<String> jiraAttachmentsDownloadForStep(String testcaseKey, int stepNumber, String attachmentType) {
    List<String> attachmentPaths = new ArrayList<>();

    try {
        // Fetching the Jira attachments for the specific test step
        getJiraTestStepAttachments(testcaseKey, stepNumber); 

        // Assuming that `Utils.downloadFileAttachmentFromJiraTestCase` is the method for downloading attachments
        String downloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");
        String jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");

        // Assuming `getJiraTestStepAttachments` internally handles downloading of attachments to a specific location
        attachmentPaths = Utils.downloadFileAttachmentFromJiraTestCase(attachmentMap, downloadLocation, jiraApiKey, testcaseKey);

    } catch (IOException e) {
        logger.error("Error while downloading attachments for TestCase " + testcaseKey + " at step " + stepNumber, e);
    }

    return attachmentPaths;
}



import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.HttpHeaders;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class JiraOperation {

    private static final Logger logger = LogManager.getLogger(JiraOperation.class);

    // Method to handle fetching Jira Test Step Attachments
    public void getJiraTestStepAttachments(String testcaseKey, int stepNumber) {
        String jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        String jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        String jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        String tsFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");

        String url = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(url);

            // Set up authentication
            String authHeader = "Basic " + Base64.getEncoder().encodeToString((jiraApiKey + ":").getBytes(StandardCharsets.UTF_8));
            request.setHeader(HttpHeaders.AUTHORIZATION, authHeader);

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                HttpEntity entity = response.getEntity();

                if (entity != null) {
                    String responseBody = EntityUtils.toString(entity);
                    handleJiraResponse(responseBody, testcaseKey, stepNumber, tsFileAttachmentDownloadLocation);
                }
            }
        } catch (IOException e) {
            logger.error("Error while retrieving attachments for TestCase " + testcaseKey + " at step " + stepNumber, e);
        }
    }

    // Method to handle the response from Jira and parse attachments
    private void handleJiraResponse(String response, String testcaseKey, int stepNumber, String downloadLocation) {
        try {
            if (response.startsWith("{")) {
                JSONObject jsonResponse = new JSONObject(response);
                // Assuming that you have a method to parse and download the attachments
                JSONArray attachments = jsonResponse.optJSONArray("attachments");
                if (attachments != null) {
                    for (int i = 0; i < attachments.length(); i++) {
                        JSONObject attachment = attachments.getJSONObject(i);
                        String attachmentUrl = attachment.getString("url");
                        String fileName = attachment.getString("filename");

                        Utils.downloadFileFromUrl(attachmentUrl, downloadLocation + "/" + fileName);
                        logger.info("Downloaded attachment for test step " + stepNumber + ": " + fileName);
                    }
                } else {
                    logger.info("No attachments found for TestCase " + testcaseKey + " at step " + stepNumber);
                }
            } else {
                logger.error("Unexpected response format for TestCase " + testcaseKey + " at step " + stepNumber + ": " + response);
            }
        } catch (JSONException e) {
            logger.error("Error parsing JSON response for TestCase " + testcaseKey + " at step " + stepNumber, e);
        }
    }
}



















import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.HttpHeaders;

public class JiraOperation {

    private static final Logger logger = LogManager.getLogger();

    // Method to handle fetching Jira Test Step Attachments
    public void getJiraTestStepAttachments(String testcaseKey, int stepNumber) {
        String jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        String jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        String jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        String tsFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");

        String url = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(url);

            // Set up authentication
            String authHeader = "Basic " + jiraApiKey;
            request.setHeader(HttpHeaders.AUTHORIZATION, authHeader);

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                HttpEntity entity = response.getEntity();

                if (entity != null) {
                    String responseBody = EntityUtils.toString(entity);
                    handleJiraResponse(responseBody, testcaseKey, stepNumber, tsFileAttachmentDownloadLocation);
                }
            }
        } catch (IOException e) {
            logger.error("Error while retrieving attachments for TestCase " + testcaseKey + " at step " + stepNumber, e);
        }
    }

    // Method to handle the response from Jira and parse attachments
    private void handleJiraResponse(String response, String testcaseKey, int stepNumber, String downloadLocation) {
        try {
            if (response.startsWith("{")) {
                JSONObject jsonResponse = new JSONObject(response);
                // Assuming that you have a method to parse and download the attachments
                JSONArray attachments = jsonResponse.optJSONArray("attachments");
                if (attachments != null) {
                    for (int i = 0; i < attachments.length(); i++) {
                        JSONObject attachment = attachments.getJSONObject(i);
                        String attachmentUrl = attachment.getString("url");
                        String fileName = attachment.getString("filename");

                        Utils.downloadFileFromUrl(attachmentUrl, downloadLocation + "/" + fileName);
                        logger.info("Downloaded attachment for test step " + stepNumber + ": " + fileName);
                    }
                } else {
                    logger.info("No attachments found for TestCase " + testcaseKey + " at step " + stepNumber);
                }
            } else {
                logger.error("Unexpected response format for TestCase " + testcaseKey + " at step " + stepNumber + ": " + response);
            }
        } catch (JSONException e) {
            logger.error("Error parsing JSON response for TestCase " + testcaseKey + " at step " + stepNumber, e);
        }
    }
}
