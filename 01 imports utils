package com.optum.coe.automation.rally;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class JiraOperation {

    private String jiraBaseURL;
    private String jiraApiKey;
    private String jiraProjectKey;
    private String max_chunk;
    private String tcFileAttachmentDownloadLocation;
    private static String tsFileAttachmentDownloadLocation;
    private static final Logger logger = LogManager.getLogger();
    private static final String tsEmbeddedAttachmentDownloadLocation = null;

    public JiraOperation() {
        jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        max_chunk = ConfigLoader.getConfigValue("MAX_VALUE_CHUNK");
        tcFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_CASE_FILE_ATTACHMENT_LOCATION");
        tsFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");
        logger.info("Jira values for the project key " + jiraProjectKey + " are assigned from rally_migration_config.properties file");
    }

    // Method to fetch non-migrated test cases from Jira
    public String fetchJiraNonMigratedTestcases(String jiraApiEndpoint, String jiraApiToken) {
        String jiraResponse = null;

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(jiraApiEndpoint);
            request.addHeader("Authorization", "Bearer " + jiraApiToken);

            try (CloseableHttpResponse response = httpClient.execute(request)) {
                if (response.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        jiraResponse = EntityUtils.toString(entity);
                        logger.info("Successfully fetched Jira response: " + jiraResponse);
                    } else {
                        logger.warn("No content returned in Jira response.");
                    }
                } else {
                    logger.error("Failed to fetch Jira response. HTTP error code: " + response.getStatusLine().getStatusCode());
                }
            }
        } catch (IOException e) {
            logger.error("Error occurred while fetching non-migrated test cases from Jira.", e);
        }

        return jiraResponse;
    }

    public List<String> getJiraNonMigratedTestcaseKeys(String jiraResponse) {
        List<String> testcaseKeys = new ArrayList<>();

        if (jiraResponse == null || jiraResponse.isEmpty()) {
            logger.error("The Jira response is null or empty.");
            return testcaseKeys;  // Return an empty list to avoid further processing
        }

        try {
            JSONArray jArrayResponse = new JSONArray(jiraResponse);
            for (int i = 0; i < jArrayResponse.length(); i++) {
                JSONObject jsonObject = jArrayResponse.getJSONObject(i);
                String key = jsonObject.getString("key");
                testcaseKeys.add(key);
            }
        } catch (Exception e) {
            logger.error("Error occurred while parsing Jira response to get non-migrated testcase keys.", e);
        }

        return testcaseKeys;
    }

    // Other existing methods...

}
