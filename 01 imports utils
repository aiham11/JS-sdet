package com.optum.coe.automation.rally;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;

public class Utils {

    private static final Logger logger = LogManager.getLogger();

    // Method to establish a Jira connection and get the response
    public static HttpEntity getJiraResponse(String url, String apiKey) {
        CloseableHttpClient connection = HttpClients.createDefault();
        HttpGet request = new HttpGet(url);
        request.setHeader("Authorization", "Bearer " + apiKey);
        CloseableHttpResponse response = null;
        try {
            response = connection.execute(request);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                logger.info("Successfully returned HttpEntity response for the URL " + url);
                return entity;
            } else {
                logger.error("Error occurred. HttpEntity is null and no response is received for the URL " + url);
                return null;
            }
        } catch (ClientProtocolException e) {
            logger.error("Error occurred in Jira connection while connecting " + url, e);
        } catch (IOException e) {
            logger.error("Error occurred in Jira connection while connecting " + url, e);
        }
        return null;
    }

    // Method to find or create a tag in Rally
    public static JsonObject findOrCreateTag(RallyRestApi restApi, String tagName) throws IOException {
        QueryRequest tagRequest = new QueryRequest("Tag");
        tagRequest.setQueryFilter(new QueryFilter("Name", "=", tagName));
        QueryResponse tagResponse = restApi.query(tagRequest);

        if (tagResponse.getResults().size() > 0) {
            return tagResponse.getResults().get(0).getAsJsonObject();
        }

        JsonObject newTag = new JsonObject();
        newTag.addProperty("Name", tagName);

        CreateRequest createTagRequest = new CreateRequest("Tag", newTag);
        CreateResponse createTagResponse = restApi.create(createTagRequest);

        if (createTagResponse.wasSuccessful()) {
            return createTagResponse.getObject();
        } else {
            for (String error : createTagResponse.getErrors()) {
                logger.error("Error creating tag: " + error);
            }
            return null;
        }
    }

    // Method to create or verify folder structure in Rally
    public static JsonObject createTestFolder(String[] folderHierarchy, String projectRef, String rallyBaseUrl,
            String rallyApiKey) {
        JsonObject lastFolder = null;
        String lastFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseUrl), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            for (int i = 0; i < folderHierarchy.length; i++) {
                String folderName = folderHierarchy[i];
                if (folderName == null || folderName.trim().isEmpty()) {
                    logger.info("Invalid folder name encountered: '" + folderName + "'");
                    continue;
                }

                if (i == 0) {
                    lastFolder = getOrCreateFolder(restApi, folderName, projectRef, null);
                } else {
                    lastFolder = getOrCreateFolder(restApi, folderName, projectRef, lastFolderRef);
                }

                if (lastFolder != null) {
                    lastFolderRef = lastFolder.get("_ref").getAsString();
                } else {
                    break;
                }
            }
            return lastFolder;
        } catch (Exception e) {
            logger.error("Error occurred while creating folder structure in Rally", e);
            return null;
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    logger.error("Error closing RallyRestApi", e);
                }
            }
        }
    }

    private static JsonObject getOrCreateFolder(RallyRestApi restApi, String folderName, String projectRef,
            String parentFolderRef) throws IOException {
        QueryRequest folderRequest = new QueryRequest("testfolder");
        folderRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()));
        if (parentFolderRef != null) {
            folderRequest.setQueryFilter(folderRequest.getQueryFilter().and(new QueryFilter("Parent", "=", parentFolderRef)));
        } else {
            folderRequest.setQueryFilter(folderRequest.getQueryFilter().and(new QueryFilter("Parent", "=", "null")));
        }
        folderRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

        QueryResponse folderResponse = restApi.query(folderRequest);
        if (folderResponse.wasSuccessful() && folderResponse.getTotalResultCount() > 0) {
            logger.info("Folder already exists: " + folderResponse.getResults().get(0).getAsJsonObject().get("_ref").getAsString());
            return folderResponse.getResults().get(0).getAsJsonObject();
        } else {
            JsonObject newFolder = new JsonObject();
            newFolder.addProperty("Name", folderName.trim());
            newFolder.addProperty("Project", projectRef);
            if (parentFolderRef != null) {
                newFolder.addProperty("Parent", parentFolderRef);
            }

            CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
            CreateResponse createFolderResponse = restApi.create(createFolderRequest);

            if (createFolderResponse.wasSuccessful()) {
                logger.info("Successfully created folder: " + createFolderResponse.getObject().get("_ref").getAsString());
                return createFolderResponse.getObject();
            } else {
                for (String error : createFolderResponse.getErrors()) {
                    logger.error("Error creating folder: " + error);
                }
                return null;
            }
        }
    }

    // Method to parse JSON response and extract attachment URLs and names
    public static Map<String, String> pharseJsonGetAttachmentUrlAndName(String jsonResponse) {
        Map<String, String> attachmentMap = new HashMap<>();
        JSONArray jArrayResponse = new JSONArray(jsonResponse);
        for (int i = 0; i < jArrayResponse.length(); i++) {
            JSONObject jsonObject = jArrayResponse.getJSONObject(i);
            String url = jsonObject.getString("url");
            String name = jsonObject.getString("filename");
            attachmentMap.put(url, name);
        }
        return attachmentMap;
    }

    // Method to download file attachments from Jira test case
    public static List<String> downloadFileAttachmentFromJiraTestCase(Map<String, String> attachmentMap,
            String tcAttachmentDownloadLocation, String jiraApiKey, String testcaseKey) throws IOException {

        List<String> filePaths = new ArrayList<>();
        Path path = Paths.get(tcAttachmentDownloadLocation);
        if (!Files.exists(path)) {
            Files.createDirectories(path);
        }

        for (Map.Entry<String, String> entry : attachmentMap.entrySet()) {
            String fileUrl = entry.getKey();
            String fileName = entry.getValue();
            HttpEntity response = getJiraResponse(fileUrl, jiraApiKey);

            if (response != null) {
                try (InputStream in = response.getContent()) {
                    Path filePath = Paths.get(tcAttachmentDownloadLocation, fileName);
                    Files.copy(in, filePath);
                    filePaths.add(filePath.toString());
                    EntityUtils.consume(response);
                    logger.info("File downloaded from Jira to tcAttachmentDownloadLocation. File Name: " + fileName);
                } catch (IOException e) {
                    logger.error("Failed to download the file attachment from Jira for Testcase level", e);
                }
            } else {
                logger.error("Failed to download the file attachment from Jira for Testcase level. No Entity response found");
            }
        }
        return filePaths;
    }

    // Method to download file attachments from Jira test steps
    public static List<String> downloadFileAttachmentFromTestStep(String jsonResponse, String apiToken,
            String testStepFileAttachmentLocationToBeSaved, String tC_Id, String baseURL) throws IOException {

        List<String> filePaths = new ArrayList<>();
        JSONObject jsonObject = new JSONObject(jsonResponse);
        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
        Path path = Paths.get(testStepFileAttachmentLocationToBeSaved);
        if (!Files.exists(path)) {
            Files.createDirectories(path);
        }

        for (int i = 0; i < stepsArray.length(); i++) {
            JSONObject stepObject = stepsArray.getJSONObject(i);
            int stepNumber = stepObject.getInt("index") + 1;

            if (stepObject.has("attachments")) {
                JSONArray attachmentsArray = stepObject.getJSONArray("attachments");
                for (int j = 0; j < attachmentsArray.length(); j++) {
                    JSONObject attachmentObject = attachmentsArray.getJSONObject(j);
                    String attachmentFileName = attachmentObject.getString("name");
                    String testStepAttachmentUrl = baseURL + "/rest/tests/1.0/attachment/" + attachmentObject.getInt("id");
                    HttpEntity response = getJiraResponse(testStepAttachmentUrl, apiToken);

                    if (response != null) {
                        try (InputStream in = response.getContent()) {
                            Path filePath = Paths.get(testStepFileAttachmentLocationToBeSaved, stepNumber + "_" + (j + 1) + "_" + attachmentFileName);
                            Files.copy(in, filePath);
                            filePaths.add(filePath.toString());
                            EntityUtils.consume(response);
                            logger.info("File downloaded from Jira to tcAttachmentDownloadLocation. File Name: " + attachmentFileName);
                        } catch (IOException e) {
                            logger.error("Failed to download the file attachments from Jira for Testcase level", e);
                        }
                    } else {
                        logger.error("Failed to download the file attachment from Jira for Testcase level. No Entity response found");
                    }
                }
            }
        }
        return filePaths;
    }

    // Method to download embedded images from test steps
    public static List<String> downloadTestStepEmbeddedAttachments(String jsonResponse, String apiToken,
            String testStepAttachmentLocationToBeSaved, String tC_Id, String baseURL, String columnName)
            throws IOException {

        List<String> filePaths = new ArrayList<>();
        JSONObject jsonObject = new JSONObject(jsonResponse);
        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
        Path path = Paths.get(testStepAttachmentLocationToBeSaved);
        if (!Files.exists(path)) {
            Files.createDirectories(path);
        }

        for (int i = 0; i < stepsArray.length(); i++) {
            JSONObject stepObject = stepsArray.getJSONObject(i);
            int stepNumber = stepObject.getInt("index") + 1;

            if (stepObject.has(columnName)) {
                String htmlContent = stepObject.getString(columnName);
                Document doc = Jsoup.parse(htmlContent);
                Elements imgElements = doc.select("img");

                int imageCount = 0;
                for (Element img : imgElements) {
                    String imageUrl = img.attr("src");
                    if (!imageUrl.isEmpty()) {
                        imageCount++;
                        String absoluteUrl = baseURL + imageUrl.substring(2);
                        HttpEntity response = getJiraResponse(absoluteUrl, apiToken);

                        if (response != null) {
                            try (InputStream in = response.getContent()) {
                                Path filePath = Paths.get(testStepAttachmentLocationToBeSaved, stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + ".png");
                                Files.copy(in, filePath);
                                filePaths.add(filePath.toString());
                                EntityUtils.consume(response);
                                logger.info("File downloaded from Jira to tcAttachmentDownloadLocation. File Name: " + filePath.getFileName());
                            } catch (IOException e) {
                                logger.error("Failed to download the embedded file attachment from Jira for test step level", e);
                            }
                        } else {
                            logger.error("Failed to download the embedded file attachment from Jira for test step level. No Entity response found");
                        }
                    }
                }
            } else {
                logger.error("Invalid argument passed to method. Column name should be either description, testData, or expectedResult");
            }
        }
        return filePaths;
    }

    // Method to delete local attachment files
    public static void deleteAttachmentFileFromLocal(List<String> filePaths) {
        for (String filePath : filePaths) {
            File file = new File(filePath);
            if (file.exists()) {
                file.delete();
                logger.info("The file " + filePath + " is deleted for next attachment download run.");
            }
        }
    }

    // Utility method to extract a string value from a JSON object
    public static String getJsonString(JsonObject jsonObject, String key) {
        JsonElement element = jsonObject.get(key);
        if (element != null && !element.isJsonNull()) {
            if (element.isJsonArray()) {
                StringBuilder dataBuilder = new StringBuilder();
                JsonArray dataArray = element.getAsJsonArray();
                for (JsonElement jsonElement : dataArray) {
                    if (dataBuilder.length() > 0) {
                        dataBuilder.append(", ");
                    }
                    dataBuilder.append(jsonElement.getAsString());
                }
                return dataBuilder.toString();
            } else {
                return element.getAsString();
            }
        } else {
            logger.warn("Key {} not found or is null in JsonObject", key);
            return "";
        }
    }
}
