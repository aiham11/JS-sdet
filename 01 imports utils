To update your framework to include the methods for downloading attachments and uploading them to their corresponding test steps in Rally, follow the implementation outlined below. The methods will be added to the `JiraOperation` and `RallyOperation` classes, and I will ensure that the changes align with your existing framework without altering your original structure.

### Updates to `JiraOperation` Class

```java
// Existing imports...
import java.io.File;
import java.io.IOException;
import java.net.URL;
import org.apache.commons.io.FileUtils;

public class JiraOperation {
    // Existing class fields...

    // New method to download embedded images from JIRA test steps
    public List<String> downloadStepAttachments(JiraTestStep step) {
        List<String> attachmentPaths = new ArrayList<>();
        
        for (JiraAttachment attachment : step.getAttachments()) {
            try {
                String downloadUrl = attachment.getUrl();
                String localPath = tsFileAttachmentDownloadLocation + "/" + attachment.getFileName();
                FileUtils.copyURLToFile(new URL(downloadUrl), new File(localPath));
                attachmentPaths.add(localPath);
            } catch (IOException e) {
                logger.error("Failed to download attachment: " + attachment.getFileName(), e);
            }
        }
        
        return attachmentPaths;
    }
    
    // ... other existing methods
}
```

### Updates to `RallyOperation` Class

```java
// Existing imports...
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;

public class RallyOperation {
    // Existing class fields...

    // New method to attach files to Rally Test Case
    public String attachFileToRallyTestCase(RallyRestApi rallyRestApi, String rallyTestCaseRef, String filePath) throws IOException {
        String attachmentOID = null;
        File file = new File(filePath);
        if (!file.exists()) {
            logger.error("File not found: " + filePath);
            return null;
        }

        long fileSize = file.length();
        if (fileSize > 5 * 1024 * 1024) {
            logger.error("File too large to upload: " + filePath);
            return null;
        }

        byte[] fileContent = Files.readAllBytes(file.toPath());
        String base64Content = Base64.getEncoder().encodeToString(fileContent);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("TestCase", rallyTestCaseRef);
        attachmentContent.addProperty("Name", file.getName());
        attachmentContent.addProperty("Description", "Attachment for Test Case");
        attachmentContent.addProperty("Content", base64Content);

        CreateRequest createRequest = new CreateRequest("Attachment", attachmentContent);
        CreateResponse createResponse = rallyRestApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            attachmentOID = createResponse.getObject().get("_ref").getAsString();
            logger.info("Successfully uploaded attachment: " + filePath);
        } else {
            logger.error("Failed to upload attachment: " + filePath);
            for (String error : createResponse.getErrors()) {
                logger.error(error);
            }
        }

        return attachmentOID;
    }

    // New method to upload a list of attachments to Rally
    public List<String> uploadAttachmentsToRally(List<String> attachmentPaths, RallyRestApi rallyRestApi, String rallyTestCaseRef) {
        List<String> rallyAttachmentRefs = new ArrayList<>();

        for (String filePath : attachmentPaths) {
            try {
                String attachmentRef = attachFileToRallyTestCase(rallyRestApi, rallyTestCaseRef, filePath);
                rallyAttachmentRefs.add(attachmentRef);
                logger.info("File " + filePath + " uploaded successfully to Rally.");
            } catch (IOException e) {
                logger.error("Failed to upload attachment: " + filePath, e);
            }
        }

        return rallyAttachmentRefs;
    }

    // Method to migrate test steps from JIRA to Rally
    public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi) {
        Collections.reverse(jiraTestSteps);

        for (JiraTestStep step : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseRef);
                newTestStep.addProperty("StepIndex", step.getIndex());
                newTestStep.addProperty("Input", step.getDescription());
                newTestStep.addProperty("ExpectedResult", step.getExpectedresult());
                newTestStep.addProperty("TestData", step.getTestdata());

                // Handle attachments
                List<String> attachmentPaths = new JiraOperation().downloadStepAttachments(step);
                List<String> rallyAttachmentRefs = uploadAttachmentsToRally(attachmentPaths, rallyRestApi, rallyTestCaseRef);

                if (!rallyAttachmentRefs.isEmpty()) {
                    JsonArray attachmentsArray = new JsonArray();
                    for (String attachmentRef : rallyAttachmentRefs) {
                        JsonObject attachmentObj = new JsonObject();
                        attachmentObj.addProperty("_ref", attachmentRef);
                        attachmentsArray.add(attachmentObj);
                    }
                    newTestStep.add("Attachments", attachmentsArray);
                }

                CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
                CreateResponse createResponse = rallyRestApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    logger.info("Successfully created test step: " + step.getDescription());
                } else {
                    logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
                }
            } catch (Exception e) {
                logger.error("Exception while creating test step: " + step.getDescription(), e);
            }
        }
    }

    // ... other existing methods
}
```

### Updates to `RunnerClass`

Ensure that you create instances of `JiraOperation` and `RallyOperation` and properly pass them around as needed. The modified methods are now ready to be used within the `RunnerClass` for downloading attachments and uploading them to Rally.

---

This code integrates the new functionality with the existing framework. The methods for downloading attachments and uploading them to the corresponding test steps are designed to work without altering your original structure and comments.
