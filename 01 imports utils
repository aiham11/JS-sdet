Here is the complete implementation for the `JiraOperation` class, including the `getJiraTestCaseDetails` method which returns an `org.json.JSONObject`.

### `JiraOperation.java`
```java
package com.optum.coe.automation.rally;

import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class JiraOperation {

    private static final Logger logger = LogManager.getLogger();
    private String jiraBaseUrl;
    private String apiToken;

    public JiraOperation() {
        // Load configuration or set defaults
        this.jiraBaseUrl = "https://your-jira-base-url"; // Replace with your Jira base URL
        this.apiToken = "your-api-token"; // Replace with your Jira API token
    }

    // Method to get Jira TestCase details and return as org.json.JSONObject
    public JSONObject getJiraTestCaseDetails(String testCaseKey) {
        String jsonResponse = getJiraResponse(testCaseKey);
        JSONObject jiraTestcaseJson = new JSONObject(jsonResponse);
        return jiraTestcaseJson;
    }

    // Helper method to perform HTTP GET request to Jira and return the response as a string
    private String getJiraResponse(String testCaseKey) {
        String urlString = jiraBaseUrl + "/rest/atm/1.0/testcase/" + testCaseKey;
        HttpURLConnection connection = null;
        StringBuilder response = new StringBuilder();

        try {
            URL url = new URL(urlString);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Authorization", "Bearer " + apiToken);
            connection.setRequestProperty("Content-Type", "application/json");

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();
            } else {
                logger.error("GET request to Jira failed with response code: " + responseCode);
            }
        } catch (Exception e) {
            logger.error("Exception occurred while making GET request to Jira: ", e);
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
        return response.toString();
    }
}
```

### Explanation:

1. **Configuration**:
   - The `JiraOperation` constructor sets the `jiraBaseUrl` and `apiToken`. Replace the placeholder values with your actual Jira base URL and API token.

2. **getJiraTestCaseDetails Method**:
   - This method constructs the API URL using the Jira base URL and the test case key.
   - It performs an HTTP GET request to retrieve the test case details from Jira.
   - It reads the response and converts it to a JSON string.
   - Finally, it converts the JSON string to an `org.json.JSONObject` and returns it.

3. **getJiraResponse Method**:
   - This is a helper method to perform the HTTP GET request and return the response as a string.
   - It sets the necessary headers, including the authorization token.
   - It handles the response and reads the content into a `StringBuilder`.
   - If the request fails, it logs an error message with the response code.

### Usage:

With this updated `JiraOperation` class, the `getJiraTestCaseDetails` method will return an `org.json.JSONObject`, which can be used in your `RunnerClass.java` as demonstrated previously.

Make sure to replace the placeholder values for `jiraBaseUrl` and `apiToken` with your actual Jira configuration details.
