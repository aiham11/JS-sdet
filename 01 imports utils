public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi, Map<Integer, List<String>> stepAttachmentOIDsMap) {
    Collections.reverse(jiraTestSteps);

    for (JiraTestStep step : jiraTestSteps) {
        try {
            JsonObject newTestStep = new JsonObject();
            newTestStep.addProperty("TestCase", rallyTestCaseRef);
            newTestStep.addProperty("StepIndex", step.getIndex());

            // Ensure fields are strings, not arrays
            String sanitizedInput = sanitizeField(step.getDescription());
            String sanitizedExpectedResult = sanitizeField(step.getExpectedResult());
            String sanitizedTestData = sanitizeField(step.getTestData());

            newTestStep.addProperty("Input", sanitizedInput);
            newTestStep.addProperty("ExpectedResult", sanitizedExpectedResult);
            newTestStep.addProperty("TestData", sanitizedTestData);

            // Handle attachments correctly
            List<String> attachmentOIDs = stepAttachmentOIDsMap.get(step.getIndex());
            if (attachmentOIDs != null) {
                StringBuilder attachmentReferences = new StringBuilder();
                for (String attachmentOID : attachmentOIDs) {
                    String attachmentReference = "<img src=\"" + rallyBaseURL + "/slm/webservice/v2.0/attachment/" + attachmentOID + "\" />";
                    attachmentReferences.append(attachmentReference).append("<br/>");
                }

                if (!sanitizedInput.isEmpty()) {
                    newTestStep.addProperty("Input", sanitizedInput + "<br/>" + attachmentReferences.toString());
                } else if (!sanitizedExpectedResult.isEmpty()) {
                    newTestStep.addProperty("ExpectedResult", sanitizedExpectedResult + "<br/>" + attachmentReferences.toString());
                } else if (!sanitizedTestData.isEmpty()) {
                    newTestStep.addProperty("TestData", sanitizedTestData + "<br/>" + attachmentReferences.toString());
                }
            }

            logger.debug("Test Step Payload: " + newTestStep.toString());

            CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
            CreateResponse createResponse = rallyRestApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                logger.info("Successfully created test step: " + step.getDescription());
            } else {
                logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
            }
        } catch (Exception e) {
            logger.error("Exception while creating test step: " + step.getDescription(), e);
        }
    }
}

private String sanitizeField(String input) {
    return input == null ? "" : input.replaceAll("<[^>]*>", "").replaceAll("&nbsp;", " ");
}

private String sanitizeField(String[] inputArray) {
    if (inputArray == null || inputArray.length == 0) {
        return "";
    }
    return String.join(" ", inputArray);
}
