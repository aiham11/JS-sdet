Based on the requirements, I'll modify your `RallyOperation` class to upload attachments to the TestCase level and reference them in the TestStep descriptions rather than attempting to move them to the TestStep directly. Here is the updated code:

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.GetRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.GetResponse;

public class RallyOperation {

    // Initialization of the class member variables
    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    // Logger Initialization for RallyOperation Class
    private static final Logger logger = LogManager.getLogger();

    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Loaded values from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
    }

    public String createRallyTestcase(JsonObject jiraJson) {
        String rallyTestCaseOID = null;
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);
        JsonObject testCase = new JsonObject();

        JsonElement nameElement = jiraJson.get("name");
        testCase.addProperty("Name", nameElement != null && !nameElement.isJsonNull() ? nameElement.getAsString() : "Default Test Case Name - No TestCase name found in Jira");
        testCase.addProperty("Method", "Manual");

        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            testCase.addProperty("Priority", priority.equalsIgnoreCase("Normal") ? "Useful" : priority);
        } else {
            testCase.addProperty("Priority", "Default Priority");
        }

        testCase.addProperty("Owner", "/user/" + rallyUser);

        JsonElement statusElement = jiraJson.get("status");
        testCase.addProperty("Ready", statusElement != null && !statusElement.isJsonNull() ? statusElement.getAsString().equals("Ready") : false);

        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");
        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
        if (testFolder == null) {
            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return rallyTestCaseOID;
        } else {
            logger.info("Folder " + folderPath + " is created successfully in Rally");
        }

        rallyJson.add("TestFolder", testFolder);
        rallyJson.add("testCase", testCase);

        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = null;
            try {
                createResponse = restApi.create(createRequest);
            } catch (IOException e) {
                logger.error("IO exception during create request.", e);
            }

            if (createResponse.wasSuccessful()) {
                rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test case and the OID for created testcase: " + rallyTestCaseOID);
            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }

        } finally {
            try {
                restApi.close();
                logger.info("Closed rest API resource in finally block");
            } catch (IOException e) {
                logger.error("Error occurred while closing rest API resource in finally block", e);
            }
        }
        return rallyTestCaseOID;
    }

    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID, List<String> filePaths) {
        List<String> testcaseAttachmentOIDs = new ArrayList<>();
        RallyRestApi rallyApi = null;
        try {
            rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.", e);
        }
        try {
            for (String filePath : filePaths) {
                try {
                    testcaseAttachmentOIDs.add(attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath));
                    logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                } catch (IOException e) {
                    testcaseAttachmentOIDs.clear();
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
                    return testcaseAttachmentOIDs;
                }
            }
        } finally {
            try {
                rallyApi.close();
            } catch (IOException e) {
                logger.error("Rally API resource is not closed due to IO exception.", e);
            }
        }
        return testcaseAttachmentOIDs;
    }

    public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        String contentType = determineContentType(filePath);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);
        CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
        if (!attachmentContentResponse.wasSuccessful()) {
            logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
            return null;
        }
        String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();

        JsonObject attachment = new JsonObject();
        attachment.addProperty("Artifact", "/testcase/" + testCaseId);
        attachment.addProperty("Content", attachmentContentRef);
        attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());


        attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
        attachment.addProperty("ContentType", contentType);
        attachment.addProperty("Size", fileContent.length);
        CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
        CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
        if (attachmentResponse.wasSuccessful()) {
            logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
            return attachmentResponse.getObject().get("_ref").getAsString();
        } else {
            logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
            return null;
        }
    }

    private String determineContentType(String filePath) {
        String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();
        switch (attachmentType) {
            case ".png":
                return "image/png";
            case ".txt":
                return "text/plain";
            case ".jpeg":
            case ".jpg":
                return "image/jpeg";
            case ".xml":
                return "application/xml";
            case ".gif":
                return "image/gif";
            case ".doc":
                return "application/msword";
            case ".docx":
                return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            case ".xls":
                return "application/vnd.ms-excel";
            case ".xlsx":
                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            case ".zip":
                return "application/zip";
            default:
                return "application/octet-stream";
        }
    }

    public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi, List<String> attachmentOIDs) {
        Collections.reverse(jiraTestSteps);

        for (int i = 0; i < jiraTestSteps.size(); i++) {
            JiraTestStep step = jiraTestSteps.get(i);
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseRef);
                newTestStep.addProperty("StepIndex", step.getIndex());
                newTestStep.addProperty("Input", step.getDescription());
                newTestStep.addProperty("ExpectedResult", step.getExpectedResult());
                newTestStep.addProperty("TestData", step.getTestData());

                // Append attachment references to the step description
                StringBuilder updatedDescription = new StringBuilder(step.getDescription());
                for (String attachmentOID : attachmentOIDs) {
                    String attachmentUrl = "https://rally1.rallydev.com/slm/webservice/v2.0/attachment/" + attachmentOID;
                    updatedDescription.append("<br /><img src=\"").append(attachmentUrl).append("\" />");
                }
                newTestStep.addProperty("Input", updatedDescription.toString());

                CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
                CreateResponse createResponse = rallyRestApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    logger.info("Successfully created test step: " + step.getDescription());
                } else {
                    logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
                }
            } catch (Exception e) {
                logger.error("Exception while creating test step: " + step.getDescription(), e);
            }
        }
    }
}
```

### Changes Made:
1. **Attachment Upload to TestCase:** The `attachFileToRallyTestCase` method uploads files to the TestCase level.
2. **Attachment References in TestStep:** The `migrateTestSteps` method now appends image tags referencing the attachments in the TestStep descriptions rather than moving the attachments to the TestSteps.

### Usage:
When you use this class, ensure that after uploading the attachments to the TestCase, you call `migrateTestSteps` with the attachment OIDs to properly include them in the TestStep descriptions.

This code should now correctly upload attachments to the TestCase level and reference them in the TestStep descriptions as per your requirements.




Here’s how you can update the `RunnerClass` to work with the changes made to the `RallyOperation` class. The primary adjustments include ensuring that attachments are uploaded at the TestCase level and then referenced appropriately in the TestSteps.

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.JsonObject;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;

public class RunnerClass {

    // Logger Initialization for Runner Class
    private static final Logger logger = LogManager.getLogger();

    // Main method
    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

        for (String key : testcaseKeys) {
            boolean rallyTestcaseCreationStatus = false;
            boolean rallyOverallTestStepAttachmentsStatus = false;
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            // Download attachments from Jira for the TestCase level and TestStep level
            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            // Create Rally TestCase
            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

            if (rallyTestcaseOID != null) {
                rallyTestcaseCreationStatus = true;
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                break;
            }

            // List to store all attachment OIDs for referencing in TestSteps
            List<String> testcaseAttachmentOIDs = new ArrayList<>();

            // Attach files at the TestCase level
            if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                logger.info("Attachment paths are found for the TestCase level.");
                testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
                if (!testcaseAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                } else {
                    logger.error("The attachments for TestCase key " + jiraTestCase.getKey() + " are not uploaded to Rally.");
                    return;
                }
            } else {
                logger.info("No Attachment path found for TestCase level.");
            }

            // Handle Test Step File Attachments and Embedded Attachments
            List<String> allTestStepAttachmentPaths = new ArrayList<>();
            if (fileAttachmentDownloadPathsTestStepLevel != null && !fileAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step file attachments paths are found.");
                allTestStepAttachmentPaths.addAll(fileAttachmentDownloadPathsTestStepLevel);
            } else {
                logger.info("No file attachment paths found for Test Step level.");
            }

            if (embeddedAttachmentDownloadPathsTestStepLevel != null && !embeddedAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step embedded attachments paths are found.");
                allTestStepAttachmentPaths.addAll(embeddedAttachmentDownloadPathsTestStepLevel);
            } else {
                logger.info("No embedded attachment paths found for Test Step level.");
            }

            // Upload all TestStep-related attachments to TestCase level and collect their OIDs
            if (!allTestStepAttachmentPaths.isEmpty()) {
                List<String> testStepAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, allTestStepAttachmentPaths);
                Utils.deleteAttachmentFileFromLocal(allTestStepAttachmentPaths);
                if (!testStepAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                    testcaseAttachmentOIDs.addAll(testStepAttachmentOIDs);
                } else {
                    logger.error("Test Step attachments are not created in Rally for TestCase key " + jiraTestCase.getKey());
                    return;
                }
            }

            // Retrieve the steps and migrate them
            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();

            for (JsonElement element : stepsArray) {
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);
            }

            // Migrate Test Steps to Rally
            rallyOperation.migrateTestSteps(rallyTestcaseOID, testSteps, rallyRestApi, testcaseAttachmentOIDs);

            // Logging the overall result
            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                logger.info("Rally TestCase creation and TestStep attachment upload completed successfully for key: " + jiraTestCase.getKey());
            } else {
                logger.error("Rally TestCase creation or TestStep attachment upload failed for key: " + jiraTestCase.getKey());
            }

            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                // Call method to update "TestCase Migrated" and "Test Folder Migrated" check boxes in Jira
                jiraOperation.updateJiraTestCaseStatus(jiraTestCase.getKey());
            }
        }
    }
}
```

### Updates:
1. **Attachment Handling:** Updated the code to ensure that all attachments, whether for the TestCase or TestSteps, are uploaded at the TestCase level.
2. **TestStep Attachment Referencing:** The attachments are now referenced in the TestStep descriptions as URLs to the attachments stored at the TestCase level.
3. **Cleaning Up:** The code now handles local file deletions more robustly, ensuring that the downloaded attachments are cleaned up after uploading to Rally.
4. **Final Checks:** Added logs and checks for each step to ensure the process completes successfully or logs appropriate errors.

This should now correctly process the migration of test cases and their associated attachments from Jira to Rally, respecting the updated attachment handling logic.
