To address the issues in your framework, hereâ€™s where you can incorporate the steps:

### 1. **Check for Null URLs Before Downloading Embedded Images**

This step should be added in the method responsible for downloading embedded images, specifically in the `JiraOperation` class. You already have a method `downloadEmbeddedImages` where this logic should be implemented.

**Example:**
```java
public List<String> downloadEmbeddedImages(JiraTestStep step) {
    List<String> embeddedImagesPaths = new ArrayList<>();
    for (String imageUrl : step.getEmbeddedImageUrls()) {
        if (imageUrl != null && !imageUrl.isEmpty()) {
            try {
                String filePath = Utils.downloadFileFromUrl(imageUrl, "C:attachments");
                if (filePath != null) {
                    embeddedImagesPaths.add(filePath);
                }
            } catch (Exception e) {
                logger.error("Failed to download embedded image from URL: " + imageUrl, e);
            }
        } else {
            logger.warn("Download URL is null or empty for embedded image.");
        }
    }
    return embeddedImagesPaths;
}
```

**Where to add:** 
- **Class:** `JiraOperation`
- **Method:** `downloadEmbeddedImages`


### 2. **Ensure Test Step is Found Before Attachment**

This logic should be added in the `RallyOperation` class, specifically within the method where you are attaching files to test steps. The method `attachFilesToTestStep` is the appropriate place.

**Example:**
```java
public void attachFilesToTestStep(String rallyTestCaseOID, int stepIndex, List<String> filePaths) {
    RallyRestApi rallyApi = null;
    try {
        rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        String testStepRef = getTestStepRef(rallyApi, rallyTestCaseOID, stepIndex);
        if (testStepRef != null) {
            for (String filePath : filePaths) {
                try {
                    attachFileToRallyTestStep(rallyApi, testStepRef, filePath);
                    logger.info("File " + filePath + " is attached to the test step index " + stepIndex + " in Rally successfully");
                } catch (IOException e) {
                    logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
                }
            }
        } else {
            logger.error("Cannot attach file as test step reference is null.");
        }
    } catch (Exception e) {
        logger.error("Error while attaching files to Rally TestStep", e);
    } finally {
        try {
            if (rallyApi != null) {
                rallyApi.close();
            }
        } catch (IOException e) {
            logger.error("Rally API resource is not closed due to IO exception.", e);
        }
    }
}
```

**Where to add:** 
- **Class:** `RallyOperation`
- **Method:** `attachFilesToTestStep`


### 3. **Handle Attachment Encoding**

This step should be implemented in the method responsible for attaching files, specifically in the `RallyOperation` class. The `attachFileToRallyTestCase` method should include this logic.

**Example:**
```java
private String attachFileToRallyTestCase(RallyRestApi rallyRestApi, String rallyTestCaseRef, String filePath) throws IOException {
    String attachmentOID = null;
    File file = new File(filePath);
    if (!file.exists()) {
        logger.error("File not found: " + filePath);
        return null;
    }

    long fileSize = file.length();
    if (fileSize > 5 * 1024 * 1024) {
        logger.error("File too large to upload: " + filePath);
        return null;
    }

    try {
        byte[] fileContent = Files.readAllBytes(file.toPath());
        String base64Content = Base64.getEncoder().encodeToString(fileContent);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("TestCase", rallyTestCaseRef);
        attachmentContent.addProperty("Name", file.getName());
        attachmentContent.addProperty("Description", "Attachment for Test Case");
        attachmentContent.addProperty("Content", base64Content);

        CreateRequest createRequest = new CreateRequest("Attachment", attachmentContent);
        CreateResponse createResponse = rallyRestApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            attachmentOID = createResponse.getObject().get("_ref").getAsString();
            logger.info("Successfully uploaded attachment: " + filePath);
        } else {
            logger.error("Failed to upload attachment: " + filePath);
            for (String error : createResponse.getErrors()) {
                logger.error(error);
            }
        }
    } catch (IOException e) {
        logger.error("Error encoding file content for attachment: " + filePath, e);
        throw e;
    }

    return attachmentOID;
}
```

**Where to add:** 
- **Class:** `RallyOperation`
- **Method:** `attachFileToRallyTestCase`

### Summary of Updates

- **JiraOperation Class:**
  - Update `downloadEmbeddedImages` to check for null or empty URLs before downloading.

- **RallyOperation Class:**
  - Update `attachFilesToTestStep` to ensure that the test step reference is valid before attempting to attach files.
  - Ensure file content is correctly encoded before uploading in the `attachFileToRallyTestCase` method.

By incorporating these updates, you should resolve the issues with uploading attachments and handling embedded images. If issues persist, further debugging and logging might be necessary to pinpoint the exact causes.
