You should add the `sanitizeJsonString` method as a private method within the `RallyOperation` class. This method can then be called from within the `migrateTestSteps` method to sanitize the JSON strings before they are processed.

Here's how your `RallyOperation` class would look with the `sanitizeJsonString` method added:

```java
package com.optum.coe.automation.rally;

// Imports...

public class RallyOperation {

    // Initialization of the class member variables.
    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    // Logger Initialization for RallyOperation Class
    private static final Logger logger = LogManager.getLogger();

    // Constructor to load values from properties file
    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Loaded values from rally_migration_config.properties file.\nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
    }

    // Method to create a Rally Test Case from Jira JSON
    // (Other methods...)

    // Method to sanitize JSON strings
    private String sanitizeJsonString(String jsonString) {
        try {
            // Attempt to parse the string to ensure it's valid JSON
            JsonParser.parseString(jsonString);
            return jsonString;
        } catch (Exception e) {
            // If parsing fails, log a warning and sanitize the string
            logger.warn("Invalid JSON detected, sanitizing: " + jsonString, e);
            return "{}";  // or return a sanitized version of jsonString
        }
    }

    public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi, Map<Integer, List<String>> attachmentOIDsMap) {
        Collections.reverse(jiraTestSteps);
        String rallyBaseUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");

        for (JiraTestStep step : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseRef);
                newTestStep.addProperty("StepIndex", step.getIndex());

                // Get the step's description, expected result, and test data
                String description = sanitizeJsonString(step.getDescription());
                String expectedResult = sanitizeJsonString(step.getExpectedResult());
                String testData = sanitizeJsonString(step.getTestData());
                String attachmentLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");

                // Attach embedded images to the relevant fields
                if (description != null && !description.isEmpty()) {
                    List<String> descriptionAttachmentPaths = Utils.downloadTestStepEmbeddedAttachments(
                        description, 
                        ConfigLoader.getConfigValue("JIRA_API_TOKEN"), 
                        attachmentLocation, 
                        rallyTestCaseRef, 
                        rallyBaseUrl, 
                        "description"
                    );
                    description += Utils.constructAttachmentUrls(descriptionAttachmentPaths);
                }

                if (expectedResult != null && !expectedResult.isEmpty()) {
                    List<String> expectedResultAttachmentPaths = Utils.downloadTestStepEmbeddedAttachments(
                        expectedResult, 
                        ConfigLoader.getConfigValue("JIRA_API_TOKEN"), 
                        attachmentLocation, 
                        rallyTestCaseRef, 
                        rallyBaseUrl, 
                        "expectedResult"
                    );
                    expectedResult += Utils.constructAttachmentUrls(expectedResultAttachmentPaths);
                }

                if (testData != null && !testData.isEmpty()) {
                    List<String> testDataAttachmentPaths = Utils.downloadTestStepEmbeddedAttachments(
                        testData, 
                        ConfigLoader.getConfigValue("JIRA_API_TOKEN"), 
                        attachmentLocation, 
                        rallyTestCaseRef, 
                        rallyBaseUrl, 
                        "testData"
                    );
                    testData += Utils.constructAttachmentUrls(testDataAttachmentPaths);
                }

                // Set the step's fields
                newTestStep.addProperty("Input", description);
                newTestStep.addProperty("ExpectedResult", expectedResult);
                newTestStep.addProperty("TestData", testData);

                CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
                CreateResponse createResponse = rallyRestApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    String rallyTestStepOID = createResponse.getObject().get("_ref").getAsString();
                    logger.info("Successfully created test step: " + step.getDescription());
                } else {
                    logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + Arrays.toString(createResponse.getErrors()));
                }
            } catch (Exception e) {
                logger.error("Exception while creating test step: " + step.getDescription(), e);
            }
        }
    }

    // Other methods...
}
```

### Summary:
- **Place**: The `sanitizeJsonString` method is added as a private method within the `RallyOperation` class, just like other utility methods.
- **Usage**: Itâ€™s then called in the `migrateTestSteps` method to sanitize the `description`, `expectedResult`, and `testData` before further processing.

This method will help in preventing JSON parsing errors by ensuring that only valid JSON strings are processed.
