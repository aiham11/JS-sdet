Sure, I will provide you with the full updated code for the `RallyOperation.java`, `RunnerClass.java`, and `Utils.java` classes. Let's start with `RallyOperation.java`.

### `RallyOperation.java`
```java
package com.optum.coe.automation.rally;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.optum.coe.automation.utils.Utils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RallyOperation {

    private static final Logger logger = LoggerFactory.getLogger(RallyOperation.class);
    private static final String RALLY_BASE_URL = Utils.getProperty("rally.base.url");
    private static final String RALLY_PROJECT_REF = Utils.getProperty("rally.project.ref");

    public String createRallyTestcase(JsonObject jiraTestcase) {
        String rallyTestcaseUrl = null;
        try {
            JsonObject rallyTestcase = new JsonObject();
            rallyTestcase.addProperty("Project", RALLY_PROJECT_REF);
            rallyTestcase.addProperty("Name", jiraTestcase.get("name").getAsString());

            JsonElement element = jiraTestcase.get("someKey");
            if (element != null && !element.isJsonNull()) {
                String someValue = element.getAsString();
                rallyTestcase.addProperty("SomeField", someValue);
            } else {
                rallyTestcase.addProperty("SomeField", ""); // Or some default value
            }

            CloseableHttpClient client = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(RALLY_BASE_URL + "/testcase/create");
            httpPost.setHeader("Content-Type", "application/json");
            httpPost.setEntity(new StringEntity(rallyTestcase.toString()));

            CloseableHttpResponse response = client.execute(httpPost);
            rallyTestcaseUrl = EntityUtils.toString(response.getEntity());
            client.close();
        } catch (Exception e) {
            logger.error("Error creating Rally testcase", e);
        }
        return rallyTestcaseUrl;
    }

    public void migrateTestSteps(JsonObject jiraTestcase, String rallyTestcaseUrl) {
        JsonArray testSteps = jiraTestcase.getAsJsonObject("testScript").getAsJsonArray("steps");
        for (JsonElement stepElement : testSteps) {
            JsonObject step = stepElement.getAsJsonObject();
            try {
                JsonObject rallyStep = new JsonObject();
                rallyStep.addProperty("TestCase", rallyTestcaseUrl);
                rallyStep.addProperty("StepIndex", step.get("index").getAsInt());

                String description = Utils.getJsonString(step, "description");
                rallyStep.addProperty("Description", description);

                String expectedResult = Utils.getJsonString(step, "expectedResult");
                rallyStep.addProperty("ExpectedResult", expectedResult);

                String testData = Utils.getJsonString(step, "testData");
                rallyStep.addProperty("TestData", testData);

                CloseableHttpClient client = HttpClients.createDefault();
                HttpPost httpPost = new HttpPost(RALLY_BASE_URL + "/testcase/step/create");
                httpPost.setHeader("Content-Type", "application/json");
                httpPost.setEntity(new StringEntity(rallyStep.toString()));

                CloseableHttpResponse response = client.execute(httpPost);
                String responseString = EntityUtils.toString(response.getEntity());
                client.close();

                if (response.getStatusLine().getStatusCode() != 200) {
                    logger.error("Failed to create test step: {}. Error: {}", description, responseString);
                } else {
                    logger.info("Successfully created test step: {}", description);
                }
            } catch (Exception e) {
                logger.error("Error creating Rally test step", e);
            }
        }
    }
}
```

### `RunnerClass.java`
```java
package com.optum.coe.automation.rally;

import com.google.gson.JsonObject;
import com.optum.coe.automation.utils.Utils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RunnerClass {

    private static final Logger logger = LoggerFactory.getLogger(RunnerClass.class);

    public static void main(String[] args) {
        JiraOperation jiraOperation = new JiraOperation();
        RallyOperation rallyOperation = new RallyOperation();

        String jiraTestcasesUrl = Utils.getProperty("jira.testcases.url");
        JsonObject[] jiraTestcases = jiraOperation.getJiraTestcases(jiraTestcasesUrl);

        for (JsonObject jiraTestcase : jiraTestcases) {
            try {
                String rallyTestcaseUrl = rallyOperation.createRallyTestcase(jiraTestcase);
                if (rallyTestcaseUrl != null) {
                    rallyOperation.migrateTestSteps(jiraTestcase, rallyTestcaseUrl);
                } else {
                    logger.error("The Jira testcase is not created in rally. Jira Testcase key {} is not created in rally", jiraTestcase.get("key").getAsString());
                }
            } catch (Exception e) {
                logger.error("The Jira testcase is not created in rally. Jira Testcase key {} is not created in rally. Error: {}", jiraTestcase.get("key").getAsString(), e.getMessage(), e);
            }
        }
    }
}
```

### `Utils.java`
```java
package com.optum.coe.automation.utils;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class Utils {

    private static final Logger logger = LoggerFactory.getLogger(Utils.class);
    private static Properties properties;

    static {
        properties = new Properties();
        try (InputStream input = Utils.class.getClassLoader().getResourceAsStream("rally_migration_config.properties")) {
            if (input == null) {
                logger.error("Sorry, unable to find rally_migration_config.properties");
                return;
            }
            properties.load(input);
        } catch (IOException ex) {
            logger.error("Error loading properties file", ex);
        }
    }

    public static String getProperty(String key) {
        return properties.getProperty(key);
    }

    public static String getJsonString(JsonObject jsonObject, String key) {
        JsonElement element = jsonObject.get(key);
        if (element != null && !element.isJsonNull()) {
            if (element.isJsonArray()) {
                StringBuilder dataBuilder = new StringBuilder();
                JsonArray dataArray = element.getAsJsonArray();
                for (JsonElement jsonElement : dataArray) {
                    if (dataBuilder.length() > 0) {
                        dataBuilder.append(", ");
                    }
                    dataBuilder.append(jsonElement.getAsString());
                }
                return dataBuilder.toString();
            } else {
                return element.getAsString();
            }
        } else {
            logger.warn("Key {} not found or is null in JsonObject", key);
            return ""; // Or some default value
        }
    }
}
```

### Explanation of Changes
1. **RallyOperation.java**:
   - Added null checks before accessing JSON elements.
   - Added logic to handle JSON arrays properly in the `migrateTestSteps` method.
   
2. **RunnerClass.java**:
   - Improved error handling and logging to capture more details about failures.

3. **Utils.java**:
   - Added a utility method `getJsonString` to handle JSON elements and arrays safely.

These changes should help in resolving the issues with test steps not being migrated and provide better logging to diagnose any further issues.
