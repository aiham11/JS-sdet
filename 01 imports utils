Let's integrate the logic from the provided files into the existing structure, keeping the existing code and comments intact.

### `JiraOperation.java`

We'll include methods for fetching test steps and attachments.

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpEntity;
import org.apache.http.ParseException;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class JiraOperation {

	private String jiraBaseURL;
	private String jiraApiKey;
	private String jiraProjectKey;
	private String max_chunk;
	private String tcFileAttachmentDownloadLocation;
	private String tsFileAttachmentDownloadLocation;
	private static final Logger logger = LogManager.getLogger();

	public JiraOperation() {
		jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
		jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
		jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
		max_chunk = ConfigLoader.getConfigValue("MAX_VALUE_CHUNK");
		tcFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_CASE_FILE_ATTACHMENT_LOCATION");
		tsFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");
		logger.info("Jira values for the project key " + jiraProjectKey + " are assigned from rally_migration_config.properties file");
		logger.log(Level.getLevel("VERBOSE"),
				"Below the values assigned from rally_migration_config.properties file. \nJira Base URL - "
						+ jiraBaseURL + "\nJira Project Key " + jiraProjectKey + "\nMax Chunk value - " + max_chunk
						+ "\nTest Case File Attachment Download location - " + tcFileAttachmentDownloadLocation
						+ "\nTest Step File Attachment location - " + tsFileAttachmentDownloadLocation);
	}

	public ArrayList<String> getJiraNonMigratedTestcaseKeys() {
		ArrayList<String> testCaseKeys = new ArrayList<String>();
		String encodedKey = null;
		try {
			encodedKey = URLEncoder.encode(
					"projectKey = " + jiraProjectKey
							+ " AND \"Migrate Test to Rally\" = true AND \"TestCase Migrated\" = false",
					StandardCharsets.UTF_8.toString());
		} catch (UnsupportedEncodingException e) {
			logger.error("Error while encoding a part of URL ", e);
		}

		String url = jiraBaseURL + "/rest/atm/1.0/testcase/search?fields=key&maxResults=" + max_chunk + "&query="
				+ encodedKey;
		logger.info("String URL to get non migrated testcase keys from Jira " + url);

		HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
		if (response != null) {
			String result = null;
			try {
				result = EntityUtils.toString(response);
			} catch (ParseException | IOException e) {
				logger.error("Error while parsing the Json response ", e);
			}
			JSONArray jsonArray = new JSONArray(result);
			for (int i = 0; i < jsonArray.length(); i++) {
				JSONObject jsonObject = jsonArray.getJSONObject(i);
				String key = jsonObject.getString("key");
				logger.info("Key retrieved: " + jsonObject.getString("key"));
				testCaseKeys.add(key);
			}
		} else {
			logger.error("Response is NULL from while retrieving non migrated keys from JIRA. Returning NULL");
		}
		return testCaseKeys;
	}

	public JsonObject getJiraTestCaseDetails(String key) {
		JsonObject jiraJson = null;
		String url = jiraBaseURL + "/rest/atm/1.0/testcase/" + key;
		HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
		if (response != null) {
			try {
				String responseBody = EntityUtils.toString(response);
				logger.info("Testcase details for the key" + key + ": " + responseBody);
				jiraJson = JsonParser.parseString(responseBody).getAsJsonObject();
			} catch (ParseException | IOException e) {
				logger.error("Failed to retrieve JIRA testcase details for the key " + key, e);
			}
		} else {
			logger.error("Failed to get jira testcase details for the key " + key + "; Returning null");
		}
		return jiraJson;
	}

	public List<String> jiraAttachmentsDownload(String testcaseKey, String testType, String attachmentType) {
		List<String> fileAttachmentDownloadPaths = null;
		String testAttachmentUrl = null;
		if (testType.equals("testcase")) {
			testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey + "/attachments";
			logger.info("URL String for testcase attachments: " + testAttachmentUrl);
		} else if (testType.equals("teststep") && attachmentType.equals("file")) {
			testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;
			logger.info("URL String for teststep attachments: " + testAttachmentUrl);
		} else if (testType.equals("teststep") && attachmentType.equals("embedded")) {
			testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;
			logger.info("URL String for teststep attachments: " + testAttachmentUrl);
		} else {
			logger.error("Usage of jiraFileAttachmentsDownload is not correct. The argument value should be either testcase or teststep");
			return null;
		}

		HttpEntity response = Utils.getJiraResponse(testAttachmentUrl, jiraApiKey);
		if (response != null) {
			String result = null;
			try {
				result = EntityUtils.toString(response);
				if (result.trim().isEmpty() || result.equals("{}") || result.equals("[]")) {
					logger.info("No Attachment URL found for the testcase key " + testcaseKey);
				} else {
					logger.info("Attachment URL is found for the testcase key " + testcaseKey + "; JSON body: " + result);
					if (testType.equals("testcase")) {
						Map<String, String> testMap = Utils.parseJsonGetAttachmentUrlAndName(result);
						fileAttachmentDownloadPaths = Utils.downloadFileAttachmentFromJiraTestCase(testMap,
								tcFileAttachmentDownloadLocation, jiraApiKey, testcaseKey);
					} else if (testType.equals("teststep") && attachmentType.equals("file")) {
						fileAttachmentDownloadPaths = Utils.downloadFileAttachmentFromTestStep(result, jiraApiKey,
								tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL);
					} else if (testType.equals("teststep") && attachmentType.equals("embedded")) {
						List<String> descriptionAttachmentDownloadPaths, testDataAttachmentDownloadPaths, expectedResultAttachmentDownloadPaths;
						descriptionAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
								tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "description");
						testDataAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
								tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "testData");
						expectedResultAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
								tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "expectedResult");
						descriptionAttachmentDownloadPaths.addAll(testDataAttachmentDownloadPaths);
						descriptionAttachmentDownloadPaths.addAll(expectedResultAttachmentDownloadPaths);
						fileAttachmentDownloadPaths = descriptionAttachmentDownloadPaths;
					} else {
						logger.error("Usage of jiraFileAttachmentsDownload is not correct. The argument value should be either testcase or teststep");
						return null;
					}
				}
			} catch (ParseException | IOException e) {
				logger.error("Error while parsing the Json response ", e);
			}
		} else {
			logger.error("Response is NULL while retrieving non migrated keys from JIRA. Returning NULL");
		}
		return fileAttachmentDownloadPaths;
	}

	// Method to fetch test steps from JIRA for a given test case ID
	public List<JiraTestStep> getTestSteps(String testCaseId) {
		List<JiraTestStep> testSteps = new ArrayList<>();
		CloseableHttpClient httpClient = HttpClients.createDefault();

		try {
			String url = jiraBaseURL + "/rest/api/2/issue/" + testCaseId + "/teststeps";
			HttpGet request = new HttpGet(url);
			request.addHeader("Authorization", "Basic " + jiraApiKey);

			HttpResponse response = httpClient.execute(request);
			String jsonResponse = EntityUtils.toString(response.getEntity());

			JSONObject jsonObject = new JSONObject(jsonResponse);
			JSONArray stepsArray = jsonObject.getJSONArray("testSteps");

			for (int i = 0; i < stepsArray.length(); i++) {
				JSONObject stepJson = stepsArray.getJSONObject(i);
				JiraTestStep step = new JiraTestStep();
				step.setId(stepJson.getInt("id"));
				step.setDescription(stepJson.getString("description"));
				step.setExpectedResult(stepJson.getString("expectedResult"));
				step.setIndex(stepJson.getInt("index"));
				step.setTestData(stepJson.getString("testData

"));
				testSteps.add(step);
			}

			logger.info("Fetched " + testSteps.size() + " test steps for test case ID: " + testCaseId);

		} catch (Exception e) {
			logger.error("Error fetching test steps for test case ID: " + testCaseId, e);
		} finally {
			try {
				httpClient.close();
			} catch (Exception e) {
				logger.error("Error closing HttpClient", e);
			}
		}

		return testSteps;
	}
}
```

### `RallyOperation.java`

Include methods to handle test steps and attachments.

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

public class RallyOperation {

	private String rallyBaseURL;
	private String rallyApiKey;
	private String rallyProjectKey;
	private String rallyUser;
	private static final Logger logger = LogManager.getLogger();

	public RallyOperation() {
		rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
		rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
		rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
		rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
		logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
		logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
	}

	public String createRallyTestcase(JsonObject jiraJson) throws IOException {
		String rallyTestCaseOID = null;
		JsonObject rallyJson = new JsonObject();
		rallyJson.addProperty("projectRef", rallyProjectKey);
		JsonObject testCase = new JsonObject();
		JsonElement nameElement = jiraJson.get("name");
		if (nameElement != null && !nameElement.isJsonNull()) {
			testCase.addProperty("Name", nameElement.getAsString());
		} else {
			testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira");
		}
		testCase.addProperty("Method", "Manual");
		JsonElement priorityElement = jiraJson.get("priority");
		if (priorityElement != null && !priorityElement.isJsonNull()) {
			String priority = priorityElement.getAsString();
			if (priority.equalsIgnoreCase("Normal")) {
				testCase.addProperty("Priority", "Useful");
			} else {
				testCase.addProperty("Priority", priority);
			}
		} else {
			testCase.addProperty("Priority", "Default Priority");
		}
		testCase.addProperty("Owner", "/user/" + rallyUser);
		JsonElement statusElement = jiraJson.get("status");
		if (statusElement != null && !statusElement.isJsonNull()) {
			testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
		} else {
			testCase.addProperty("Ready", false);
		}
		JsonArray tagsArray = new JsonArray();
		if (jiraJson.has("labels")) {
			JsonArray labelsArray = jiraJson.get("labels").getAsJsonArray();
			RallyRestApi restApi = null;
			try {
				restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
				for (JsonElement labelElement : labelsArray) {
					String label = labelElement.getAsString();
					JsonObject tag = Utils.findOrCreateTag(restApi, label);
					if (tag != null) {
						tagsArray.add(tag);
					}
				}
			} catch (URISyntaxException e) {
				logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
			}
			testCase.add("Tags", tagsArray);
		}
		String folderPath = jiraJson.get("folder").getAsString();
		String[] folderHierarchy = folderPath.split("/");
		JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
		if (testFolder == null) {
			logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
			return rallyTestCaseOID;
		} else logger.info("Folder " + folderPath + " is  created successfully in Rally");

		rallyJson.add("TestFolder", testFolder);
		rallyJson.add("testCase", testCase);
		String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

		RallyRestApi restApi = null;
		try {
			restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
		} catch (URISyntaxException e) {
			logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
		}
		restApi.setApplicationName("CreateTestCaseApp");

		JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();
		JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
		JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

		try {
			JsonObject newTestCase = new JsonObject();
			newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
			newTestCase.addProperty("Project", rallyProjectKey);
			newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
			newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
			newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
			newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

			JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
			if (tagsArrayFromJson != null) {
				JsonArray newTagsArray = new JsonArray();
				for (JsonElement tagElement : tagsArrayFromJson) {
					JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
					String tagRef = tagObjectFromJson.get("_ref").getAsString();
					JsonObject newTagObject = new JsonObject();
					newTagObject.addProperty("_ref", tagRef);
					newTagsArray.add(newTagObject);
				}
				newTestCase.add("Tags", newTagsArray);
			}
			String testFolderRef = testFolderData.get("_ref").getAsString();
			newTestCase.addProperty("TestFolder", testFolderRef);

			CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
			CreateResponse createResponse = null;
			try {
				createResponse = restApi.create(createRequest);
			} catch (IOException e) {
				logger.error("IO exception during create request.", e);
			}
			if (createResponse.wasSuccessful()) {
				rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
				logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());
			} else {
				logger.error("Error occurred creating test case");
				for (String error : createResponse.getErrors()) {
					logger.error(error);
				}
			}
		} finally {
			try {
				restApi.close();
				logger.info("Closed rest api resource in finally block");
			} catch (IOException e) {
				logger.error("Error occurred while closing rest api resource at finally block", e);
			}
		}
		return rallyTestCaseOID;
	}

	public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID, List<String> filePaths) {
		List<String> testcaseAttachmentOIDs = new ArrayList<String>();
		RallyRestApi rallyApi = null;
		try {
			rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
		} catch (URISyntaxException e) {
			logger.error("Rally Base URL has some syntax error.", e);
		}
		try {
			for (String filePath : filePaths) {
				try {
					testcaseAttachmentOIDs.add(attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath));
					logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
				} catch (IOException e) {
					testcaseAttachmentOIDs.clear();
					logger.error("File " + filePath + " is not attached to Rally due to IO exception.", e);
					return testcaseAttachmentOIDs;
				}
			}
		} finally {
			try {
				rallyApi.close();
			} catch (IOException e) {
				logger.error("Ready API resource is not closed due to IO exception.", e);


			}
		}
		return testcaseAttachmentOIDs;
	}

	public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
		byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
		String encodedContent = Base64.getEncoder().encodeToString(fileContent);

		String ContentType = null;
		String attachmentType = filePath.substring(filePath.lastIndexOf('.') + 1).toLowerCase();

		switch (attachmentType) {
			case "png":
				ContentType = "image/png";
				break;
			case "txt":
				ContentType = "text/plain";
				break;
			case "jpeg":
			case "jpg":
				ContentType = "image/jpeg";
				break;
			case "xml":
				ContentType = "application/xml";
				break;
			case "gif":
				ContentType = "image/gif";
				break;
			case "doc":
				ContentType = "application/msword";
				break;
			case "docx":
				ContentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
				break;
			case "xls":
				ContentType = "application/vnd.ms-excel";
				break;
			case "xlsx":
				ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
				break;
			case "zip":
				ContentType = "application/zip";
				break;
			default:
				ContentType = "application/octet-stream";
				break;
		}

		JsonObject attachmentContent = new JsonObject();
		attachmentContent.addProperty("Content", encodedContent);
		CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
		CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
		if (!attachmentContentResponse.wasSuccessful()) {
			logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
			return null;
		}
		String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();

		JsonObject attachment = new JsonObject();
		attachment.addProperty("Artifact", "/testcase/" + testCaseId);
		attachment.addProperty("Content", attachmentContentRef);
		attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
		attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
		attachment.addProperty("ContentType", ContentType);
		attachment.addProperty("Size", fileContent.length);
		CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
		CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
		if (attachmentResponse.wasSuccessful()) {
			logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
			return attachmentResponse.getObject().get("_ref").getAsString();
		} else {
			logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
			return null;
		}
	}

	// Method to migrate test steps from JIRA to Rally
	public void migrateTestSteps(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi) {
		Collections.reverse(jiraTestSteps);

		for (JiraTestStep step : jiraTestSteps) {
			try {
				JsonObject newTestStep = new JsonObject();
				newTestStep.addProperty("TestCase", rallyTestCaseRef);
				newTestStep.addProperty("StepIndex", step.getIndex());
				newTestStep.addProperty("Input", step.getDescription());
				newTestStep.addProperty("ExpectedResult", step.getExpectedResult());
				newTestStep.addProperty("TestData", step.getTestData());

				CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
				CreateResponse createResponse = rallyRestApi.create(createRequest);

				if (createResponse.wasSuccessful()) {
					logger.info("Successfully created test step: " + step.getDescription());
				} else {
					logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
				}
			} catch (Exception e) {
				logger.error("Exception while creating test step: " + step.getDescription(), e);
			}
		}
	}
}
```

### `RunnerClass.java`

Update the `RunnerClass` to use the methods from the refactored `JiraOperation` and `RallyOperation` classes.

```java
package com.optum.coe.automation.rally;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class RunnerClass {
	private static final Logger logger = LogManager.getLogger();

	public static void main(String[] args) {
		try {
			Gson gson = new Gson();
			JiraTestCase jiraTestCase = new JiraTestCase();
			JiraOperation jiraOperation = new JiraOperation();
			ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

			String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
			String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
			RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

			for (String testcaseKey : testcaseKeys) {
				boolean rallyTestcaseCreationStatus = false;
				boolean rallyOverallTestStepAttachmentsStatus = false;
				jiraTestCase.setKey(testcaseKey);
				logger.info("Processing " + jiraTestCase.getKey());
				JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
				RallyOperation rallyOperation = new RallyOperation();
				String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

				if (rallyTestcaseOID != null) {
					rallyTestcaseCreationStatus = true;
				} else {
					logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
					break;
				}

				List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
				List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
				List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

				if (fileAttachmentDownloadPathsTestcaseLevel != null) {
					logger.info("Attachment paths are found in the list.");
					List<String> testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
					Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);

					if (!testcaseAttachmentOIDs.isEmpty()) {
						rallyOverallTestStepAttachmentsStatus = true;
					} else {
						logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
						return;
					}
				} else {
					logger.info("No Attachment path found for Testcase level.");
				}

				JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
				List<JiraTestStep> testSteps = new ArrayList<>();

				for (JsonElement element : stepsArray) {
					JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
					testSteps.add(step);
				}

				rallyOperation.migrateTestSteps(rallyTestcaseOID, testSteps, rallyRestApi);

				if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
					System.out.println("Rally Testcase Creation Status is true");
				} else {
					logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
				}
			}
		} catch (Exception e) {
			logger.error("Error occurred during the migration process", e);
		}
	}
}
```

### Summary

1. **`JiraOperation.java`**: Refactored to include methods for fetching test steps and attachments.
2. **`RallyOperation.java`**: Refactored to include methods for creating test steps and handling attachments.
3. **`RunnerClass.java`**: Uses methods from `JiraOperation` and `RallyOperation` to manage the migration process, keeping existing structure and comments intact.

Please integrate these changes and replace any placeholders with actual data from your environment. If further adjustments or specific implementations are needed, let me know!
