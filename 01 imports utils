import java.io.File;

// ...

public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, Map<Integer, List<String>> embeddedAttachmentsMap) {
    Set<String> processedAttachments = new HashSet<>();

    for (JiraTestStep jiraTestStep : jiraTestSteps) {
        try {
            JsonObject newTestStep = new JsonObject();
            newTestStep.addProperty("TestCase", rallyTestCaseOID);
            newTestStep.addProperty("StepIndex", jiraTestStep.getIndex() + 1);  // Adjust the index to start from 1
            
            // Combine "Step" and "Test Data" fields into the "Input" field in Rally
            String inputField = (jiraTestStep.getStep() != null ? jiraTestStep.getStep() : "") +
                                (jiraTestStep.getTestData() != null ? "\n" + jiraTestStep.getTestData() : "");
            newTestStep.addProperty("Input", inputField);
            
            // Map "Expected Result" field from Jira directly to Rally's "Expected Result"
            newTestStep.addProperty("ExpectedResult", jiraTestStep.getExpectedResult());

            // Handle embedded attachments specific to this test step
            List<String> stepEmbeddedAttachments = embeddedAttachmentsMap.get(jiraTestStep.getIndex());
            if (stepEmbeddedAttachments != null && !stepEmbeddedAttachments.isEmpty()) {
                for (String embeddedPath : stepEmbeddedAttachments) {
                    if (!processedAttachments.contains(embeddedPath)) {
                        // Use File class to handle paths
                        File file = new File(embeddedPath);
                        String filename = file.getName();
                        String[] attachmentParts = filename.split("_");

                        if (attachmentParts.length > 1) {
                            try {
                                // Extract the step number from the first part of the filename
                                int attachmentStepNumber = Integer.parseInt(attachmentParts[0]);

                                // Debugging logs
                                logger.debug("Processing attachment: " + filename + " for Jira step index: " + (jiraTestStep.getIndex() + 1) + " (attachment step: " + attachmentStepNumber + ")");

                                // Check if this attachment corresponds to the current step
                                if (attachmentStepNumber == jiraTestStep.getIndex() + 1) {
                                    String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, embeddedPath);
                                    String attachmentOID = extractOID(attachmentURL);
                                    if (attachmentOID != null) {
                                        // Determine whether the attachment belongs to Input or ExpectedResult
                                        if (filename.contains("testData") || filename.contains("description")) {
                                            String currentInput = newTestStep.has("Input") ? newTestStep.get("Input").getAsString() : "";
                                            newTestStep.addProperty("Input", currentInput + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                                            logger.info("Attachment added to Input field for Test Step " + (jiraTestStep.getIndex() + 1) + ": " + embeddedPath);
                                        } else if (filename.contains("expectedResult")) {
                                            String currentExpectedResult = newTestStep.has("ExpectedResult") ? newTestStep.get("ExpectedResult").getAsString() : "";
                                            newTestStep.addProperty("ExpectedResult", currentExpectedResult + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                                            logger.info("Attachment added to Expected Result field for Test Step " + (jiraTestStep.getIndex() + 1) + ": " + embeddedPath);
                                        } else {
                                            logger.warn("Attachment name does not contain a recognized field identifier (testData, description, expectedResult): " + embeddedPath);
                                        }
                                    }
                                    processedAttachments.add(embeddedPath);  // Mark this attachment as processed
                                } else {
                                    logger.debug("Attachment " + filename + " does not match step " + (jiraTestStep.getIndex() + 1) + " (it matches step " + attachmentStepNumber + ").");
                                }
                            } catch (NumberFormatException e) {
                                logger.error("Failed to parse step number from attachment name: " + filename, e);
                            }
                        } else {
                            logger.warn("Unexpected attachment filename format: " + filename);
                        }
                    }
                }
            } else {
                logger.debug("No attachments found for step index: " + jiraTestStep.getIndex());
            }

            CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
            CreateResponse createResponse = rallyApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                String testStepURL = createResponse.getObject().get("_ref").getAsString();
                String testStepOID = extractOID(testStepURL);
                logger.info("Successfully created test step in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
            } else {
                logger.error("Failed to create test step in Rally: " + createResponse.getErrors());
            }
        } catch (IOException e) {
            logger.error("Exception occurred while creating test step in Rally", e);
        }
    }
}
