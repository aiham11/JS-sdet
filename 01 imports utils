Here's the full updated `Utils` and `JiraOperation` classes based on the changes we've discussed:

### **Updated `Utils` Class**

```java
package com.optum.coe.automation.rally;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;

public class Utils {

    private static final Logger logger = LogManager.getLogger();

    public static HttpEntity getJiraResponse(String url, String apiKey) {

        CloseableHttpClient connection = HttpClients.createDefault();
        HttpGet request = new HttpGet(url);
        request.setHeader("Authorization", "Bearer " + apiKey);
        CloseableHttpResponse response = null;
        try {
            response = connection.execute(request);
        } catch (ClientProtocolException e) {
            logger.error("Error occurred in Jira connection while connecting " + url, e);
        } catch (IOException e) {
            logger.error("Error occurred in Jira connection while connecting " + url, e);
        }
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            logger.info("Successfully returned HttpEntity response for the URL " + url);
            return entity;
        } else {
            logger.error("Error occurred. HttpEntity is null and no response is received for the URL: " + url);
            return null;
        }
    }

    public static JsonObject findOrCreateTag(RallyRestApi restApi, String tagName) throws IOException {
        QueryRequest tagRequest = new QueryRequest("Tag");
        tagRequest.setQueryFilter(new QueryFilter("Name", "=", tagName));
        QueryResponse tagResponse = restApi.query(tagRequest);

        if (tagResponse.getResults().size() > 0) {
            return tagResponse.getResults().get(0).getAsJsonObject();
        }

        JsonObject newTag = new JsonObject();
        newTag.addProperty("Name", tagName);

        CreateRequest createTagRequest = new CreateRequest("Tag", newTag);
        CreateResponse createTagResponse = restApi.create(createTagRequest);

        if (createTagResponse.wasSuccessful()) {
            return createTagResponse.getObject();
        } else {
            System.out.println("Error occurred creating tag:");
            for (String error : createTagResponse.getErrors()) {
                System.out.println(error);
            }
            return null;
        }
    }

    public static JsonObject createTestFolder(String[] folderHierarchy, String projectRef, String rallyBaseUrl, String rallyApiKey) {
        JsonObject lastFolder = null;
        String lastFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseUrl), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            for (int i = 0; i < folderHierarchy.length; i++) {
                String folderName = folderHierarchy[i];
                if (folderName == null || folderName.trim().isEmpty()) {
                    logger.info("Invalid folder name encountered: '" + folderName + "'");
                    continue;
                }

                if (i == 0) {
                    QueryRequest parentFolderExistenceRequest = new QueryRequest("testfolder");
                    parentFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", "null")));
                    parentFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse parentQueryResponse = restApi.query(parentFolderExistenceRequest);

                    if (parentQueryResponse.wasSuccessful() && parentQueryResponse.getTotalResultCount() > 0) {
                        lastFolder = parentQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Parent folder already exists: " + lastFolderRef);
                    } else {
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created parent folder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating parent folder.");
                            for (String error : createFolderResponse.getErrors()) {
                                System.out.println(error);
                            }
                            break;
                        }
                    }
                } else {
                    QueryRequest subFolderExistenceRequest = new QueryRequest("testfolder");
                    subFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", lastFolderRef)));
                    subFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse subQueryResponse = restApi.query(subFolderExistenceRequest);

                    if (subQueryResponse.wasSuccessful() && subQueryResponse.getTotalResultCount() > 0) {
                        lastFolder = subQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Subfolder already exists: " + lastFolderRef);
                    } else {
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);
                        newFolder.addProperty("Parent", lastFolderRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created subfolder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating subfolder");
                            for (String error : createFolderResponse.getErrors()) {
                                System.out.println(error);
                            }
                            break;
                        }
                    }
                }
            }

            return lastFolder;

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static Map<String, String> pharseJsonGetAttachmentUrlAndName(String jsonResponse) {
        Map<String, String> attachmentMap = new HashMap<>();
        JSONArray jArrayResponse = new JSONArray(jsonResponse);
        for (int i = 0; i < jArrayResponse.length(); i++) {
            JSONObject jsonObject = jArrayResponse.getJSONObject(i);
            String url = jsonObject.getString("url");
            String name = jsonObject.getString("filename");
            attachmentMap.put(url, name);
        }
        return attachmentMap;
    }

    public static List<String> downloadFileAttachmentFromJiraTestCase(Map<String, String> attachmentMap, String tcAttachmentDownloadLocation, String jiraApiKey, String testcaseKey) throws IOException {
        List<String> filePaths = new ArrayList<>();
        Path path = Paths.get(tcAttachmentDownloadLocation);
        if (!Files.exists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        for (Map.Entry<String, String> entry : attachmentMap.entrySet()) {
            String fileUrl = entry.getKey();
            String fileName = entry.getValue();
            HttpEntity response = Utils.getJiraResponse(fileUrl, jiraApiKey);

            if (response != null) {
                try (InputStream in = response.getContent()) {
                    Files.copy(in, Paths.get(tcAttachmentDownloadLocation + "/" + fileName));
                    filePaths.add(tcAttachmentDownloadLocation + "/" + fileName);
                    EntityUtils.consume(response);
                    logger.info("File downloaded from Jira to tcAttachmentDownloadLocation. File Name:" + fileName);
                } catch (IOException e) {
                    logger.error("Failed to download the file attachments from Jira for Testcase level", e);
                }
            } else {
                logger.error("Failed to download the file attachment " + fileName + " from Jira for Testcase level. No Entity response found");
            }
        }
        return filePaths;
   

 }

    public static List<String> downloadFileAttachmentFromTestStep(String jsonResponse, String apiToken, String testStepFileAttachmentLocationToBeSaved, String tC_Id, String baseURL) throws IOException {
        List<String> filePaths = new ArrayList<>();
        JSONObject jsonObject = new JSONObject(jsonResponse);
        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
        Path path = Paths.get(testStepFileAttachmentLocationToBeSaved);
        if (!Files.exists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        for (int i = 0; i < stepsArray.length(); i++) {
            JSONObject stepObject = stepsArray.getJSONObject(i);
            int index = stepObject.getInt("index");
            int stepNumber = index + 1;
            if (stepObject.has("attachments")) {
                JSONArray attachmentsArray = stepObject.getJSONArray("attachments");
                for (int j = 0; j < attachmentsArray.length(); j++) {
                    JSONObject attachmentObject = attachmentsArray.getJSONObject(j);
                    int attachmentID = attachmentObject.getInt("id");
                    int attachmentNumber = j + 1;
                    String attachmentFileName = attachmentObject.getString("name");
                    String testStepAttachmentUrl = baseURL + "/rest/tests/1.0/attachment/" + attachmentID;
                    HttpEntity response = Utils.getJiraResponse(testStepAttachmentUrl, apiToken);
                    if (response != null) {
                        try (InputStream in = response.getContent()) {
                            Path filePath = Paths.get(testStepFileAttachmentLocationToBeSaved + "/" + stepNumber + "_" + attachmentNumber + "_" + attachmentFileName);
                            if (Files.exists(filePath)) {
                                filePath = Paths.get(testStepFileAttachmentLocationToBeSaved + "/" + stepNumber + "_" + attachmentNumber + "_" + System.currentTimeMillis() + "_" + attachmentFileName);
                            }
                            Files.copy(in, filePath);
                            filePaths.add(filePath.toString());
                            EntityUtils.consume(response);
                            logger.info("File downloaded from Jira to testStepFileAttachmentLocation. File Name:" + attachmentFileName);
                        } catch (IOException e) {
                            logger.error("Failed to download the file attachments from Jira for Test step level", e);
                        }
                    } else {
                        logger.error("Failed to download the file attachment " + attachmentFileName + " from Jira for Test step level. No Entity response found");
                    }
                }
            }
        }
        return filePaths;
    }

    public static List<String> downloadTestStepEmbeddedAttachments(String jsonResponse, String apiToken, String testStepAttachmentLocationToBeSaved, String tC_Id, String baseURL, String columnName) throws IOException {
        List<String> filePaths = new ArrayList<>();
        JSONObject jsonObject = new JSONObject(jsonResponse);
        JSONArray stepsArray = jsonObject.getJSONObject("testScript").getJSONArray("steps");
        Path path = Paths.get(testStepAttachmentLocationToBeSaved);
        if (!Files.exists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        for (int i = 0; i < stepsArray.length(); i++) {
            JSONObject stepObject = stepsArray.getJSONObject(i);
            int index = stepObject.getInt("index");
            int stepNumber = index + 1;
            if ((columnName.equals("description")) || (columnName.equals("testData")) || (columnName.equals("expectedResult"))) {
                if (stepObject.has(columnName)) {
                    String htmlContent = stepObject.getString(columnName);
                    Document doc = Jsoup.parse(htmlContent);
                    Elements imgElements = doc.select("img");
                    if (!imgElements.isEmpty()) {
                        int imageCount = 0;
                        for (Element img : imgElements) {
                            String imageUrl = img.attr("src");
                            if (!imageUrl.isEmpty()) {
                                imageCount++;
                                String extractUrl = imageUrl.substring(2);
                                String absoluteUrl = baseURL + extractUrl;
                                HttpEntity response = Utils.getJiraResponse(absoluteUrl, apiToken);
                                if (response != null) {
                                    try (InputStream in = response.getContent()) {
                                        Path filePath = Paths.get(testStepAttachmentLocationToBeSaved + "/" + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + ".png");
                                        if (Files.exists(filePath)) {
                                            filePath = Paths.get(testStepAttachmentLocationToBeSaved + "/" + stepNumber + "_" + imageCount + "_" + System.currentTimeMillis() + "_EmbeddedFile_" + columnName + ".png");
                                        }
                                        Files.copy(in, filePath);
                                        filePaths.add(filePath.toString());
                                        EntityUtils.consume(response);
                                        logger.info("File downloaded from Jira to testStepAttachmentLocation. File Name: " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + ".png");
                                    } catch (IOException e) {
                                        logger.error("Failed to download the embedded file attachments from Jira for test step level", e);
                                    }
                                } else {
                                    logger.error("Failed to download the embedded file attachment " + stepNumber + "_" + imageCount + "_" + "_EmbeddedFile_" + columnName + " from Jira for test step level. No Entity response found");
                                }
                            }
                        }
                    }
                }
            } else {
                logger.error("No Valid argument is passed to the method. It should be either description OR testData OR expectedResult");
            }
        }
        return filePaths;
    }

    public static void deleteAttachmentFileFromLocal(List<String> filePaths) {
        for (String filePath : filePaths) {
            File file = new File(filePath);
            if (file.exists()) {
                file.delete();
                logger.info("The file " + filePath + " is deleted for next attachment download run.");
            }
        }
    }

    public static String getJsonString(JsonObject jsonObject, String key) {
        JsonElement element = jsonObject.get(key);
        if (element != null && !element.isJsonNull()) {
            if (element.isJsonArray()) {
                StringBuilder dataBuilder = new StringBuilder();
                JsonArray dataArray = element.getAsJsonArray();
                for (JsonElement jsonElement : dataArray) {
                    if (dataBuilder.length() > 0) {
                        dataBuilder.append(", ");
                    }
                    dataBuilder.append(jsonElement.getAsString());
                }
                return dataBuilder.toString();
            } else {
                return element.getAsString();
            }
        } else {
            logger.warn("Key {} not found or is null in JsonObject", key);
            return ""; // Or some default value
        }
    }
}
```

### **Updated `JiraOperation` Class**

```java
package com.optum.coe.automation.rally;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.google.gson.JsonObject;

import org.apache.http.HttpEntity;
import org.apache.http.ParseException;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

public class JiraOperation {

    private String jiraBaseURL;
    private String jiraApiKey;
    private String jiraProjectKey;
    private String max_chunk;
    private String tcFileAttachmentDownloadLocation;
    private static String tsFileAttachmentDownloadLocation;
    private static final Logger logger = LogManager.getLogger();

    public JiraOperation() {
        jiraBaseURL = ConfigLoader.getConfigValue("JIRA_BASE_URL");
        jiraApiKey = ConfigLoader.getConfigValue("JIRA_API_TOKEN");
        jiraProjectKey = ConfigLoader.getConfigValue("JIRA_PROJECT_KEY");
        max_chunk = ConfigLoader.getConfigValue("MAX_VALUE_CHUNK");
        tcFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_CASE_FILE_ATTACHMENT_LOCATION");
        tsFileAttachmentDownloadLocation = ConfigLoader.getConfigValue("TEST_STEP_FILE_ATTACHMENT_LOCATION");
        logger.info("Jira values for the project key " + jiraProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"),
                "Below the values assigned from rally_migration_config.properties file. \nJira Base URL - "
                        + jiraBaseURL + "\nJira Project Key " + jiraProjectKey + "\nMax Chunk value - " + max_chunk
                        + "\nTest Case File Attachment Download location - " + tcFileAttachmentDownloadLocation
                        + "\nTest Step File Attachment location - " + tsFileAttachmentDownloadLocation);
    }

    public ArrayList<String> getJiraNonMigratedTestcaseKeys() {
        ArrayList<String> testCaseKeys = new ArrayList<>();
        String encodedKey = null;
        try {
            encodedKey = java.net.URLEncoder.encode(
                    "projectKey = " + jiraProjectKey
                            + " AND \"Migrate Test to Rally\" = true AND \"TestCase Migrated\" = false",
                    java.nio.charset.StandardCharsets.UTF_8.toString());
        } catch (IOException e) {
            logger.error("Error while encoding a part of URL ", e);
        }

        String url = jiraBaseURL + "/rest/atm/1.0/testcase/search?fields=key&maxResults=" + max_chunk + "&query="
                + encodedKey;
        logger.info("String URL to get non migrated testcase keys from Jira " + url);

        HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
        if (response != null) {
            String result = null;
            try {
                result = EntityUtils

.toString(response);
            } catch (ParseException | IOException e) {
                logger.error("Error while parsing the Json response ", e);
            }
            JSONArray jsonArray = new JSONArray(result);
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                String key = jsonObject.getString("key");
                logger.info("Key retrieved: " + jsonObject.getString("key"));
                testCaseKeys.add(key);
            }
        } else {
            logger.error("Response is NULL while retrieving non migrated keys from JIRA. Returning NULL");
        }
        return testCaseKeys;
    }

    public JsonObject getJiraTestCaseDetails(String key) {
        JsonObject jiraJson = null;
        String url = jiraBaseURL + "/rest/atm/1.0/testcase/" + key;
        HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
        if (response != null) {
            try {
                String responseBody = EntityUtils.toString(response);
                logger.info("Testcase details for the key" + key + ": " + responseBody);
                jiraJson = com.google.gson.JsonParser.parseString(responseBody).getAsJsonObject();
            } catch (ParseException | IOException e) {
                logger.error("Failed to retrieve JIRA testcase details for the key " + key, e);
            }
        } else {
            logger.error("Failed to get jira testcase details for the key " + key + "; Returning null");
        }
        return jiraJson;
    }

    public List<String> jiraAttachmentsDownload(String testcaseKey, String testType, String attachmentType) {
        List<String> fileAttachmentDownloadPaths = null;
        String testAttachmentUrl = null;
        if (testType.equals("testcase")) {
            testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey + "/attachments";
            logger.info("URL String for testcase attachments: " + testAttachmentUrl);
        } else if (testType.equals("teststep") && attachmentType.equals("file")) {
            testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;
            logger.info("URL String for teststep attachments: " + testAttachmentUrl);
        } else if (testType.equals("teststep") && attachmentType.equals("embedded")) {
            testAttachmentUrl = jiraBaseURL + "/rest/atm/1.0/testcase/" + testcaseKey;
            logger.info("URL String for teststep attachments: " + testAttachmentUrl);
        } else {
            logger.error("Usage of jiraFileAttachmentsDownload is not correct. The argument value should be either testcase or teststep");
            return null;
        }

        HttpEntity response = Utils.getJiraResponse(testAttachmentUrl, jiraApiKey);
        if (response != null) {
            String result = null;
            try {
                result = EntityUtils.toString(response);
                if (result.trim().isEmpty() || result.equals("{}") || result.equals("[]")) {
                    logger.info("No Attachment URL found for the testcase key " + testcaseKey);
                } else {
                    logger.info("Attachment URL is found for the testcase key " + testcaseKey + "; JSON body: " + result);
                    if (testType.equals("testcase")) {
                        Map<String, String> testMap = Utils.pharseJsonGetAttachmentUrlAndName(result);
                        fileAttachmentDownloadPaths = Utils.downloadFileAttachmentFromJiraTestCase(testMap,
                                tcFileAttachmentDownloadLocation, jiraApiKey, testcaseKey);
                    } else if (testType.equals("teststep") && attachmentType.equals("file")) {
                        fileAttachmentDownloadPaths = Utils.downloadFileAttachmentFromTestStep(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL);
                    } else if (testType.equals("teststep") && attachmentType.equals("embedded")) {
                        List<String> descriptionAttachmentDownloadPaths, testDataAttachmentDownloadPaths, expectedResultAttachmentDownloadPaths;
                        descriptionAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "description");
                        testDataAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "testData");
                        expectedResultAttachmentDownloadPaths = Utils.downloadTestStepEmbeddedAttachments(result, jiraApiKey,
                                tsFileAttachmentDownloadLocation, testcaseKey, jiraBaseURL, "expectedResult");
                        descriptionAttachmentDownloadPaths.addAll(testDataAttachmentDownloadPaths);
                        descriptionAttachmentDownloadPaths.addAll(expectedResultAttachmentDownloadPaths);
                        fileAttachmentDownloadPaths = descriptionAttachmentDownloadPaths;
                    } else {
                        logger.error("Usage of jiraFileAttachmentsDownload is not correct. The argument value should be either testcase or teststep");
                        return null;
                    }
                }
            } catch (ParseException | IOException e) {
                logger.error("Error while parsing the Json response ", e);
            }
        } else {
            logger.error("Response is NULL while retrieving non migrated keys from JIRA. Returning NULL");
        }
        return fileAttachmentDownloadPaths;
    }

    public List<String> downloadEmbeddedImages(JiraTestStep step) {
        List<String> embeddedImageUrls = step.getEmbeddedImageUrls();
        List<String> downloadedPaths = new ArrayList<>();
        String jiraBaseUrl = ConfigLoader.getConfigValue("JIRA_BASE_URL");

        if (embeddedImageUrls == null || embeddedImageUrls.isEmpty()) {
            logger.warn("No embedded images found for the test step: " + step.getDescription());
            return downloadedPaths;
        }

        for (String imageUrl : embeddedImageUrls) {
            if (imageUrl != null && !imageUrl.isEmpty()) {
                try {
                    String fullUrl = imageUrl.startsWith("http") ? imageUrl : jiraBaseUrl + imageUrl.replace("../", "/");

                    logger.info("Downloading image from URL: " + fullUrl);
                    String filePath = Utils.downloadFileFromUrl(fullUrl, "C:attachments");
                    if (filePath != null) {
                        downloadedPaths.add(filePath);
                        logger.info("Downloaded image to: " + filePath);
                    } else {
                        logger.error("Failed to download image from URL: " + fullUrl);
                    }
                } catch (Exception e) {
                    logger.error("Exception while downloading image from URL: " + imageUrl, e);
                }
            } else {
                logger.warn("Encountered null or empty image URL.");
            }
        }
        return downloadedPaths;
    }

    public List<JiraTestStep> getTestSteps(String testCaseId) {
        List<JiraTestStep> testSteps = new ArrayList<>();
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            String url = jiraBaseURL + "/rest/api/2/issue/" + testCaseId + "/teststeps";
            HttpGet request = new HttpGet(url);
            request.addHeader("Authorization", "Basic " + jiraApiKey);

            HttpEntity response = Utils.getJiraResponse(url, jiraApiKey);
            if (response != null) {
                String jsonResponse = EntityUtils.toString(response);
                JSONObject jsonObject = new JSONObject(jsonResponse);
                JSONArray stepsArray = jsonObject.getJSONArray("testSteps");

                logger.info("URL used to fetch test steps: " + url);
                logger.info("Number of test steps retrieved: " + stepsArray.length());

                for (int i = 0; i < stepsArray.length(); i++) {
                    JSONObject stepJson = stepsArray.getJSONObject(i);
                    JiraTestStep step = new JiraTestStep();
                    step.setId(stepJson.getInt("id"));
                    step.setDescription(stepJson.getString("description"));
                    step.setExpectedResult(stepJson.getString("expectedResult"));
                    step.setIndex(stepJson.getInt("index"));
                    step.setTestData(stepJson.getString("testData"));
                    testSteps.add(step);
                }
            } else {
                logger.error("Error fetching test steps for test case ID: " + testCaseId);
            }
        } catch (Exception e) {
            logger.error("Error fetching test steps for test case ID: " + testCaseId, e);
        }

        return testSteps;
    }

    public static String getFileNameFromUrl(String url) {
        return url.substring(url.lastIndexOf('/') + 1);
    }
}
```

### **Key Changes:**
1. **In `Utils` Class:**
   - Provided a proper implementation for downloading file attachments from test cases and test steps, ensuring all necessary parameters are correctly handled.
   - Added a method to handle embedded attachments, parsing them from HTML content.
   - Created helper methods to extract strings from JSON objects safely.

2. **In `JiraOperation` Class:**
   - Updated the methods to correctly handle the interaction with the `Utils` class, especially the ones dealing with file attachment downloads.
   - Ensured consistency in how URLs are constructed and managed across the methods.

These updates should address the previous issues and provide the necessary functionality to handle file attachments and embedded content during the migration process from Jira to Rally.
