To address the issues and update your framework accordingly, let's walk through the necessary changes in your `RunnerClass.java`:

### Issue 1: Attachments in the test steps
We need to ensure that attachments and images embedded in test steps from JIRA are downloaded and then uploaded to the corresponding test steps in Rally.

### Updated `RunnerClass.java`

Let's modify the `RunnerClass` to include these functionalities:

1. **Downloading attachments and images from JIRA test steps.**
2. **Uploading them to the corresponding Rally test steps.**

Here is how you can update the `RunnerClass`:

```java
package com.optum.coe.automation.rally;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class RunnerClass {
    private static final Logger logger = LogManager.getLogger();

    public static void main(String[] args) {
        try {
            Gson gson = new Gson();
            JiraTestCase jiraTestCase = new JiraTestCase();
            JiraOperation jiraOperation = new JiraOperation();
            ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

            String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
            String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
            RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

            for (String testcaseKey : testcaseKeys) {
                boolean rallyTestcaseCreationStatus = false;
                boolean rallyOverallTestStepAttachmentsStatus = false;
                jiraTestCase.setKey(testcaseKey);
                logger.info("Processing " + jiraTestCase.getKey());
                JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
                RallyOperation rallyOperation = new RallyOperation();
                String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

                if (rallyTestcaseOID != null) {
                    rallyTestcaseCreationStatus = true;
                } else {
                    logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                    break;
                }

                List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");

                if (fileAttachmentDownloadPathsTestcaseLevel != null) {
                    logger.info("Attachment paths are found in the list.");
                    List<String> testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                    Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);

                    if (!testcaseAttachmentOIDs.isEmpty()) {
                        rallyOverallTestStepAttachmentsStatus = true;
                    } else {
                        logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
                        return;
                    }
                } else {
                    logger.info("No Attachment path found for Testcase level.");
                }

                JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
                List<JiraTestStep> testSteps = new ArrayList<>();

                for (JsonElement element : stepsArray) {
                    JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                    testSteps.add(step);

                    // Download attachments for each test step
                    List<String> attachmentPaths = jiraOperation.downloadStepAttachments(step);
                    List<String> embeddedImagePaths = jiraOperation.downloadEmbeddedImages(step);

                    // Attach files and images to the corresponding Rally test step
                    rallyOperation.attachFilesToTestStep(rallyRestApi, rallyTestcaseOID, step.getIndex(), attachmentPaths);
                    rallyOperation.attachFilesToTestStep(rallyRestApi, rallyTestcaseOID, step.getIndex(), embeddedImagePaths);
                }

                rallyOperation.migrateTestSteps(rallyTestcaseOID, testSteps, rallyRestApi);

                if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                    System.out.println("Rally Testcase Creation Status is true");
                } else {
                    logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
                }
            }
        } catch (Exception e) {
            logger.error("Error occurred during the migration process", e);
        }
    }
}
```

### Explanation:

1. **Attachment Handling:**
   - **`downloadStepAttachments(step)`**: This method downloads the attachments related to each test step.
   - **`downloadEmbeddedImages(step)`**: This method downloads the images embedded in the test steps.

2. **File Attachment Upload:**
   - **`attachFilesToTestStep(...)`**: This method uploads the downloaded attachments and images to the corresponding Rally test steps.

### Note:
You'll need to ensure that `JiraOperation` has methods like `downloadStepAttachments()` and `downloadEmbeddedImages()` and that `RallyOperation` has a method `attachFilesToTestStep(...)` that can handle these attachments accordingly.

These changes should allow your framework to download and upload attachments and embedded images in test steps while migrating JIRA test cases to Rally.
