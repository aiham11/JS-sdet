import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;

public class JiraOperation {

    private static final Logger logger = Logger.getLogger(JiraOperation.class);

    private String tsFileAttachmentDownloadLocation = "C:/Users/aalchala/Documents/Thina/RallyMigration/attachments/TestStep_Attachments";
    private String tsEmbeddedAttachmentDownloadLocation = "C:/Users/aalchala/Documents/Thina/RallyMigration/attachments/TestStep_Embedded_Attachments";

    // Method to download attachments from JIRA test steps
    public List<String> downloadStepAttachments(JiraTestStep step) {
        List<String> attachmentPaths = new ArrayList<>();
        List<JiraAttachment> attachments = step.getAttachments();

        if (attachments != null) {
            for (JiraAttachment attachment : attachments) {
                try {
                    String downloadUrl = attachment.getUrl();
                    if (downloadUrl != null) {
                        String localPath = tsFileAttachmentDownloadLocation + "/" + attachment.getFileName();
                        downloadFileFromURL(downloadUrl, localPath);
                        attachmentPaths.add(localPath);
                    } else {
                        logger.warn("Download URL is null for attachment: " + attachment.getFileName());
                    }
                } catch (IOException e) {
                    logger.error("Failed to download attachment: " + attachment.getFileName(), e);
                }
            }
        } else {
            logger.warn("No attachments found for the test step.");
        }

        return attachmentPaths;
    }

    // Method to download embedded images from JIRA test steps
    public List<String> downloadEmbeddedImages(JiraTestStep step) {
        List<String> embeddedImagePaths = new ArrayList<>();
        List<String> imageUrls = step.getEmbeddedImageUrls();

        if (imageUrls != null) {
            for (String imageUrl : imageUrls) {
                try {
                    String imagePath = downloadImage(imageUrl);
                    embeddedImagePaths.add(imagePath);
                } catch (IOException e) {
                    logger.error("Failed to download embedded image from URL: " + imageUrl, e);
                }
            }
        } else {
            logger.warn("No embedded images found for the test step.");
        }

        return embeddedImagePaths;
    }

    // Helper method to download a file from a URL
    private void downloadFileFromURL(String fileURL, String destinationFile) throws IOException {
        URL url = new URL(fileURL);
        try (InputStream inputStream = url.openStream();
             FileOutputStream fos = new FileOutputStream(destinationFile);
             ReadableByteChannel rbc = Channels.newChannel(inputStream)) {
            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        }
        logger.info("Downloaded file from URL: " + fileURL + " to: " + destinationFile);
    }

    // Helper method to download an image from a URL
    private String downloadImage(String imageUrl) throws IOException {
        String fileName = "downloaded_" + System.currentTimeMillis() + "_" + imageUrl.substring(imageUrl.lastIndexOf('/') + 1);
        String localPath = tsEmbeddedAttachmentDownloadLocation + "/" + fileName;
        downloadFileFromURL(imageUrl, localPath);
        logger.info("Downloaded image from URL: " + imageUrl + " to: " + localPath);
        return localPath;
    }
}
