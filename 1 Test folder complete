package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.GetRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.GetResponse;

import java.util.Collections;

public class RallyOperation {

    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;
    private static final Logger logger = LogManager.getLogger();

    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
    }

    public String createRallyTestcase(JsonObject jiraJson) {
        String rallyTestCaseOID = null;
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);
        JsonObject testCase = new JsonObject();

        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira");
        }

        testCase.addProperty("Method", "Manual");

        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", priority);
            }
        } else {
            testCase.addProperty("Priority", "Default Priority");
        }

        testCase.addProperty("Owner", "/user/" + rallyUser);

        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false);
        }

        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");

        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
        if (testFolder == null) {
            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return rallyTestCaseOID;
        } else logger.info("Folder " + folderPath + " is created successfully in Rally");

        rallyJson.add("TestFolder", testFolder);
        rallyJson.add("testCase", testCase);

        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = null;
            try {
                createResponse = restApi.create(createRequest);
            } catch (IOException e) {
                logger.error("IO exception during create request.", e);
            }

            if (createResponse.wasSuccessful()) {
                rallyTestCaseOID = createResponse.getObject().get("_ref").getAsString();
                logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());

            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }

        } finally {
            try {
                restApi.close();
                logger.info("Closed rest api resource in finally block");
            } catch (IOException e) {
                logger.error("Error occurred while closing rest api resource at finally block", e);
            }

        }
        return rallyTestCaseOID;
    }

    public List<String> attachFilestoRallyTestcase(String rallyTestCaseOID, List<String> filePaths) {

        List<String> testcaseAttachmentOIDs = new ArrayList<String>();
        RallyRestApi rallyApi = null;
        try {
            rallyApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("Rally Base URL has some syntax error.", e);

        }
        try {
            for (String filePath : filePaths) {
                try {
                    testcaseAttachmentOIDs.add(attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, filePath));
                    logger.info("File " + filePath + " is attached for the testcase OID " + rallyTestCaseOID + " in Rally successfully");
                } catch (IOException e) {
                    testcaseAttachmentOIDs.clear();
                    logger.error("File " + filePath + is not attached to Rally due to IO exception.", e);
                    return testcaseAttachmentOIDs;
                }
            }
        } finally {
            try {
                rallyApi.close();
            } catch (IOException e) {
                logger.error("Ready API resource is not closed due to IO exception.", e);

            }
        }
        return testcaseAttachmentOIDs;

    }

    public String attachFileToRallyTestCase(RallyRestApi rallyApi, String testCaseId, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        String ContentType = null;
        String attachmentType = filePath.substring(filePath.lastIndexOf('.')).toLowerCase();

        if (attachmentType.equals("png")) {
            ContentType = "image/png";

        } else if (attachmentType.equals("txt")) {
            ContentType = "text/plain";

        } else if (attachmentType.equals("jpeg") || attachmentType.equals("jpg")) {
            ContentType = "image/jpeg";

        } else if (attachmentType.equals("xml")) {
            ContentType = "application/xml";

        } else if (attachmentType.equals("gif")) {
            ContentType = "image/gif";

        } else if (attachmentType.equals("doc")) {
            ContentType = "application/msword";

        } else if (attachmentType.equals("docx")) {
            ContentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";

        } else if (attachmentType.equals("xls")) {
            ContentType = "application/vnd.ms-excel";

        } else if (attachmentType.equals("xlsx")) {
            ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

        } else if (attachmentType.equals("zip")) {
            ContentType = "application/zip";

        }

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);
        CreateRequest attachmentContentRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse attachmentContentResponse = rallyApi.create(attachmentContentRequest);
        if (!attachmentContentResponse.wasSuccessful()) {
            logger.error("Error creating AttachmentContent for file " + filePath + ": " + attachmentContentResponse.getErrors());
            return null;
        }
        String attachmentContentRef = attachmentContentResponse.getObject().get("_ref").getAsString();

        JsonObject attachment = new JsonObject();
        attachment.addProperty("Artifact", "/testcase/" + testCaseId);
        attachment.addProperty("Content", attachmentContentRef);
        attachment.addProperty("Name", Paths.get(filePath).getFileName().toString());
        attachment.addProperty("Description", "Jira to Rally Migration Automated Attachments");
        attachment.addProperty("ContentType", ContentType);
        attachment.addProperty("Size", fileContent.length);
        CreateRequest attachmentRequest = new CreateRequest("Attachment", attachment);
        CreateResponse attachmentResponse = rallyApi.create(attachmentRequest);
        if (attachmentResponse.wasSuccessful()) {
            logger.info("Attachment created successfully for file " + filePath + ": " + attachmentResponse.getObject().get("_ref").getAsString());
            return attachmentResponse.getObject().get("_ref").getAsString();
        } else {
            logger.error("Error creating Attachment for file " + filePath + ": " + attachmentResponse.getErrors());
            return null;
        }
    }

    public void migrateTestStepsWithAttachments(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi, List<String> attachmentOIDs) {
        Collections.reverse(jiraTestSteps);

        for (JiraTestStep step : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseRef);
                newTestStep.addProperty("StepIndex", step.getIndex());

                String inputField = step.getDescription();
                String expectedResultField = step.getExpectedResult();

                List<JiraAttachment> attachments = step.getAttachments();
                if (attachments != null && !attachments.isEmpty()) {
                    for (JiraAttachment attachment : attachments) {
                        String filePath = attachment.getUrl();

                        if (filePath != null && !filePath.isEmpty()) {
                            String attachmentContentOID = createAttachmentContent(rallyRestApi, filePath);
                            if (attachmentContentOID != null) {
                                // Logic to decide where the attachment belongs
                                if (attachment.shouldBeInInput()) { // Placeholder for actual logic
                                    inputField += " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentContentOID + "/content'/>";
                                } else if (attachment.shouldBeInExpectedResult()) { // Placeholder for actual logic
                                    expectedResultField += " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentContentOID + "/content'/>";
                                }
                            } else {
                                logger.error("Failed to create attachment content for step index " + step.getIndex());
                            }
                        } else {
                            logger.warn("File path is null or empty for attachment in step index " + step.getIndex());
                        }
                    }
                }

                newTestStep.addProperty("Input", inputField);
                newTestStep.addProperty("ExpectedResult", expectedResultField);
                newTestStep.addProperty("TestData", step.getTestData());

                CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
                CreateResponse createResponse = rallyRestApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    String rallyTestStepOID = createResponse.getObject().get("_ref").getAsString();
                    logger.info("Successfully created test step: " + step.getDescription());

                    moveAttachmentsToTestStep(rallyTestStepOID, attachmentOIDs, rallyRestApi);
                } else {
                    logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
                }
            } catch (Exception e) {
                logger.error("Exception while creating test step: " + step.getDescription(), e);
            }
        }
    }

    public String createAttachmentContent(RallyRestApi rallyApi, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);

        CreateRequest createRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse createResponse = rallyApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            String attachmentContentOID = createResponse.getObject().get("_ref").getAsString();
            logger.info("Successfully created AttachmentContent with OID: " + attachmentContentOID);
            return attachmentContentOID;
        } else {
            logger.error("Error occurred while creating AttachmentContent: " + createResponse.getErrors());
            return null;
        }
    }

    // Existing methods like checkObjectExists, moveAttachmentsToTestStep, and embedAttachmentInTestStep remain unchanged

}



















public class RallyOperation {

    // Existing methods...

    public void migrateTestStepsWithAttachments(String rallyTestCaseRef, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyRestApi, List<String> attachmentOIDs) {
        Collections.reverse(jiraTestSteps);

        for (JiraTestStep step : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseRef);
                newTestStep.addProperty("StepIndex", step.getIndex());

                String inputField = step.getDescription();
                String expectedResultField = step.getExpectedResult();

                List<JiraAttachment> attachments = step.getAttachments();
                if (attachments != null && !attachments.isEmpty()) {
                    for (JiraAttachment attachment : attachments) {
                        String filePath = attachment.getUrl();

                        if (filePath != null && !filePath.isEmpty()) {
                            String attachmentContentOID = createAttachmentContent(rallyRestApi, filePath);
                            if (attachmentContentOID != null) {
                                // Logic to decide where the attachment belongs
                                if (inputField != null && inputField.contains(attachment.getName())) {
                                    inputField += " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentContentOID + "/content'/>";
                                } else if (expectedResultField != null && expectedResultField.contains(attachment.getName())) {
                                    expectedResultField += " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentContentOID + "/content'/>";
                                } else {
                                    // Default to placing it in the ExpectedResult if no clear match
                                    expectedResultField += " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentContentOID + "/content'/>";
                                }
                            } else {
                                logger.error("Failed to create attachment content for step index " + step.getIndex());
                            }
                        } else {
                            logger.warn("File path is null or empty for attachment in step index " + step.getIndex());
                        }
                    }
                }

                newTestStep.addProperty("Input", inputField);
                newTestStep.addProperty("ExpectedResult", expectedResultField);
                newTestStep.addProperty("TestData", step.getTestData());

                CreateRequest createRequest = new CreateRequest("testcasestep", newTestStep);
                CreateResponse createResponse = rallyRestApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    String rallyTestStepOID = createResponse.getObject().get("_ref").getAsString();
                    logger.info("Successfully created test step: " + step.getDescription());

                    moveAttachmentsToTestStep(rallyTestStepOID, attachmentOIDs, rallyRestApi);
                } else {
                    logger.error("Failed to create test step: " + step.getDescription() + ". Error: " + createResponse.getErrors());
                }
            } catch (Exception e) {
                logger.error("Exception while creating test step: " + step.getDescription(), e);
            }
        }
    }

    // Existing methods...

}


