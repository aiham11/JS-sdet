package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import java.net.URI;

public class RunnerClass {

    // Logger Initialization for Runner Class
    private static final Logger logger = LogManager.getLogger();

    // Main method
    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {
        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();

        for (String key : testcaseKeys) {
            boolean rallyTestcaseCreationStatus = false;
            boolean rallyOverallTestStepAttachmentsStatus = false;
            jiraTestCase.setKey(key);
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");
            List<String> embeddedAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");

            String rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);

            if (rallyTestcaseOID != null) {
                rallyTestcaseCreationStatus = true;
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                break;
            }

            List<String> testcaseAttachmentOIDs = new ArrayList<>();

            if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                logger.info("Attachment paths are found in the list.");
                testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);
                if (!testcaseAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                } else {
                    logger.error("The Jira testcase is not created in Rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in Rally.");
                    return;
                }
            } else {
                logger.info("No Attachment path found for Testcase level.");
            }

            // Handle Test Step File Attachments
            if (fileAttachmentDownloadPathsTestStepLevel != null && !fileAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step file attachments paths are found in the list.");
                List<String> testStepAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
                if (!testStepAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                    testcaseAttachmentOIDs.addAll(testStepAttachmentOIDs);
                } else {
                    logger.error("The Jira test step file attachments are not created in Rally for Testcase key " + jiraTestCase.getKey());
                    return;
                }
            } else {
                logger.info("No Attachment path found for Test Step file level.");
            }

            // Handle Test Step Embedded Attachments
            if (embeddedAttachmentDownloadPathsTestStepLevel != null && !embeddedAttachmentDownloadPathsTestStepLevel.isEmpty()) {
                logger.info("Test Step embedded attachments paths are found in the list.");
                List<String> embeddedAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, embeddedAttachmentDownloadPathsTestStepLevel);
                Utils.deleteAttachmentFileFromLocal(embeddedAttachmentDownloadPathsTestStepLevel);
                if (!embeddedAttachmentOIDs.isEmpty()) {
                    rallyOverallTestStepAttachmentsStatus = true;
                    testcaseAttachmentOIDs.addAll(embeddedAttachmentOIDs);
                } else {
                    logger.error("The Jira test step embedded attachments are not created in Rally for Testcase key " + jiraTestCase.getKey());
                    return;
                }
            } else {
                logger.info("No Attachment path found for Test Step embedded level.");
            }

            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();

            for (JsonElement element : stepsArray) {
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);
            }

            // Handle Test Step creation with attachments
            for (JiraTestStep step : testSteps) {
                List<JiraAttachment> attachments = step.getAttachments();

                if (attachments != null && !attachments.isEmpty()) {
                    for (JiraAttachment attachment : attachments) {
                        String filePath = attachment.getUrl(); // Assuming `getUrl()` returns the path to the file

                        // Ensure the file path is not null or empty
                        if (filePath != null && !filePath.isEmpty()) {
                            String attachmentContentOID = rallyOperation.createAttachmentContent(rallyRestApi, filePath);

                            if (attachmentContentOID != null) {
                                // Determine whether the attachment belongs to Input or ExpectedResult
                                String stepOID = rallyOperation.createTestcaseStepWithAttachment(rallyRestApi, rallyTestcaseOID, step, attachmentContentOID, rallyOperation.determineAttachmentField(step, attachment));

                                if (stepOID == null) {
                                    logger.error("Failed to create TestcaseStep for step index " + step.getIndex());
                                }
                            } else {
                                logger.error("Failed to create attachment content for step index " + step.getIndex());
                            }
                        } else {
                            logger.warn("File path is null or empty for attachment in step index " + step.getIndex());
                        }
                    }
                } else {
                    logger.info("No attachments found for step index " + step.getIndex());
                }
            }

            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                System.out.println("Rally Testcase Creation Status is true");
            } else {
                logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
            }

            if (rallyTestcaseCreationStatus && rallyOverallTestStepAttachmentsStatus) {
                // Call method to update "Testcase Migrated" and "Test Folder Migrated" checkboxes in Jira
            }
        }
    }
}

