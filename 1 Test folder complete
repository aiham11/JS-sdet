public class RallyOperation {

    // Method to create TestcaseStep with attachments in the correct field (Input or ExpectedResult)
    public String createTestcaseStepWithAttachment(RallyRestApi rallyApi, String rallyTestcaseOID, JiraTestStep step, String attachmentOID, String attachmentField) throws IOException {
        JsonObject testcaseStep = new JsonObject();
        testcaseStep.addProperty("TestCase", "testcase/" + rallyTestcaseOID);
        testcaseStep.addProperty("StepIndex", step.getIndex());

        // Assigning values dynamically based on the determined attachment field
        if ("Input".equals(attachmentField)) {
            testcaseStep.addProperty("Input", step.getDescription() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
            testcaseStep.addProperty("ExpectedResult", step.getExpectedResult());
        } else if ("ExpectedResult".equals(attachmentField)) {
            testcaseStep.addProperty("Input", step.getDescription());
            testcaseStep.addProperty("ExpectedResult", step.getExpectedResult() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
        }

        CreateRequest createRequest = new CreateRequest("TestcaseStep", testcaseStep);
        CreateResponse createResponse = rallyApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            String stepOID = createResponse.getObject().get("_ref").getAsString();
            logger.info("Successfully created TestcaseStep with OID: " + stepOID);
            return stepOID;
        } else {
            logger.error("Error occurred while creating TestcaseStep: " + createResponse.getErrors());
            return null;
        }
    }

    // Method to determine if the attachment should be placed in Input or ExpectedResult
    private String determineAttachmentField(JiraTestStep step, JiraAttachment attachment) {
        // Logic to determine where the attachment should go based on Jira data
        // You could base this on specific fields in the JiraTestStep or JiraAttachment classes

        // Example logic (this would be customized based on how Jira attachments are associated):
        if (step.getDescription() != null && step.getDescription().contains(attachment.getFileName())) {
            return "Input";
        } else if (step.getExpectedResult() != null && step.getExpectedResult().contains(attachment.getFileName())) {
            return "ExpectedResult";
        } else {
            // Default to Input if unclear
            return "Input";
        }
    }

    // Method to create attachment content
    public String createAttachmentContent(RallyRestApi rallyApi, String filePath) throws IOException {
        byte[] fileContent = Files.readAllBytes(Paths.get(filePath));
        String encodedContent = Base64.getEncoder().encodeToString(fileContent);

        JsonObject attachmentContent = new JsonObject();
        attachmentContent.addProperty("Content", encodedContent);

        CreateRequest createRequest = new CreateRequest("AttachmentContent", attachmentContent);
        CreateResponse createResponse = rallyApi.create(createRequest);

        if (createResponse.wasSuccessful()) {
            String attachmentContentOID = createResponse.getObject().get("_ref").getAsString();
            logger.info("Successfully created AttachmentContent with OID: " + attachmentContentOID);
            return attachmentContentOID;
        } else {
            logger.error("Error occurred while creating AttachmentContent: " + createResponse.getErrors());
            return null;
        }
    }
}
