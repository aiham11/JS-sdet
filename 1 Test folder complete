package com.optum.coe.automation.rally;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;

public class RunnerClass {

    // Logger Initialization for Runner Class
    private static final Logger logger = LogManager.getLogger();

    // Main method
    public static void main(String[] args) throws MalformedURLException, IOException, URISyntaxException {

        Gson gson = new Gson();
        String rallyUrl = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        String rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        RallyRestApi rallyRestApi = new RallyRestApi(new URI(rallyUrl), rallyApiKey);

        JiraTestCase jiraTestCase = new JiraTestCase();
        JiraOperation jiraOperation = new JiraOperation();
        ArrayList<String> testcaseKeys = jiraOperation.getJiraNonMigratedTestcaseKeys();
        boolean rallyTestcaseCreationStatus, rallyOverallTestCaseAttachmentsStatus, jiraDownloadTCFileAttachmentStatus, jiraDownloadTSFileAttachmentStatus, jiraDownloadTSEmbeddedAttachmentStatus, jiraOverallAttachmentdownloadStatus;

        for (int i = 0; i < testcaseKeys.size(); i++) {
            rallyTestcaseCreationStatus = false;
            rallyOverallTestCaseAttachmentsStatus = false;
            jiraDownloadTCFileAttachmentStatus = false;
            jiraDownloadTSFileAttachmentStatus = false;
            jiraDownloadTSEmbeddedAttachmentStatus = false;
            jiraOverallAttachmentdownloadStatus = false;
            String rallyTestcaseOID = null;
            jiraTestCase.setKey(testcaseKeys.get(i));
            logger.info("Processing " + jiraTestCase.getKey());
            JsonObject jiraTestcaseJson = jiraOperation.getJiraTestCaseDetails(jiraTestCase.getKey());
            RallyOperation rallyOperation = new RallyOperation();

            // Start the downloading process of attachments from Jira to Local and Verify them
            List<String> fileAttachmentDownloadPathsTestcaseLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "testcase", "file");
            jiraDownloadTCFileAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(fileAttachmentDownloadPathsTestcaseLevel);

            // Handle Test Step Attachments
            List<String> fileAttachmentDownloadPathsTestStepLevel = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "file");

            // Create a map to hold the embedded attachments for each step
            Map<Integer, List<String>> embeddedAttachmentsMap = new HashMap<>();
            JsonArray stepsArray = jiraTestcaseJson.getAsJsonObject("testScript").getAsJsonArray("steps");
            List<JiraTestStep> testSteps = new ArrayList<>();

            for (int i1 = 0; i1 < stepsArray.size(); i1++) {
                JsonElement element = stepsArray.get(i1);
                JiraTestStep step = gson.fromJson(element, JiraTestStep.class);
                testSteps.add(step);

                // Download and map embedded attachments for the current test step
                List<String> embeddedAttachmentPaths = jiraOperation.jiraAttachmentsDownload(jiraTestCase.getKey(), "teststep", "embedded");
                if (!embeddedAttachmentPaths.isEmpty()) {
                    embeddedAttachmentsMap.put(i1, embeddedAttachmentPaths);
                }
            }

            rallyOperation.migrateTestStepsWithAttachments(rallyTestcaseOID, testSteps, rallyRestApi, embeddedAttachmentsMap);

            // Delete the attachments from the local system after uploading to Rally
            Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestStepLevel);
            embeddedAttachmentsMap.values().forEach(Utils::deleteAttachmentFileFromLocal);

            // Check if all attachments are downloaded successfully
            jiraDownloadTSFileAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(fileAttachmentDownloadPathsTestStepLevel);
            jiraDownloadTSEmbeddedAttachmentStatus = Utils.areAttachmentsDownloadedFromJira(embeddedAttachmentPaths);

            if (jiraDownloadTCFileAttachmentStatus && jiraDownloadTSFileAttachmentStatus && jiraDownloadTSEmbeddedAttachmentStatus) {
                jiraOverallAttachmentdownloadStatus = true;
                rallyTestcaseOID = rallyOperation.createRallyTestcase(jiraTestcaseJson);
            } else {
                logger.error("Error while downloading the attachments from Jira to Local for processing " + jiraTestCase.getKey());
                return;
            }

            if (rallyTestcaseOID != null) {
                rallyTestcaseCreationStatus = true;
                logger.info("Rally testcase is successfully created with Jira equivalent testcase for the Jira testcase key " + jiraTestCase.getKey());
            } else {
                logger.error("Testcase is not created in Rally for the key " + jiraTestCase.getKey());
                return;
            }

            if (fileAttachmentDownloadPathsTestcaseLevel != null && !fileAttachmentDownloadPathsTestcaseLevel.contains("error")) {
                logger.info("Attachment paths are found in the list for testcase file attachments.");
                List<String> testcaseAttachmentOIDs = rallyOperation.attachFilestoRallyTestcase(rallyTestcaseOID, fileAttachmentDownloadPathsTestcaseLevel);
                Utils.deleteAttachmentFileFromLocal(fileAttachmentDownloadPathsTestcaseLevel);

                if (!testcaseAttachmentOIDs.isEmpty()) {
                    rallyOverallTestCaseAttachmentsStatus = true;
                } else {
                    logger.error("The Jira testcase is not created in rally. Jira Testcase key " + jiraTestCase.getKey() + " is not created in rally");
                    return;
                }
            } else if (fileAttachmentDownloadPathsTestcaseLevel.isEmpty()) {
                logger.info("No Attachment URL found for Testcase level while processing the testcase " + jiraTestCase.getKey());
            }

            // Over all validation for Jira Testcase migration to Rally
            if (jiraOverallAttachmentdownloadStatus && rallyTestcaseCreationStatus && rallyOverallTestCaseAttachmentsStatus) {
                logger.info("OverAll Status: Rally Testcase is created successfully with required testcase level attachments");
            }
        }
    }
}
